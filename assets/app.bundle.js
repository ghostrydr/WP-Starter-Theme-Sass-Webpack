/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NyaXB0LWxvYWRlci9hZGRTY3JpcHQuanM/M2ZlNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihzcmMpIHtcclxuXHRpZiAodHlwZW9mIGV4ZWNTY3JpcHQgIT09IFwidW5kZWZpbmVkXCIpXHJcblx0XHRleGVjU2NyaXB0KHNyYyk7XHJcblx0ZWxzZVxyXG5cdFx0ZXZhbC5jYWxsKG51bGwsIHNyYyk7XHJcbn1cclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2NyaXB0LWxvYWRlci9hZGRTY3JpcHQuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(2);__webpack_require__(4);var _app=__webpack_require__(6);var _app2=_interopRequireDefault(_app);__webpack_require__(7);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}// Foundation init\n// Import the apps styles\n// Import Foundation \n$(function(){$(document).foundation();});// Import our modules//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9hcHAuanM/Yzk5ZSJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJmb3VuZGF0aW9uIl0sIm1hcHBpbmdzIjoiQUFDQSx1QkFDQSx1QkFHQSxnQyx1Q0FHQSx1QixtRkFFQTtBQU5BO0FBSkE7QUFXQUEsRUFBRSxVQUFXLENBQ1hBLEVBQUVDLFFBQUYsRUFBWUMsVUFBWixHQUNELENBRkQsRUFKQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IEZvdW5kYXRpb24gXG5pbXBvcnQgJ3NjcmlwdC1sb2FkZXIhd2hhdC1pbnB1dC9kaXN0L3doYXQtaW5wdXQnO1xuaW1wb3J0ICdzY3JpcHQtbG9hZGVyIWZvdW5kYXRpb24tc2l0ZXMvZGlzdC9qcy9mb3VuZGF0aW9uJztcblxuLy8gSW1wb3J0IHRoZSBhcHBzIHN0eWxlc1xuaW1wb3J0IHNhc3MgZnJvbSAnLi4vc2Nzcy9hcHAuc2NzcydcblxuLy8gSW1wb3J0IG91ciBtb2R1bGVzXG5pbXBvcnQgJy4vbW9kdWxlcy9faGVhZGVyLmpzJ1xuXG4vLyBGb3VuZGF0aW9uIGluaXRcbiQoZnVuY3Rpb24oKSB7XG4gICQoZG9jdW1lbnQpLmZvdW5kYXRpb24oKTtcbn0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2FwcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(0)(__webpack_require__(3))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2hhdC1pbnB1dC9kaXN0L3doYXQtaW5wdXQuanM/OGYyYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIiEhL1VzZXJzL1NhbURhdmlkb2ZmL0Rlc2t0b3AvV1AtU3RhcnRlci1UaGVtZS1TYXNzLVdlYnBhY2svc3JjL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyL2FkZFNjcmlwdC5qc1wiKShyZXF1aXJlKFwiISEvVXNlcnMvU2FtRGF2aWRvZmYvRGVza3RvcC9XUC1TdGFydGVyLVRoZW1lLVNhc3MtV2VicGFjay9zcmMvbm9kZV9tb2R1bGVzL3Jhdy1sb2FkZXIvaW5kZXguanMhL1VzZXJzL1NhbURhdmlkb2ZmL0Rlc2t0b3AvV1AtU3RhcnRlci1UaGVtZS1TYXNzLVdlYnBhY2svc3JjL25vZGVfbW9kdWxlcy93aGF0LWlucHV0L2Rpc3Qvd2hhdC1pbnB1dC5qc1wiKSlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3doYXQtaW5wdXQvZGlzdC93aGF0LWlucHV0LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("module.exports = \"/**\\n * what-input - A global utility for tracking the current input method (mouse, keyboard or touch).\\n * @version v4.3.0\\n * @link https://github.com/ten1seven/what-input\\n * @license MIT\\n */\\n(function webpackUniversalModuleDefinition(root, factory) {\\n\\tif(typeof exports === 'object' && typeof module === 'object')\\n\\t\\tmodule.exports = factory();\\n\\telse if(typeof define === 'function' && define.amd)\\n\\t\\tdefine(\\\"whatInput\\\", [], factory);\\n\\telse if(typeof exports === 'object')\\n\\t\\texports[\\\"whatInput\\\"] = factory();\\n\\telse\\n\\t\\troot[\\\"whatInput\\\"] = factory();\\n})(this, function() {\\nreturn /******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId])\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\texports: {},\\n/******/ \\t\\t\\tid: moduleId,\\n/******/ \\t\\t\\tloaded: false\\n/******/ \\t\\t};\\n\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.loaded = true;\\n\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n\\n\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(0);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports) {\\n\\n\\t'use strict';\\n\\n\\tmodule.exports = function () {\\n\\t  /*\\n\\t   * variables\\n\\t   */\\n\\n\\t  // last used input type\\n\\t  var currentInput = 'initial';\\n\\n\\t  // last used input intent\\n\\t  var currentIntent = null;\\n\\n\\t  // cache document.documentElement\\n\\t  var doc = document.documentElement;\\n\\n\\t  // form input types\\n\\t  var formInputs = ['input', 'select', 'textarea'];\\n\\n\\t  var functionList = [];\\n\\n\\t  // list of modifier keys commonly used with the mouse and\\n\\t  // can be safely ignored to prevent false keyboard detection\\n\\t  var ignoreMap = [16, // shift\\n\\t  17, // control\\n\\t  18, // alt\\n\\t  91, // Windows key / left Apple cmd\\n\\t  93 // Windows menu / right Apple cmd\\n\\t  ];\\n\\n\\t  // list of keys for which we change intent even for form inputs\\n\\t  var changeIntentMap = [9 // tab\\n\\t  ];\\n\\n\\t  // mapping of events to input types\\n\\t  var inputMap = {\\n\\t    keydown: 'keyboard',\\n\\t    keyup: 'keyboard',\\n\\t    mousedown: 'mouse',\\n\\t    mousemove: 'mouse',\\n\\t    MSPointerDown: 'pointer',\\n\\t    MSPointerMove: 'pointer',\\n\\t    pointerdown: 'pointer',\\n\\t    pointermove: 'pointer',\\n\\t    touchstart: 'touch'\\n\\t  };\\n\\n\\t  // array of all used input types\\n\\t  var inputTypes = [];\\n\\n\\t  // boolean: true if touch buffer is active\\n\\t  var isBuffering = false;\\n\\n\\t  // boolean: true if the page is being scrolled\\n\\t  var isScrolling = false;\\n\\n\\t  // store current mouse position\\n\\t  var mousePos = {\\n\\t    x: null,\\n\\t    y: null\\n\\t  };\\n\\n\\t  // map of IE 10 pointer events\\n\\t  var pointerMap = {\\n\\t    2: 'touch',\\n\\t    3: 'touch', // treat pen like touch\\n\\t    4: 'mouse'\\n\\t  };\\n\\n\\t  var supportsPassive = false;\\n\\n\\t  try {\\n\\t    var opts = Object.defineProperty({}, 'passive', {\\n\\t      get: function get() {\\n\\t        supportsPassive = true;\\n\\t      }\\n\\t    });\\n\\n\\t    window.addEventListener('test', null, opts);\\n\\t  } catch (e) {}\\n\\n\\t  /*\\n\\t   * set up\\n\\t   */\\n\\n\\t  var setUp = function setUp() {\\n\\t    // add correct mouse wheel event mapping to `inputMap`\\n\\t    inputMap[detectWheel()] = 'mouse';\\n\\n\\t    addListeners();\\n\\t    setInput();\\n\\t  };\\n\\n\\t  /*\\n\\t   * events\\n\\t   */\\n\\n\\t  var addListeners = function addListeners() {\\n\\t    // `pointermove`, `MSPointerMove`, `mousemove` and mouse wheel event binding\\n\\t    // can only demonstrate potential, but not actual, interaction\\n\\t    // and are treated separately\\n\\n\\t    // pointer events (mouse, pen, touch)\\n\\t    if (window.PointerEvent) {\\n\\t      doc.addEventListener('pointerdown', updateInput);\\n\\t      doc.addEventListener('pointermove', setIntent);\\n\\t    } else if (window.MSPointerEvent) {\\n\\t      doc.addEventListener('MSPointerDown', updateInput);\\n\\t      doc.addEventListener('MSPointerMove', setIntent);\\n\\t    } else {\\n\\t      // mouse events\\n\\t      doc.addEventListener('mousedown', updateInput);\\n\\t      doc.addEventListener('mousemove', setIntent);\\n\\n\\t      // touch events\\n\\t      if ('ontouchstart' in window) {\\n\\t        doc.addEventListener('touchstart', touchBuffer);\\n\\t        doc.addEventListener('touchend', touchBuffer);\\n\\t      }\\n\\t    }\\n\\n\\t    // mouse wheel\\n\\t    doc.addEventListener(detectWheel(), setIntent, supportsPassive ? { passive: true } : false);\\n\\n\\t    // keyboard events\\n\\t    doc.addEventListener('keydown', updateInput);\\n\\t    doc.addEventListener('keyup', updateInput);\\n\\t  };\\n\\n\\t  // checks conditions before updating new input\\n\\t  var updateInput = function updateInput(event) {\\n\\t    // only execute if the touch buffer timer isn't running\\n\\t    if (!isBuffering) {\\n\\t      var eventKey = event.which;\\n\\t      var value = inputMap[event.type];\\n\\t      if (value === 'pointer') value = pointerType(event);\\n\\n\\t      if (currentInput !== value || currentIntent !== value) {\\n\\t        var activeElem = document.activeElement;\\n\\t        var activeInput = false;\\n\\t        var notFormInput = activeElem && activeElem.nodeName && formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;\\n\\n\\t        if (notFormInput || changeIntentMap.indexOf(eventKey) !== -1) {\\n\\t          activeInput = true;\\n\\t        }\\n\\n\\t        if (value === 'touch' ||\\n\\t        // ignore mouse modifier keys\\n\\t        value === 'mouse' ||\\n\\t        // don't switch if the current element is a form input\\n\\t        value === 'keyboard' && eventKey && activeInput && ignoreMap.indexOf(eventKey) === -1) {\\n\\t          // set the current and catch-all variable\\n\\t          currentInput = currentIntent = value;\\n\\n\\t          setInput();\\n\\t        }\\n\\t      }\\n\\t    }\\n\\t  };\\n\\n\\t  // updates the doc and `inputTypes` array with new input\\n\\t  var setInput = function setInput() {\\n\\t    doc.setAttribute('data-whatinput', currentInput);\\n\\t    doc.setAttribute('data-whatintent', currentInput);\\n\\n\\t    if (inputTypes.indexOf(currentInput) === -1) {\\n\\t      inputTypes.push(currentInput);\\n\\t      doc.className += ' whatinput-types-' + currentInput;\\n\\t    }\\n\\n\\t    fireFunctions('input');\\n\\t  };\\n\\n\\t  // updates input intent for `mousemove` and `pointermove`\\n\\t  var setIntent = function setIntent(event) {\\n\\t    // test to see if `mousemove` happened relative to the screen\\n\\t    // to detect scrolling versus mousemove\\n\\t    if (mousePos['x'] !== event.screenX || mousePos['y'] !== event.screenY) {\\n\\t      isScrolling = false;\\n\\n\\t      mousePos['x'] = event.screenX;\\n\\t      mousePos['y'] = event.screenY;\\n\\t    } else {\\n\\t      isScrolling = true;\\n\\t    }\\n\\n\\t    // only execute if the touch buffer timer isn't running\\n\\t    // or scrolling isn't happening\\n\\t    if (!isBuffering && !isScrolling) {\\n\\t      var value = inputMap[event.type];\\n\\t      if (value === 'pointer') value = pointerType(event);\\n\\n\\t      if (currentIntent !== value) {\\n\\t        currentIntent = value;\\n\\n\\t        doc.setAttribute('data-whatintent', currentIntent);\\n\\n\\t        fireFunctions('intent');\\n\\t      }\\n\\t    }\\n\\t  };\\n\\n\\t  // buffers touch events because they frequently also fire mouse events\\n\\t  var touchBuffer = function touchBuffer(event) {\\n\\t    if (event.type === 'touchstart') {\\n\\t      isBuffering = false;\\n\\n\\t      // set the current input\\n\\t      updateInput(event);\\n\\t    } else {\\n\\t      isBuffering = true;\\n\\t    }\\n\\t  };\\n\\n\\t  var fireFunctions = function fireFunctions(type) {\\n\\t    for (var i = 0, len = functionList.length; i < len; i++) {\\n\\t      if (functionList[i].type === type) {\\n\\t        functionList[i].fn.call(undefined, currentIntent);\\n\\t      }\\n\\t    }\\n\\t  };\\n\\n\\t  /*\\n\\t   * utilities\\n\\t   */\\n\\n\\t  var pointerType = function pointerType(event) {\\n\\t    if (typeof event.pointerType === 'number') {\\n\\t      return pointerMap[event.pointerType];\\n\\t    } else {\\n\\t      // treat pen like touch\\n\\t      return event.pointerType === 'pen' ? 'touch' : event.pointerType;\\n\\t    }\\n\\t  };\\n\\n\\t  // detect version of mouse wheel event to use\\n\\t  // via https://developer.mozilla.org/en-US/docs/Web/Events/wheel\\n\\t  var detectWheel = function detectWheel() {\\n\\t    var wheelType = void 0;\\n\\n\\t    // Modern browsers support \\\"wheel\\\"\\n\\t    if ('onwheel' in document.createElement('div')) {\\n\\t      wheelType = 'wheel';\\n\\t    } else {\\n\\t      // Webkit and IE support at least \\\"mousewheel\\\"\\n\\t      // or assume that remaining browsers are older Firefox\\n\\t      wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\\n\\t    }\\n\\n\\t    return wheelType;\\n\\t  };\\n\\n\\t  var objPos = function objPos(match) {\\n\\t    for (var i = 0, len = functionList.length; i < len; i++) {\\n\\t      if (functionList[i].fn === match) {\\n\\t        return i;\\n\\t      }\\n\\t    }\\n\\t  };\\n\\n\\t  /*\\n\\t   * init\\n\\t   */\\n\\n\\t  // don't start script unless browser cuts the mustard\\n\\t  // (also passes if polyfills are used)\\n\\t  if ('addEventListener' in window && Array.prototype.indexOf) {\\n\\t    setUp();\\n\\t  }\\n\\n\\t  /*\\n\\t   * api\\n\\t   */\\n\\n\\t  return {\\n\\t    // returns string: the current input type\\n\\t    // opt: 'loose'|'strict'\\n\\t    // 'strict' (default): returns the same value as the `data-whatinput` attribute\\n\\t    // 'loose': includes `data-whatintent` value if it's more current than `data-whatinput`\\n\\t    ask: function ask(opt) {\\n\\t      return opt === 'loose' ? currentIntent : currentInput;\\n\\t    },\\n\\n\\t    // returns array: all the detected input types\\n\\t    types: function types() {\\n\\t      return inputTypes;\\n\\t    },\\n\\n\\t    // overwrites ignored keys with provided array\\n\\t    ignoreKeys: function ignoreKeys(arr) {\\n\\t      ignoreMap = arr;\\n\\t    },\\n\\n\\t    // attach functions to input and intent \\\"events\\\"\\n\\t    // funct: function to fire on change\\n\\t    // eventType: 'input'|'intent'\\n\\t    registerOnChange: function registerOnChange(fn, eventType) {\\n\\t      functionList.push({\\n\\t        fn: fn,\\n\\t        type: eventType || 'input'\\n\\t      });\\n\\t    },\\n\\n\\t    unRegisterOnChange: function unRegisterOnChange(fn) {\\n\\t      var position = objPos(fn);\\n\\n\\t      if (position) {\\n\\t        functionList.splice(position, 1);\\n\\t      }\\n\\t    }\\n\\t  };\\n\\t}();\\n\\n/***/ })\\n/******/ ])\\n});\\n;\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(0)(__webpack_require__(5))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm91bmRhdGlvbi1zaXRlcy9kaXN0L2pzL2ZvdW5kYXRpb24uanM/YWM1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcIiEhL1VzZXJzL1NhbURhdmlkb2ZmL0Rlc2t0b3AvV1AtU3RhcnRlci1UaGVtZS1TYXNzLVdlYnBhY2svc3JjL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyL2FkZFNjcmlwdC5qc1wiKShyZXF1aXJlKFwiISEvVXNlcnMvU2FtRGF2aWRvZmYvRGVza3RvcC9XUC1TdGFydGVyLVRoZW1lLVNhc3MtV2VicGFjay9zcmMvbm9kZV9tb2R1bGVzL3Jhdy1sb2FkZXIvaW5kZXguanMhL1VzZXJzL1NhbURhdmlkb2ZmL0Rlc2t0b3AvV1AtU3RhcnRlci1UaGVtZS1TYXNzLVdlYnBhY2svc3JjL25vZGVfbW9kdWxlcy9mb3VuZGF0aW9uLXNpdGVzL2Rpc3QvanMvZm91bmRhdGlvbi5qc1wiKSlcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zY3JpcHQtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL2ZvdW5kYXRpb24tc2l0ZXMvZGlzdC9qcy9mb3VuZGF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("module.exports = \"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// identity function for calling harmony imports with the correct context\\n/******/ \\t__webpack_require__.i = function(value) { return value; };\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, {\\n/******/ \\t\\t\\t\\tconfigurable: false,\\n/******/ \\t\\t\\t\\tenumerable: true,\\n/******/ \\t\\t\\t\\tget: getter\\n/******/ \\t\\t\\t});\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = 36);\\n/******/ })\\n/************************************************************************/\\n/******/ ([\\n/* 0 */\\n/***/ (function(module, exports) {\\n\\nmodule.exports = jQuery;\\n\\n/***/ }),\\n/* 1 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return rtl; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"b\\\", function() { return GetYoDigits; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"c\\\", function() { return transitionend; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n\\n\\n\\n\\n// Core Foundation Utilities, utilized in a number of places.\\n\\n/**\\n * Returns a boolean for RTL support\\n */\\nfunction rtl() {\\n  return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html').attr('dir') === 'rtl';\\n}\\n\\n/**\\n * returns a random base-36 uid with namespacing\\n * @function\\n * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\\n * @param {String} namespace - name of plugin to be incorporated in uid, optional.\\n * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\\n * @returns {String} - unique id\\n */\\nfunction GetYoDigits(length, namespace) {\\n  length = length || 6;\\n  return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');\\n}\\n\\nfunction transitionend($elem) {\\n  var transitions = {\\n    'transition': 'transitionend',\\n    'WebkitTransition': 'webkitTransitionEnd',\\n    'MozTransition': 'transitionend',\\n    'OTransition': 'otransitionend'\\n  };\\n  var elem = document.createElement('div'),\\n      end;\\n\\n  for (var t in transitions) {\\n    if (typeof elem.style[t] !== 'undefined') {\\n      end = transitions[t];\\n    }\\n  }\\n  if (end) {\\n    return end;\\n  } else {\\n    end = setTimeout(function () {\\n      $elem.triggerHandler('transitionend', [$elem]);\\n    }, 1);\\n    return 'transitionend';\\n  }\\n}\\n\\n\\n\\n/***/ }),\\n/* 2 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Plugin; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\n\\n// Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST\\n// {function} _setup (replaces previous constructor),\\n// {function} _destroy (replaces previous destroy)\\n\\nvar Plugin = function () {\\n  function Plugin(element, options) {\\n    _classCallCheck(this, Plugin);\\n\\n    this._setup(element, options);\\n    var pluginName = getPluginName(this);\\n    this.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, pluginName);\\n\\n    if (!this.$element.attr('data-' + pluginName)) {\\n      this.$element.attr('data-' + pluginName, this.uuid);\\n    }\\n    if (!this.$element.data('zfPlugin')) {\\n      this.$element.data('zfPlugin', this);\\n    }\\n    /**\\n     * Fires when the plugin has initialized.\\n     * @event Plugin#init\\n     */\\n    this.$element.trigger('init.zf.' + pluginName);\\n  }\\n\\n  _createClass(Plugin, [{\\n    key: 'destroy',\\n    value: function destroy() {\\n      this._destroy();\\n      var pluginName = getPluginName(this);\\n      this.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')\\n      /**\\n       * Fires when the plugin has been destroyed.\\n       * @event Plugin#destroyed\\n       */\\n      .trigger('destroyed.zf.' + pluginName);\\n      for (var prop in this) {\\n        this[prop] = null; //clean up script to prep for garbage collection.\\n      }\\n    }\\n  }]);\\n\\n  return Plugin;\\n}();\\n\\n// Convert PascalCase to kebab-case\\n// Thank you: http://stackoverflow.com/a/8955580\\n\\n\\nfunction hyphenate(str) {\\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\\n}\\n\\nfunction getPluginName(obj) {\\n  if (typeof obj.constructor.name !== 'undefined') {\\n    return hyphenate(obj.constructor.name);\\n  } else {\\n    return hyphenate(obj.className);\\n  }\\n}\\n\\n\\n\\n/***/ }),\\n/* 3 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Keyboard; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/*******************************************\\n *                                         *\\n * This util was created by Marius Olbertz *\\n * Please thank Marius on GitHub /owlbertz *\\n * or the web http://www.mariusolbertz.de/ *\\n *                                         *\\n ******************************************/\\n\\n\\n\\n\\n\\n\\nvar keyCodes = {\\n  9: 'TAB',\\n  13: 'ENTER',\\n  27: 'ESCAPE',\\n  32: 'SPACE',\\n  35: 'END',\\n  36: 'HOME',\\n  37: 'ARROW_LEFT',\\n  38: 'ARROW_UP',\\n  39: 'ARROW_RIGHT',\\n  40: 'ARROW_DOWN'\\n};\\n\\nvar commands = {};\\n\\n// Functions pulled out to be referenceable from internals\\nfunction findFocusable($element) {\\n  if (!$element) {\\n    return false;\\n  }\\n  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\\n    if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':visible') || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('tabindex') < 0) {\\n      return false;\\n    } //only have visible elements and those that have a tabindex greater or equal 0\\n    return true;\\n  });\\n}\\n\\nfunction parseKey(event) {\\n  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\\n\\n  // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\\n  key = key.replace(/\\\\W+/, '');\\n\\n  if (event.shiftKey) key = 'SHIFT_' + key;\\n  if (event.ctrlKey) key = 'CTRL_' + key;\\n  if (event.altKey) key = 'ALT_' + key;\\n\\n  // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\\n  key = key.replace(/_$/, '');\\n\\n  return key;\\n}\\n\\nvar Keyboard = {\\n  keys: getKeyCodes(keyCodes),\\n\\n  /**\\n   * Parses the (keyboard) event and returns a String that represents its key\\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\\n   * @param {Event} event - the event generated by the event handler\\n   * @return String key - String that represents the key pressed\\n   */\\n  parseKey: parseKey,\\n\\n  /**\\n   * Handles the given (keyboard) event\\n   * @param {Event} event - the event generated by the event handler\\n   * @param {String} component - Foundation component's name, e.g. Slider or Reveal\\n   * @param {Objects} functions - collection of functions that are to be executed\\n   */\\n  handleKey: function (event, component, functions) {\\n    var commandList = commands[component],\\n        keyCode = this.parseKey(event),\\n        cmds,\\n        command,\\n        fn;\\n\\n    if (!commandList) return console.warn('Component not defined!');\\n\\n    if (typeof commandList.ltr === 'undefined') {\\n      // this component does not differentiate between ltr and rtl\\n      cmds = commandList; // use plain list\\n    } else {\\n      // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\\n      if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"a\\\" /* rtl */])()) cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.ltr, commandList.rtl);else cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.rtl, commandList.ltr);\\n    }\\n    command = cmds[keyCode];\\n\\n    fn = functions[command];\\n    if (fn && typeof fn === 'function') {\\n      // execute function  if exists\\n      var returnValue = fn.apply();\\n      if (functions.handled || typeof functions.handled === 'function') {\\n        // execute function when event was handled\\n        functions.handled(returnValue);\\n      }\\n    } else {\\n      if (functions.unhandled || typeof functions.unhandled === 'function') {\\n        // execute function when event was not handled\\n        functions.unhandled();\\n      }\\n    }\\n  },\\n\\n\\n  /**\\n   * Finds all focusable elements within the given `$element`\\n   * @param {jQuery} $element - jQuery object to search within\\n   * @return {jQuery} $focusable - all focusable elements within `$element`\\n   */\\n\\n  findFocusable: findFocusable,\\n\\n  /**\\n   * Returns the component name name\\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\\n   * @return String componentName\\n   */\\n\\n  register: function (componentName, cmds) {\\n    commands[componentName] = cmds;\\n  },\\n\\n\\n  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?\\n  //\\n  /**\\n   * Traps the focus in the given element.\\n   * @param  {jQuery} $element  jQuery object to trap the foucs into.\\n   */\\n  trapFocus: function ($element) {\\n    var $focusable = findFocusable($element),\\n        $firstFocusable = $focusable.eq(0),\\n        $lastFocusable = $focusable.eq(-1);\\n\\n    $element.on('keydown.zf.trapfocus', function (event) {\\n      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {\\n        event.preventDefault();\\n        $firstFocusable.focus();\\n      } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {\\n        event.preventDefault();\\n        $lastFocusable.focus();\\n      }\\n    });\\n  },\\n\\n  /**\\n   * Releases the trapped focus from the given element.\\n   * @param  {jQuery} $element  jQuery object to release the focus for.\\n   */\\n  releaseFocus: function ($element) {\\n    $element.off('keydown.zf.trapfocus');\\n  }\\n};\\n\\n/*\\n * Constants for easier comparing.\\n * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\\n */\\nfunction getKeyCodes(kcs) {\\n  var k = {};\\n  for (var kc in kcs) {\\n    k[kcs[kc]] = kcs[kc];\\n  }return k;\\n}\\n\\n\\n\\n/***/ }),\\n/* 4 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return MediaQuery; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n\\n\\n\\n\\n// Default set of media queries\\nvar defaultQueries = {\\n  'default': 'only screen',\\n  landscape: 'only screen and (orientation: landscape)',\\n  portrait: 'only screen and (orientation: portrait)',\\n  retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\\n};\\n\\n// matchMedia() polyfill - Test a CSS media type/query in JS.\\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\\nvar matchMedia = window.matchMedia || function () {\\n  'use strict';\\n\\n  // For browsers that support matchMedium api such as IE 9 and webkit\\n\\n  var styleMedia = window.styleMedia || window.media;\\n\\n  // For those that don't support matchMedium\\n  if (!styleMedia) {\\n    var style = document.createElement('style'),\\n        script = document.getElementsByTagName('script')[0],\\n        info = null;\\n\\n    style.type = 'text/css';\\n    style.id = 'matchmediajs-test';\\n\\n    script && script.parentNode && script.parentNode.insertBefore(style, script);\\n\\n    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\\n    info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\\n\\n    styleMedia = {\\n      matchMedium: function (media) {\\n        var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\\n\\n        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\\n        if (style.styleSheet) {\\n          style.styleSheet.cssText = text;\\n        } else {\\n          style.textContent = text;\\n        }\\n\\n        // Test if media query is true or false\\n        return info.width === '1px';\\n      }\\n    };\\n  }\\n\\n  return function (media) {\\n    return {\\n      matches: styleMedia.matchMedium(media || 'all'),\\n      media: media || 'all'\\n    };\\n  };\\n}();\\n\\nvar MediaQuery = {\\n  queries: [],\\n\\n  current: '',\\n\\n  /**\\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\\n   * @function\\n   * @private\\n   */\\n  _init: function () {\\n    var self = this;\\n    var $meta = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');\\n    if (!$meta.length) {\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class=\\\"foundation-mq\\\">').appendTo(document.head);\\n    }\\n\\n    var extractedStyles = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');\\n    var namedQueries;\\n\\n    namedQueries = parseStyleToObject(extractedStyles);\\n\\n    for (var key in namedQueries) {\\n      if (namedQueries.hasOwnProperty(key)) {\\n        self.queries.push({\\n          name: key,\\n          value: 'only screen and (min-width: ' + namedQueries[key] + ')'\\n        });\\n      }\\n    }\\n\\n    this.current = this._getCurrentSize();\\n\\n    this._watcher();\\n  },\\n\\n\\n  /**\\n   * Checks if the screen is at least as wide as a breakpoint.\\n   * @function\\n   * @param {String} size - Name of the breakpoint to check.\\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\\n   */\\n  atLeast: function (size) {\\n    var query = this.get(size);\\n\\n    if (query) {\\n      return matchMedia(query).matches;\\n    }\\n\\n    return false;\\n  },\\n\\n\\n  /**\\n   * Checks if the screen matches to a breakpoint.\\n   * @function\\n   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\\n   */\\n  is: function (size) {\\n    size = size.trim().split(' ');\\n    if (size.length > 1 && size[1] === 'only') {\\n      if (size[0] === this._getCurrentSize()) return true;\\n    } else {\\n      return this.atLeast(size[0]);\\n    }\\n    return false;\\n  },\\n\\n\\n  /**\\n   * Gets the media query of a breakpoint.\\n   * @function\\n   * @param {String} size - Name of the breakpoint to get.\\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\\n   */\\n  get: function (size) {\\n    for (var i in this.queries) {\\n      if (this.queries.hasOwnProperty(i)) {\\n        var query = this.queries[i];\\n        if (size === query.name) return query.value;\\n      }\\n    }\\n\\n    return null;\\n  },\\n\\n\\n  /**\\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\\n   * @function\\n   * @private\\n   * @returns {String} Name of the current breakpoint.\\n   */\\n  _getCurrentSize: function () {\\n    var matched;\\n\\n    for (var i = 0; i < this.queries.length; i++) {\\n      var query = this.queries[i];\\n\\n      if (matchMedia(query.value).matches) {\\n        matched = query;\\n      }\\n    }\\n\\n    if (typeof matched === 'object') {\\n      return matched.name;\\n    } else {\\n      return matched;\\n    }\\n  },\\n\\n\\n  /**\\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\\n   * @function\\n   * @private\\n   */\\n  _watcher: function () {\\n    var _this = this;\\n\\n    __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {\\n      var newSize = _this._getCurrentSize(),\\n          currentSize = _this.current;\\n\\n      if (newSize !== currentSize) {\\n        // Change the current media query\\n        _this.current = newSize;\\n\\n        // Broadcast the media query change on the window\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\\n      }\\n    });\\n  }\\n};\\n\\n// Thank you: https://github.com/sindresorhus/query-string\\nfunction parseStyleToObject(str) {\\n  var styleObject = {};\\n\\n  if (typeof str !== 'string') {\\n    return styleObject;\\n  }\\n\\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\\n\\n  if (!str) {\\n    return styleObject;\\n  }\\n\\n  styleObject = str.split('&').reduce(function (ret, param) {\\n    var parts = param.replace(/\\\\+/g, ' ').split('=');\\n    var key = parts[0];\\n    var val = parts[1];\\n    key = decodeURIComponent(key);\\n\\n    // missing `=` should be `null`:\\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\\n    val = val === undefined ? null : decodeURIComponent(val);\\n\\n    if (!ret.hasOwnProperty(key)) {\\n      ret[key] = val;\\n    } else if (Array.isArray(ret[key])) {\\n      ret[key].push(val);\\n    } else {\\n      ret[key] = [ret[key], val];\\n    }\\n    return ret;\\n  }, {});\\n\\n  return styleObject;\\n}\\n\\n\\n\\n/***/ }),\\n/* 5 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Triggers; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(6);\\n\\n\\n\\n\\n\\nvar MutationObserver = function () {\\n  var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\\n  for (var i = 0; i < prefixes.length; i++) {\\n    if (prefixes[i] + 'MutationObserver' in window) {\\n      return window[prefixes[i] + 'MutationObserver'];\\n    }\\n  }\\n  return false;\\n}();\\n\\nvar triggers = function (el, type) {\\n  el.data(type).split(' ').forEach(function (id) {\\n    __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);\\n  });\\n};\\n\\nvar Triggers = {\\n  Listeners: {\\n    Basic: {},\\n    Global: {}\\n  },\\n  Initializers: {}\\n};\\n\\nTriggers.Listeners.Basic = {\\n  openListener: function () {\\n    triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');\\n  },\\n  closeListener: function () {\\n    var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');\\n    if (id) {\\n      triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');\\n    } else {\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');\\n    }\\n  },\\n  toggleListener: function () {\\n    var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');\\n    if (id) {\\n      triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');\\n    } else {\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');\\n    }\\n  },\\n  closeableListener: function (e) {\\n    e.stopPropagation();\\n    var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');\\n\\n    if (animation !== '') {\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');\\n      });\\n    } else {\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');\\n    }\\n  },\\n  toggleFocusListener: function () {\\n    var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');\\n    __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);\\n  }\\n};\\n\\n// Elements with [data-open] will reveal a plugin that supports it when clicked.\\nTriggers.Initializers.addOpenListener = function ($elem) {\\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);\\n  $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);\\n};\\n\\n// Elements with [data-close] will close a plugin that supports it when clicked.\\n// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\\nTriggers.Initializers.addCloseListener = function ($elem) {\\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);\\n  $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);\\n};\\n\\n// Elements with [data-toggle] will toggle a plugin that supports it when clicked.\\nTriggers.Initializers.addToggleListener = function ($elem) {\\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);\\n  $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);\\n};\\n\\n// Elements with [data-closable] will respond to close.zf.trigger events.\\nTriggers.Initializers.addCloseableListener = function ($elem) {\\n  $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);\\n  $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);\\n};\\n\\n// Elements with [data-toggle-focus] will respond to coming in and out of focus\\nTriggers.Initializers.addToggleFocusListener = function ($elem) {\\n  $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);\\n  $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);\\n};\\n\\n// More Global/complex listeners and triggers\\nTriggers.Listeners.Global = {\\n  resizeListener: function ($nodes) {\\n    if (!MutationObserver) {\\n      //fallback for IE 9\\n      $nodes.each(function () {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');\\n      });\\n    }\\n    //trigger all listening elements and signal a resize event\\n    $nodes.attr('data-events', \\\"resize\\\");\\n  },\\n  scrollListener: function ($nodes) {\\n    if (!MutationObserver) {\\n      //fallback for IE 9\\n      $nodes.each(function () {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');\\n      });\\n    }\\n    //trigger all listening elements and signal a scroll event\\n    $nodes.attr('data-events', \\\"scroll\\\");\\n  },\\n  closeMeListener: function (e, pluginId) {\\n    var plugin = e.namespace.split('.')[0];\\n    var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box=\\\"' + pluginId + '\\\"]');\\n\\n    plugins.each(function () {\\n      var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);\\n      _this.triggerHandler('close.zf.trigger', [_this]);\\n    });\\n  }\\n};\\n\\n// Global, parses whole document.\\nTriggers.Initializers.addClosemeListener = function (pluginName) {\\n  var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),\\n      plugNames = ['dropdown', 'tooltip', 'reveal'];\\n\\n  if (pluginName) {\\n    if (typeof pluginName === 'string') {\\n      plugNames.push(pluginName);\\n    } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {\\n      plugNames.concat(pluginName);\\n    } else {\\n      console.error('Plugin names must be strings');\\n    }\\n  }\\n  if (yetiBoxes.length) {\\n    var listeners = plugNames.map(function (name) {\\n      return 'closeme.zf.' + name;\\n    }).join(' ');\\n\\n    __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);\\n  }\\n};\\n\\nfunction debounceGlobalListener(debounce, trigger, listener) {\\n  var timer = void 0,\\n      args = Array.prototype.slice.call(arguments, 3);\\n  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {\\n    if (timer) {\\n      clearTimeout(timer);\\n    }\\n    timer = setTimeout(function () {\\n      listener.apply(null, args);\\n    }, debounce || 10); //default time to emit scroll event\\n  });\\n}\\n\\nTriggers.Initializers.addResizeListener = function (debounce) {\\n  var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');\\n  if ($nodes.length) {\\n    debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);\\n  }\\n};\\n\\nTriggers.Initializers.addScrollListener = function (debounce) {\\n  var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');\\n  if ($nodes.length) {\\n    debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);\\n  }\\n};\\n\\nTriggers.Initializers.addMutationEventsListener = function ($elem) {\\n  if (!MutationObserver) {\\n    return false;\\n  }\\n  var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');\\n\\n  //element callback\\n  var listeningElementsMutation = function (mutationRecordsList) {\\n    var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);\\n\\n    //trigger the event handler for the element depending on type\\n    switch (mutationRecordsList[0].type) {\\n      case \\\"attributes\\\":\\n        if ($target.attr(\\\"data-events\\\") === \\\"scroll\\\" && mutationRecordsList[0].attributeName === \\\"data-events\\\") {\\n          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);\\n        }\\n        if ($target.attr(\\\"data-events\\\") === \\\"resize\\\" && mutationRecordsList[0].attributeName === \\\"data-events\\\") {\\n          $target.triggerHandler('resizeme.zf.trigger', [$target]);\\n        }\\n        if (mutationRecordsList[0].attributeName === \\\"style\\\") {\\n          $target.closest(\\\"[data-mutate]\\\").attr(\\\"data-events\\\", \\\"mutate\\\");\\n          $target.closest(\\\"[data-mutate]\\\").triggerHandler('mutateme.zf.trigger', [$target.closest(\\\"[data-mutate]\\\")]);\\n        }\\n        break;\\n\\n      case \\\"childList\\\":\\n        $target.closest(\\\"[data-mutate]\\\").attr(\\\"data-events\\\", \\\"mutate\\\");\\n        $target.closest(\\\"[data-mutate]\\\").triggerHandler('mutateme.zf.trigger', [$target.closest(\\\"[data-mutate]\\\")]);\\n        break;\\n\\n      default:\\n        return false;\\n      //nothing\\n    }\\n  };\\n\\n  if ($nodes.length) {\\n    //for each element that needs to listen for resizing, scrolling, or mutation add a single observer\\n    for (var i = 0; i <= $nodes.length - 1; i++) {\\n      var elementObserver = new MutationObserver(listeningElementsMutation);\\n      elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: [\\\"data-events\\\", \\\"style\\\"] });\\n    }\\n  }\\n};\\n\\nTriggers.Initializers.addSimpleListeners = function () {\\n  var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);\\n\\n  Triggers.Initializers.addOpenListener($document);\\n  Triggers.Initializers.addCloseListener($document);\\n  Triggers.Initializers.addToggleListener($document);\\n  Triggers.Initializers.addCloseableListener($document);\\n  Triggers.Initializers.addToggleFocusListener($document);\\n};\\n\\nTriggers.Initializers.addGlobalListeners = function () {\\n  var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);\\n  Triggers.Initializers.addMutationEventsListener($document);\\n  Triggers.Initializers.addResizeListener();\\n  Triggers.Initializers.addScrollListener();\\n  Triggers.Initializers.addClosemeListener();\\n};\\n\\nTriggers.init = function ($, Foundation) {\\n  if (typeof $.triggersInitialized === 'undefined') {\\n    var $document = $(document);\\n\\n    if (document.readyState === \\\"complete\\\") {\\n      Triggers.Initializers.addSimpleListeners();\\n      Triggers.Initializers.addGlobalListeners();\\n    } else {\\n      $(window).on('load', function () {\\n        Triggers.Initializers.addSimpleListeners();\\n        Triggers.Initializers.addGlobalListeners();\\n      });\\n    }\\n\\n    $.triggersInitialized = true;\\n  }\\n\\n  if (Foundation) {\\n    Foundation.Triggers = Triggers;\\n    // Legacy included to be backwards compatible for now.\\n    Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;\\n  }\\n};\\n\\n\\n\\n/***/ }),\\n/* 6 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"b\\\", function() { return Move; });\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Motion; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n\\n\\n\\n\\n\\n/**\\n * Motion module.\\n * @module foundation.motion\\n */\\n\\nvar initClasses = ['mui-enter', 'mui-leave'];\\nvar activeClasses = ['mui-enter-active', 'mui-leave-active'];\\n\\nvar Motion = {\\n  animateIn: function (element, animation, cb) {\\n    animate(true, element, animation, cb);\\n  },\\n\\n  animateOut: function (element, animation, cb) {\\n    animate(false, element, animation, cb);\\n  }\\n};\\n\\nfunction Move(duration, elem, fn) {\\n  var anim,\\n      prog,\\n      start = null;\\n  // console.log('called');\\n\\n  if (duration === 0) {\\n    fn.apply(elem);\\n    elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\\n    return;\\n  }\\n\\n  function move(ts) {\\n    if (!start) start = ts;\\n    // console.log(start, ts);\\n    prog = ts - start;\\n    fn.apply(elem);\\n\\n    if (prog < duration) {\\n      anim = window.requestAnimationFrame(move, elem);\\n    } else {\\n      window.cancelAnimationFrame(anim);\\n      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\\n    }\\n  }\\n  anim = window.requestAnimationFrame(move);\\n}\\n\\n/**\\n * Animates an element in or out using a CSS transition class.\\n * @function\\n * @private\\n * @param {Boolean} isIn - Defines if the animation is in or out.\\n * @param {Object} element - jQuery or HTML object to animate.\\n * @param {String} animation - CSS class to use.\\n * @param {Function} cb - Callback to run when animation is finished.\\n */\\nfunction animate(isIn, element, animation, cb) {\\n  element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element).eq(0);\\n\\n  if (!element.length) return;\\n\\n  var initClass = isIn ? initClasses[0] : initClasses[1];\\n  var activeClass = isIn ? activeClasses[0] : activeClasses[1];\\n\\n  // Set up the animation\\n  reset();\\n\\n  element.addClass(animation).css('transition', 'none');\\n\\n  requestAnimationFrame(function () {\\n    element.addClass(initClass);\\n    if (isIn) element.show();\\n  });\\n\\n  // Start the animation\\n  requestAnimationFrame(function () {\\n    element[0].offsetWidth;\\n    element.css('transition', '').addClass(activeClass);\\n  });\\n\\n  // Clean up the animation when it finishes\\n  element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"c\\\" /* transitionend */])(element), finish);\\n\\n  // Hides the element (for out animations), resets the element, and runs a callback\\n  function finish() {\\n    if (!isIn) element.hide();\\n    reset();\\n    if (cb) cb.apply(element);\\n  }\\n\\n  // Resets transitions and removes motion-specific classes\\n  function reset() {\\n    element[0].style.transitionDuration = 0;\\n    element.removeClass(initClass + ' ' + activeClass + ' ' + animation);\\n  }\\n}\\n\\n\\n\\n/***/ }),\\n/* 7 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Box; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core__ = __webpack_require__(1);\\n\\n\\n\\n\\nvar Box = {\\n  ImNotTouchingYou: ImNotTouchingYou,\\n  OverlapArea: OverlapArea,\\n  GetDimensions: GetDimensions,\\n  GetOffsets: GetOffsets,\\n  GetExplicitOffsets: GetExplicitOffsets\\n};\\n\\n/**\\n * Compares the dimensions of an element to a container and determines collision events with container.\\n * @function\\n * @param {jQuery} element - jQuery object to test for collisions.\\n * @param {jQuery} parent - jQuery object to use as bounding container.\\n * @param {Boolean} lrOnly - set to true to check left and right values only.\\n * @param {Boolean} tbOnly - set to true to check top and bottom values only.\\n * @default if no parent object passed, detects collisions with `window`.\\n * @returns {Boolean} - true if collision free, false if a collision in any direction.\\n */\\nfunction ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {\\n  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;\\n};\\n\\nfunction OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {\\n  var eleDims = GetDimensions(element),\\n      topOver,\\n      bottomOver,\\n      leftOver,\\n      rightOver;\\n  if (parent) {\\n    var parDims = GetDimensions(parent);\\n\\n    bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);\\n    topOver = eleDims.offset.top - parDims.offset.top;\\n    leftOver = eleDims.offset.left - parDims.offset.left;\\n    rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);\\n  } else {\\n    bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);\\n    topOver = eleDims.offset.top - eleDims.windowDims.offset.top;\\n    leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;\\n    rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);\\n  }\\n\\n  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);\\n  topOver = Math.min(topOver, 0);\\n  leftOver = Math.min(leftOver, 0);\\n  rightOver = Math.min(rightOver, 0);\\n\\n  if (lrOnly) {\\n    return leftOver + rightOver;\\n  }\\n  if (tbOnly) {\\n    return topOver + bottomOver;\\n  }\\n\\n  // use sum of squares b/c we care about overlap area.\\n  return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);\\n}\\n\\n/**\\n * Uses native methods to return an object of dimension values.\\n * @function\\n * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\\n * @returns {Object} - nested object of integer pixel values\\n * TODO - if element is window, return only those values.\\n */\\nfunction GetDimensions(elem, test) {\\n  elem = elem.length ? elem[0] : elem;\\n\\n  if (elem === window || elem === document) {\\n    throw new Error(\\\"I'm sorry, Dave. I'm afraid I can't do that.\\\");\\n  }\\n\\n  var rect = elem.getBoundingClientRect(),\\n      parRect = elem.parentNode.getBoundingClientRect(),\\n      winRect = document.body.getBoundingClientRect(),\\n      winY = window.pageYOffset,\\n      winX = window.pageXOffset;\\n\\n  return {\\n    width: rect.width,\\n    height: rect.height,\\n    offset: {\\n      top: rect.top + winY,\\n      left: rect.left + winX\\n    },\\n    parentDims: {\\n      width: parRect.width,\\n      height: parRect.height,\\n      offset: {\\n        top: parRect.top + winY,\\n        left: parRect.left + winX\\n      }\\n    },\\n    windowDims: {\\n      width: winRect.width,\\n      height: winRect.height,\\n      offset: {\\n        top: winY,\\n        left: winX\\n      }\\n    }\\n  };\\n}\\n\\n/**\\n * Returns an object of top and left integer pixel values for dynamically rendered elements,\\n * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where\\n * you don't know alignment, but generally from\\n * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.\\n * @function\\n * @param {jQuery} element - jQuery object for the element being positioned.\\n * @param {jQuery} anchor - jQuery object for the element's anchor point.\\n * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\\n * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\\n * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\\n * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\\n * TODO alter/rewrite to work with `em` values as well/instead of pixels\\n */\\nfunction GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\\n  console.log(\\\"NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5\\\");\\n  switch (position) {\\n    case 'top':\\n      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__[\\\"a\\\" /* rtl */])() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);\\n    case 'bottom':\\n      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__[\\\"a\\\" /* rtl */])() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\\n    case 'center top':\\n      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);\\n    case 'center bottom':\\n      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);\\n    case 'center left':\\n      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);\\n    case 'center right':\\n      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);\\n    case 'left bottom':\\n      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);\\n    case 'right bottom':\\n      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\\n    // Backwards compatibility... this along with the reveal and reveal full\\n    // classes are the only ones that didn't reference anchor\\n    case 'center':\\n      return {\\n        left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,\\n        top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)\\n      };\\n    case 'reveal':\\n      return {\\n        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,\\n        top: $eleDims.windowDims.offset.top + vOffset\\n      };\\n    case 'reveal full':\\n      return {\\n        left: $eleDims.windowDims.offset.left,\\n        top: $eleDims.windowDims.offset.top\\n      };\\n      break;\\n    default:\\n      return {\\n        left: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__[\\\"a\\\" /* rtl */])() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,\\n        top: $anchorDims.offset.top + $anchorDims.height + vOffset\\n      };\\n\\n  }\\n}\\n\\nfunction GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {\\n  var $eleDims = GetDimensions(element),\\n      $anchorDims = anchor ? GetDimensions(anchor) : null;\\n\\n  var topVal, leftVal;\\n\\n  // set position related attribute\\n\\n  switch (position) {\\n    case 'top':\\n      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);\\n      break;\\n    case 'bottom':\\n      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;\\n      break;\\n    case 'left':\\n      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);\\n      break;\\n    case 'right':\\n      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;\\n      break;\\n  }\\n\\n  // set alignment related attribute\\n  switch (position) {\\n    case 'top':\\n    case 'bottom':\\n      switch (alignment) {\\n        case 'left':\\n          leftVal = $anchorDims.offset.left + hOffset;\\n          break;\\n        case 'right':\\n          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;\\n          break;\\n        case 'center':\\n          leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;\\n          break;\\n      }\\n      break;\\n    case 'right':\\n    case 'left':\\n      switch (alignment) {\\n        case 'bottom':\\n          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;\\n          break;\\n        case 'top':\\n          topVal = $anchorDims.offset.top + vOffset;\\n          break;\\n        case 'center':\\n          topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;\\n          break;\\n      }\\n      break;\\n  }\\n  return { top: topVal, left: leftVal };\\n}\\n\\n\\n\\n/***/ }),\\n/* 8 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return onImagesLoaded; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n\\n\\n\\n\\n/**\\n * Runs a callback function when images are fully loaded.\\n * @param {Object} images - Image(s) to check if loaded.\\n * @param {Func} callback - Function to execute when image is fully loaded.\\n */\\nfunction onImagesLoaded(images, callback) {\\n  var self = this,\\n      unloaded = images.length;\\n\\n  if (unloaded === 0) {\\n    callback();\\n  }\\n\\n  images.each(function () {\\n    // Check if image is loaded\\n    if (this.complete && this.naturalWidth !== undefined) {\\n      singleImageLoaded();\\n    } else {\\n      // If the above check failed, simulate loading on detached element.\\n      var image = new Image();\\n      // Still count image as loaded if it finalizes with an error.\\n      var events = \\\"load.zf.images error.zf.images\\\";\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(image).one(events, function me(event) {\\n        // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off(events, me);\\n        singleImageLoaded();\\n      });\\n      image.src = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('src');\\n    }\\n  });\\n\\n  function singleImageLoaded() {\\n    unloaded--;\\n    if (unloaded === 0) {\\n      callback();\\n    }\\n  }\\n}\\n\\n\\n\\n/***/ }),\\n/* 9 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Nest; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n\\n\\n\\n\\nvar Nest = {\\n  Feather: function (menu) {\\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';\\n\\n    menu.attr('role', 'menubar');\\n\\n    var items = menu.find('li').attr({ 'role': 'menuitem' }),\\n        subMenuClass = 'is-' + type + '-submenu',\\n        subItemClass = subMenuClass + '-item',\\n        hasSubClass = 'is-' + type + '-submenu-parent',\\n        applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.\\n\\n    items.each(function () {\\n      var $item = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n          $sub = $item.children('ul');\\n\\n      if ($sub.length) {\\n        $item.addClass(hasSubClass);\\n        $sub.addClass('submenu ' + subMenuClass).attr({ 'data-submenu': '' });\\n        if (applyAria) {\\n          $item.attr({\\n            'aria-haspopup': true,\\n            'aria-label': $item.children('a:first').text()\\n          });\\n          // Note:  Drilldowns behave differently in how they hide, and so need\\n          // additional attributes.  We should look if this possibly over-generalized\\n          // utility (Nest) is appropriate when we rework menus in 6.4\\n          if (type === 'drilldown') {\\n            $item.attr({ 'aria-expanded': false });\\n          }\\n        }\\n        $sub.addClass('submenu ' + subMenuClass).attr({\\n          'data-submenu': '',\\n          'role': 'menu'\\n        });\\n        if (type === 'drilldown') {\\n          $sub.attr({ 'aria-hidden': true });\\n        }\\n      }\\n\\n      if ($item.parent('[data-submenu]').length) {\\n        $item.addClass('is-submenu-item ' + subItemClass);\\n      }\\n    });\\n\\n    return;\\n  },\\n  Burn: function (menu, type) {\\n    var //items = menu.find('li'),\\n    subMenuClass = 'is-' + type + '-submenu',\\n        subItemClass = subMenuClass + '-item',\\n        hasSubClass = 'is-' + type + '-submenu-parent';\\n\\n    menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');\\n  }\\n};\\n\\n\\n\\n/***/ }),\\n/* 10 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Touch; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n//**************************************************\\n//**Work inspired by multiple jquery swipe plugins**\\n//**Done by Yohai Ararat ***************************\\n//**************************************************\\n\\n\\n\\nvar Touch = {};\\n\\nvar startPosX,\\n    startPosY,\\n    startTime,\\n    elapsedTime,\\n    isMoving = false;\\n\\nfunction onTouchEnd() {\\n  //  alert(this);\\n  this.removeEventListener('touchmove', onTouchMove);\\n  this.removeEventListener('touchend', onTouchEnd);\\n  isMoving = false;\\n}\\n\\nfunction onTouchMove(e) {\\n  if (__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.preventDefault) {\\n    e.preventDefault();\\n  }\\n  if (isMoving) {\\n    var x = e.touches[0].pageX;\\n    var y = e.touches[0].pageY;\\n    var dx = startPosX - x;\\n    var dy = startPosY - y;\\n    var dir;\\n    elapsedTime = new Date().getTime() - startTime;\\n    if (Math.abs(dx) >= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.moveThreshold && elapsedTime <= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.timeThreshold) {\\n      dir = dx > 0 ? 'left' : 'right';\\n    }\\n    // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\\n    //   dir = dy > 0 ? 'down' : 'up';\\n    // }\\n    if (dir) {\\n      e.preventDefault();\\n      onTouchEnd.call(this);\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('swipe', dir).trigger('swipe' + dir);\\n    }\\n  }\\n}\\n\\nfunction onTouchStart(e) {\\n  if (e.touches.length == 1) {\\n    startPosX = e.touches[0].pageX;\\n    startPosY = e.touches[0].pageY;\\n    isMoving = true;\\n    startTime = new Date().getTime();\\n    this.addEventListener('touchmove', onTouchMove, false);\\n    this.addEventListener('touchend', onTouchEnd, false);\\n  }\\n}\\n\\nfunction init() {\\n  this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);\\n}\\n\\nfunction teardown() {\\n  this.removeEventListener('touchstart', onTouchStart);\\n}\\n\\nvar SpotSwipe = function () {\\n  function SpotSwipe($) {\\n    _classCallCheck(this, SpotSwipe);\\n\\n    this.version = '1.0.0';\\n    this.enabled = 'ontouchstart' in document.documentElement;\\n    this.preventDefault = false;\\n    this.moveThreshold = 75;\\n    this.timeThreshold = 200;\\n    this.$ = $;\\n    this._init();\\n  }\\n\\n  _createClass(SpotSwipe, [{\\n    key: '_init',\\n    value: function _init() {\\n      var $ = this.$;\\n      $.event.special.swipe = { setup: init };\\n\\n      $.each(['left', 'up', 'down', 'right'], function () {\\n        $.event.special['swipe' + this] = { setup: function () {\\n            $(this).on('swipe', $.noop);\\n          } };\\n      });\\n    }\\n  }]);\\n\\n  return SpotSwipe;\\n}();\\n\\n/****************************************************\\n * As far as I can tell, both setupSpotSwipe and    *\\n * setupTouchHandler should be idempotent,          *\\n * because they directly replace functions &        *\\n * values, and do not add event handlers directly.  *\\n ****************************************************/\\n\\nTouch.setupSpotSwipe = function ($) {\\n  $.spotSwipe = new SpotSwipe($);\\n};\\n\\n/****************************************************\\n * Method for adding pseudo drag events to elements *\\n ***************************************************/\\nTouch.setupTouchHandler = function ($) {\\n  $.fn.addTouch = function () {\\n    this.each(function (i, el) {\\n      $(el).bind('touchstart touchmove touchend touchcancel', function () {\\n        //we pass the original event object because the jQuery event\\n        //object is normalized to w3c specs and does not provide the TouchList\\n        handleTouch(event);\\n      });\\n    });\\n\\n    var handleTouch = function (event) {\\n      var touches = event.changedTouches,\\n          first = touches[0],\\n          eventTypes = {\\n        touchstart: 'mousedown',\\n        touchmove: 'mousemove',\\n        touchend: 'mouseup'\\n      },\\n          type = eventTypes[event.type],\\n          simulatedEvent;\\n\\n      if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {\\n        simulatedEvent = new window.MouseEvent(type, {\\n          'bubbles': true,\\n          'cancelable': true,\\n          'screenX': first.screenX,\\n          'screenY': first.screenY,\\n          'clientX': first.clientX,\\n          'clientY': first.clientY\\n        });\\n      } else {\\n        simulatedEvent = document.createEvent('MouseEvent');\\n        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);\\n      }\\n      first.target.dispatchEvent(simulatedEvent);\\n    };\\n  };\\n};\\n\\nTouch.init = function ($) {\\n  if (typeof $.spotSwipe === 'undefined') {\\n    Touch.setupSpotSwipe($);\\n    Touch.setupTouchHandler($);\\n  }\\n};\\n\\n\\n\\n/***/ }),\\n/* 11 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Accordion; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n/**\\n * Accordion module.\\n * @module foundation.accordion\\n * @requires foundation.util.keyboard\\n */\\n\\nvar Accordion = function (_Plugin) {\\n  _inherits(Accordion, _Plugin);\\n\\n  function Accordion() {\\n    _classCallCheck(this, Accordion);\\n\\n    return _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).apply(this, arguments));\\n  }\\n\\n  _createClass(Accordion, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of an accordion.\\n     * @class\\n     * @name Accordion\\n     * @fires Accordion#init\\n     * @param {jQuery} element - jQuery object to make into an accordion.\\n     * @param {Object} options - a plain object with settings to override the default options.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Accordion.defaults, this.$element.data(), options);\\n\\n      this.className = 'Accordion'; // ie9 back compat\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Accordion', {\\n        'ENTER': 'toggle',\\n        'SPACE': 'toggle',\\n        'ARROW_DOWN': 'next',\\n        'ARROW_UP': 'previous'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the accordion by animating the preset active pane(s).\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var _this3 = this;\\n\\n      this.$element.attr('role', 'tablist');\\n      this.$tabs = this.$element.children('[data-accordion-item]');\\n\\n      this.$tabs.each(function (idx, el) {\\n        var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el),\\n            $content = $el.children('[data-tab-content]'),\\n            id = $content[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'accordion'),\\n            linkId = el.id || id + '-label';\\n\\n        $el.find('a:first').attr({\\n          'aria-controls': id,\\n          'role': 'tab',\\n          'id': linkId,\\n          'aria-expanded': false,\\n          'aria-selected': false\\n        });\\n\\n        $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });\\n      });\\n      var $initActive = this.$element.find('.is-active').children('[data-tab-content]');\\n      this.firstTimeInit = true;\\n      if ($initActive.length) {\\n        this.down($initActive, this.firstTimeInit);\\n        this.firstTimeInit = false;\\n      }\\n\\n      this._checkDeepLink = function () {\\n        var anchor = window.location.hash;\\n        //need a hash and a relevant anchor in this tabset\\n        if (anchor.length) {\\n          var $link = _this3.$element.find('[href$=\\\"' + anchor + '\\\"]'),\\n              $anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor);\\n\\n          if ($link.length && $anchor) {\\n            if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {\\n              _this3.down($anchor, _this3.firstTimeInit);\\n              _this3.firstTimeInit = false;\\n            };\\n\\n            //roll up a little to show the titles\\n            if (_this3.options.deepLinkSmudge) {\\n              var _this = _this3;\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {\\n                var offset = _this.$element.offset();\\n                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);\\n              });\\n            }\\n\\n            /**\\n              * Fires when the zplugin has deeplinked at pageload\\n              * @event Accordion#deeplink\\n              */\\n            _this3.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);\\n          }\\n        }\\n      };\\n\\n      //use browser to open a tab, if it exists in this tabset\\n      if (this.options.deepLink) {\\n        this._checkDeepLink();\\n      }\\n\\n      this._events();\\n    }\\n\\n    /**\\n     * Adds event handlers for items within the accordion.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      this.$tabs.each(function () {\\n        var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);\\n        var $tabContent = $elem.children('[data-tab-content]');\\n        if ($tabContent.length) {\\n          $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {\\n            e.preventDefault();\\n            _this.toggle($tabContent);\\n          }).on('keydown.zf.accordion', function (e) {\\n            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Accordion', {\\n              toggle: function () {\\n                _this.toggle($tabContent);\\n              },\\n              next: function () {\\n                var $a = $elem.next().find('a').focus();\\n                if (!_this.options.multiExpand) {\\n                  $a.trigger('click.zf.accordion');\\n                }\\n              },\\n              previous: function () {\\n                var $a = $elem.prev().find('a').focus();\\n                if (!_this.options.multiExpand) {\\n                  $a.trigger('click.zf.accordion');\\n                }\\n              },\\n              handled: function () {\\n                e.preventDefault();\\n                e.stopPropagation();\\n              }\\n            });\\n          });\\n        }\\n      });\\n      if (this.options.deepLink) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);\\n      }\\n    }\\n\\n    /**\\n     * Toggles the selected content pane's open/close state.\\n     * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle($target) {\\n      if ($target.closest('[data-accordion]').is('[disabled]')) {\\n        console.info('Cannot toggle an accordion that is disabled.');\\n        return;\\n      }\\n      if ($target.parent().hasClass('is-active')) {\\n        this.up($target);\\n      } else {\\n        this.down($target);\\n      }\\n      //either replace or update browser history\\n      if (this.options.deepLink) {\\n        var anchor = $target.prev('a').attr('href');\\n\\n        if (this.options.updateHistory) {\\n          history.pushState({}, '', anchor);\\n        } else {\\n          history.replaceState({}, '', anchor);\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Opens the accordion tab defined by `$target`.\\n     * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).\\n     * @param {Boolean} firstTime - flag to determine if reflow should happen.\\n     * @fires Accordion#down\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'down',\\n    value: function down($target, firstTime) {\\n      var _this4 = this;\\n\\n      /**\\n       * checking firstTime allows for initial render of the accordion\\n       * to render preset is-active panes.\\n       */\\n      if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime) {\\n        console.info('Cannot call down on an accordion that is disabled.');\\n        return;\\n      }\\n      $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');\\n\\n      if (!this.options.multiExpand && !firstTime) {\\n        var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');\\n        if ($currentActive.length) {\\n          this.up($currentActive.not($target));\\n        }\\n      }\\n\\n      $target.slideDown(this.options.slideSpeed, function () {\\n        /**\\n         * Fires when the tab is done opening.\\n         * @event Accordion#down\\n         */\\n        _this4.$element.trigger('down.zf.accordion', [$target]);\\n      });\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({\\n        'aria-expanded': true,\\n        'aria-selected': true\\n      });\\n    }\\n\\n    /**\\n     * Closes the tab defined by `$target`.\\n     * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).\\n     * @fires Accordion#up\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'up',\\n    value: function up($target) {\\n      if ($target.closest('[data-accordion]').is('[disabled]')) {\\n        console.info('Cannot call up on an accordion that is disabled.');\\n        return;\\n      }\\n\\n      var $aunts = $target.parent().siblings(),\\n          _this = this;\\n\\n      if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {\\n        return;\\n      }\\n\\n      $target.slideUp(_this.options.slideSpeed, function () {\\n        /**\\n         * Fires when the tab is done collapsing up.\\n         * @event Accordion#up\\n         */\\n        _this.$element.trigger('up.zf.accordion', [$target]);\\n      });\\n\\n      $target.attr('aria-hidden', true).parent().removeClass('is-active');\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({\\n        'aria-expanded': false,\\n        'aria-selected': false\\n      });\\n    }\\n\\n    /**\\n     * Destroys an instance of an accordion.\\n     * @fires Accordion#destroyed\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');\\n      this.$element.find('a').off('.zf.accordion');\\n      if (this.options.deepLink) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);\\n      }\\n    }\\n  }]);\\n\\n  return Accordion;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nAccordion.defaults = {\\n  /**\\n   * Amount of time to animate the opening of an accordion pane.\\n   * @option\\n   * @type {number}\\n   * @default 250\\n   */\\n  slideSpeed: 250,\\n  /**\\n   * Allow the accordion to have multiple open panes.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  multiExpand: false,\\n  /**\\n   * Allow the accordion to close all panes.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  allowAllClosed: false,\\n  /**\\n   * Allows the window to scroll to content of pane specified by hash anchor\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLink: false,\\n\\n  /**\\n   * Adjust the deep link scroll to make sure the top of the accordion panel is visible\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLinkSmudge: false,\\n\\n  /**\\n   * Animation time (ms) for the deep link adjustment\\n   * @option\\n   * @type {number}\\n   * @default 300\\n   */\\n  deepLinkSmudgeDelay: 300,\\n\\n  /**\\n   * Update the browser history with the open accordion\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  updateHistory: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 12 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return AccordionMenu; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * AccordionMenu module.\\n * @module foundation.accordionMenu\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.nest\\n */\\n\\nvar AccordionMenu = function (_Plugin) {\\n  _inherits(AccordionMenu, _Plugin);\\n\\n  function AccordionMenu() {\\n    _classCallCheck(this, AccordionMenu);\\n\\n    return _possibleConstructorReturn(this, (AccordionMenu.__proto__ || Object.getPrototypeOf(AccordionMenu)).apply(this, arguments));\\n  }\\n\\n  _createClass(AccordionMenu, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of an accordion menu.\\n     * @class\\n     * @name AccordionMenu\\n     * @fires AccordionMenu#init\\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, AccordionMenu.defaults, this.$element.data(), options);\\n      this.className = 'AccordionMenu'; // ie9 back compat\\n\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Feather(this.$element, 'accordion');\\n\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('AccordionMenu', {\\n        'ENTER': 'toggle',\\n        'SPACE': 'toggle',\\n        'ARROW_RIGHT': 'open',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'close',\\n        'ESCAPE': 'closeAll'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the accordion menu by hiding all nested menus.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var _this = this;\\n\\n      this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');\\n      this.$element.attr({\\n        'role': 'tree',\\n        'aria-multiselectable': this.options.multiOpen\\n      });\\n\\n      this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');\\n      this.$menuLinks.each(function () {\\n        var linkId = this.id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'acc-menu-link'),\\n            $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $sub = $elem.children('[data-submenu]'),\\n            subId = $sub[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'acc-menu'),\\n            isActive = $sub.hasClass('is-active');\\n\\n        if (_this.options.submenuToggle) {\\n          $elem.addClass('has-submenu-toggle');\\n          $elem.children('a').after('<button id=\\\"' + linkId + '\\\" class=\\\"submenu-toggle\\\" aria-controls=\\\"' + subId + '\\\" aria-expanded=\\\"' + isActive + '\\\" title=\\\"' + _this.options.submenuToggleText + '\\\"><span class=\\\"submenu-toggle-text\\\">' + _this.options.submenuToggleText + '</span></button>');\\n        } else {\\n          $elem.attr({\\n            'aria-controls': subId,\\n            'aria-expanded': isActive,\\n            'id': linkId\\n          });\\n        }\\n        $sub.attr({\\n          'aria-labelledby': linkId,\\n          'aria-hidden': !isActive,\\n          'role': 'group',\\n          'id': subId\\n        });\\n      });\\n      this.$element.find('li').attr({\\n        'role': 'treeitem'\\n      });\\n      var initPanes = this.$element.find('.is-active');\\n      if (initPanes.length) {\\n        var _this = this;\\n        initPanes.each(function () {\\n          _this.down(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));\\n        });\\n      }\\n      this._events();\\n    }\\n\\n    /**\\n     * Adds event handlers for items within the menu.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      this.$element.find('li').each(function () {\\n        var $submenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]');\\n\\n        if ($submenu.length) {\\n          if (_this.options.submenuToggle) {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {\\n              _this.toggle($submenu);\\n            });\\n          } else {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {\\n              e.preventDefault();\\n              _this.toggle($submenu);\\n            });\\n          }\\n        }\\n      }).on('keydown.zf.accordionmenu', function (e) {\\n        var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $elements = $element.parent('ul').children('li'),\\n            $prevElement,\\n            $nextElement,\\n            $target = $element.children('[data-submenu]');\\n\\n        $elements.each(function (i) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {\\n            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();\\n            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();\\n\\n            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]:visible').length) {\\n              // has open sub menu\\n              $nextElement = $element.find('li:first-child').find('a').first();\\n            }\\n            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':first-child')) {\\n              // is first element of sub menu\\n              $prevElement = $element.parents('li').first().find('a').first();\\n            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {\\n              // if previous element has open sub menu\\n              $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();\\n            }\\n            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':last-child')) {\\n              // is last element of sub menu\\n              $nextElement = $element.parents('li').first().next('li').find('a').first();\\n            }\\n\\n            return;\\n          }\\n        });\\n\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'AccordionMenu', {\\n          open: function () {\\n            if ($target.is(':hidden')) {\\n              _this.down($target);\\n              $target.find('li').first().find('a').first().focus();\\n            }\\n          },\\n          close: function () {\\n            if ($target.length && !$target.is(':hidden')) {\\n              // close active sub of this item\\n              _this.up($target);\\n            } else if ($element.parent('[data-submenu]').length) {\\n              // close currently open sub\\n              _this.up($element.parent('[data-submenu]'));\\n              $element.parents('li').first().find('a').first().focus();\\n            }\\n          },\\n          up: function () {\\n            $prevElement.focus();\\n            return true;\\n          },\\n          down: function () {\\n            $nextElement.focus();\\n            return true;\\n          },\\n          toggle: function () {\\n            if (_this.options.submenuToggle) {\\n              return false;\\n            }\\n            if ($element.children('[data-submenu]').length) {\\n              _this.toggle($element.children('[data-submenu]'));\\n              return true;\\n            }\\n          },\\n          closeAll: function () {\\n            _this.hideAll();\\n          },\\n          handled: function (preventDefault) {\\n            if (preventDefault) {\\n              e.preventDefault();\\n            }\\n            e.stopImmediatePropagation();\\n          }\\n        });\\n      }); //.attr('tabindex', 0);\\n    }\\n\\n    /**\\n     * Closes all panes of the menu.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'hideAll',\\n    value: function hideAll() {\\n      this.up(this.$element.find('[data-submenu]'));\\n    }\\n\\n    /**\\n     * Opens all panes of the menu.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'showAll',\\n    value: function showAll() {\\n      this.down(this.$element.find('[data-submenu]'));\\n    }\\n\\n    /**\\n     * Toggles the open/close state of a submenu.\\n     * @function\\n     * @param {jQuery} $target - the submenu to toggle\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle($target) {\\n      if (!$target.is(':animated')) {\\n        if (!$target.is(':hidden')) {\\n          this.up($target);\\n        } else {\\n          this.down($target);\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Opens the sub-menu defined by `$target`.\\n     * @param {jQuery} $target - Sub-menu to open.\\n     * @fires AccordionMenu#down\\n     */\\n\\n  }, {\\n    key: 'down',\\n    value: function down($target) {\\n      var _this = this;\\n\\n      if (!this.options.multiOpen) {\\n        this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));\\n      }\\n\\n      $target.addClass('is-active').attr({ 'aria-hidden': false });\\n\\n      if (this.options.submenuToggle) {\\n        $target.prev('.submenu-toggle').attr({ 'aria-expanded': true });\\n      } else {\\n        $target.parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });\\n      }\\n\\n      $target.slideDown(_this.options.slideSpeed, function () {\\n        /**\\n         * Fires when the menu is done opening.\\n         * @event AccordionMenu#down\\n         */\\n        _this.$element.trigger('down.zf.accordionMenu', [$target]);\\n      });\\n    }\\n\\n    /**\\n     * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\\n     * @param {jQuery} $target - Sub-menu to close.\\n     * @fires AccordionMenu#up\\n     */\\n\\n  }, {\\n    key: 'up',\\n    value: function up($target) {\\n      var _this = this;\\n      $target.slideUp(_this.options.slideSpeed, function () {\\n        /**\\n         * Fires when the menu is done collapsing up.\\n         * @event AccordionMenu#up\\n         */\\n        _this.$element.trigger('up.zf.accordionMenu', [$target]);\\n      });\\n\\n      var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);\\n\\n      if (this.options.submenuToggle) {\\n        $menus.prev('.submenu-toggle').attr('aria-expanded', false);\\n      } else {\\n        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);\\n      }\\n    }\\n\\n    /**\\n     * Destroys an instance of accordion menu.\\n     * @fires AccordionMenu#destroyed\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.find('[data-submenu]').slideDown(0).css('display', '');\\n      this.$element.find('a').off('click.zf.accordionMenu');\\n\\n      if (this.options.submenuToggle) {\\n        this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');\\n        this.$element.find('.submenu-toggle').remove();\\n      }\\n\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Burn(this.$element, 'accordion');\\n    }\\n  }]);\\n\\n  return AccordionMenu;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nAccordionMenu.defaults = {\\n  /**\\n   * Amount of time to animate the opening of a submenu in ms.\\n   * @option\\n   * @type {number}\\n   * @default 250\\n   */\\n  slideSpeed: 250,\\n  /**\\n   * Adds a separate submenu toggle button. This allows the parent item to have a link.\\n   * @option\\n   * @example true\\n   */\\n  submenuToggle: false,\\n  /**\\n   * The text used for the submenu toggle if enabled. This is used for screen readers only.\\n   * @option\\n   * @example true\\n   */\\n  submenuToggleText: 'Toggle menu',\\n  /**\\n   * Allow the menu to have multiple open panes.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  multiOpen: true\\n};\\n\\n\\n\\n/***/ }),\\n/* 13 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Drilldown; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__ = __webpack_require__(7);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Drilldown module.\\n * @module foundation.drilldown\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.nest\\n * @requires foundation.util.box\\n */\\n\\nvar Drilldown = function (_Plugin) {\\n  _inherits(Drilldown, _Plugin);\\n\\n  function Drilldown() {\\n    _classCallCheck(this, Drilldown);\\n\\n    return _possibleConstructorReturn(this, (Drilldown.__proto__ || Object.getPrototypeOf(Drilldown)).apply(this, arguments));\\n  }\\n\\n  _createClass(Drilldown, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a drilldown menu.\\n     * @class\\n     * @name Drilldown\\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Drilldown.defaults, this.$element.data(), options);\\n      this.className = 'Drilldown'; // ie9 back compat\\n\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Feather(this.$element, 'drilldown');\\n\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Drilldown', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'previous',\\n        'ESCAPE': 'close',\\n        'TAB': 'down',\\n        'SHIFT_TAB': 'up'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the drilldown by creating jQuery collections of elements\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      if (this.options.autoApplyClass) {\\n        this.$element.addClass('drilldown');\\n      }\\n\\n      this.$element.attr({\\n        'role': 'tree',\\n        'aria-multiselectable': false\\n      });\\n      this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');\\n      this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');\\n      this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');\\n      this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'drilldown'));\\n\\n      this._prepareMenu();\\n      this._registerEvents();\\n\\n      this._keyboardEvents();\\n    }\\n\\n    /**\\n     * prepares drilldown menu by setting attributes to links and elements\\n     * sets a min height to prevent content jumping\\n     * wraps the element if not already wrapped\\n     * @private\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_prepareMenu',\\n    value: function _prepareMenu() {\\n      var _this = this;\\n      // if(!this.options.holdOpen){\\n      //   this._menuLinkEvents();\\n      // }\\n      this.$submenuAnchors.each(function () {\\n        var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);\\n        var $sub = $link.parent();\\n        if (_this.options.parentLink) {\\n          $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\\\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\\\" role=\\\"menu-item\\\"></li>');\\n        }\\n        $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);\\n        $link.children('[data-submenu]').attr({\\n          'aria-hidden': true,\\n          'tabindex': 0,\\n          'role': 'group'\\n        });\\n        _this._events($link);\\n      });\\n      this.$submenus.each(function () {\\n        var $menu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $back = $menu.find('.js-drilldown-back');\\n        if (!$back.length) {\\n          switch (_this.options.backButtonPosition) {\\n            case \\\"bottom\\\":\\n              $menu.append(_this.options.backButton);\\n              break;\\n            case \\\"top\\\":\\n              $menu.prepend(_this.options.backButton);\\n              break;\\n            default:\\n              console.error(\\\"Unsupported backButtonPosition value '\\\" + _this.options.backButtonPosition + \\\"'\\\");\\n          }\\n        }\\n        _this._back($menu);\\n      });\\n\\n      this.$submenus.addClass('invisible');\\n      if (!this.options.autoHeight) {\\n        this.$submenus.addClass('drilldown-submenu-cover-previous');\\n      }\\n\\n      // create a wrapper on element if it doesn't exist.\\n      if (!this.$element.parent().hasClass('is-drilldown')) {\\n        this.$wrapper = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.wrapper).addClass('is-drilldown');\\n        if (this.options.animateHeight) this.$wrapper.addClass('animate-height');\\n        this.$element.wrap(this.$wrapper);\\n      }\\n      // set wrapper\\n      this.$wrapper = this.$element.parent();\\n      this.$wrapper.css(this._getMaxDims());\\n    }\\n  }, {\\n    key: '_resize',\\n    value: function _resize() {\\n      this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });\\n      // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths\\n      this.$wrapper.css(this._getMaxDims());\\n    }\\n\\n    /**\\n     * Adds event handlers to elements in the menu.\\n     * @function\\n     * @private\\n     * @param {jQuery} $elem - the current menu item to add handlers to.\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events($elem) {\\n      var _this = this;\\n\\n      $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\\n        if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {\\n          e.stopImmediatePropagation();\\n          e.preventDefault();\\n        }\\n\\n        // if(e.target !== e.currentTarget.firstElementChild){\\n        //   return false;\\n        // }\\n        _this._show($elem.parent('li'));\\n\\n        if (_this.options.closeOnClick) {\\n          var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');\\n          $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {\\n            if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target)) {\\n              return;\\n            }\\n            e.preventDefault();\\n            _this._hideAll();\\n            $body.off('.zf.drilldown');\\n          });\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Adds event handlers to the menu element.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_registerEvents',\\n    value: function _registerEvents() {\\n      if (this.options.scrollTop) {\\n        this._bindHandler = this._scrollTop.bind(this);\\n        this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);\\n      }\\n      this.$element.on('mutateme.zf.trigger', this._resize.bind(this));\\n    }\\n\\n    /**\\n     * Scroll to Top of Element or data-scroll-top-element\\n     * @function\\n     * @fires Drilldown#scrollme\\n     */\\n\\n  }, {\\n    key: '_scrollTop',\\n    value: function _scrollTop() {\\n      var _this = this;\\n      var $scrollTopElement = _this.options.scrollTopElement != '' ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(_this.options.scrollTopElement) : _this.$element,\\n          scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {\\n        /**\\n          * Fires after the menu has scrolled\\n          * @event Drilldown#scrollme\\n          */\\n        if (this === __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');\\n      });\\n    }\\n\\n    /**\\n     * Adds keydown event listener to `li`'s in the menu.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_keyboardEvents',\\n    value: function _keyboardEvents() {\\n      var _this = this;\\n\\n      this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {\\n        var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $elements = $element.parent('li').parent('ul').children('li').children('a'),\\n            $prevElement,\\n            $nextElement;\\n\\n        $elements.each(function (i) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {\\n            $prevElement = $elements.eq(Math.max(0, i - 1));\\n            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\\n            return;\\n          }\\n        });\\n\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Drilldown', {\\n          next: function () {\\n            if ($element.is(_this.$submenuAnchors)) {\\n              _this._show($element.parent('li'));\\n              $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($element), function () {\\n                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\\n              });\\n              return true;\\n            }\\n          },\\n          previous: function () {\\n            _this._hide($element.parent('li').parent('ul'));\\n            $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($element), function () {\\n              setTimeout(function () {\\n                $element.parent('li').parent('ul').parent('li').children('a').first().focus();\\n              }, 1);\\n            });\\n            return true;\\n          },\\n          up: function () {\\n            $prevElement.focus();\\n            // Don't tap focus on first element in root ul\\n            return !$element.is(_this.$element.find('> li:first-child > a'));\\n          },\\n          down: function () {\\n            $nextElement.focus();\\n            // Don't tap focus on last element in root ul\\n            return !$element.is(_this.$element.find('> li:last-child > a'));\\n          },\\n          close: function () {\\n            // Don't close on element in root ul\\n            if (!$element.is(_this.$element.find('> li > a'))) {\\n              _this._hide($element.parent().parent());\\n              $element.parent().parent().siblings('a').focus();\\n            }\\n          },\\n          open: function () {\\n            if (!$element.is(_this.$menuItems)) {\\n              // not menu item means back button\\n              _this._hide($element.parent('li').parent('ul'));\\n              $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($element), function () {\\n                setTimeout(function () {\\n                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();\\n                }, 1);\\n              });\\n              return true;\\n            } else if ($element.is(_this.$submenuAnchors)) {\\n              _this._show($element.parent('li'));\\n              $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($element), function () {\\n                $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\\n              });\\n              return true;\\n            }\\n          },\\n          handled: function (preventDefault) {\\n            if (preventDefault) {\\n              e.preventDefault();\\n            }\\n            e.stopImmediatePropagation();\\n          }\\n        });\\n      }); // end keyboardAccess\\n    }\\n\\n    /**\\n     * Closes all open elements, and returns to root menu.\\n     * @function\\n     * @fires Drilldown#closed\\n     */\\n\\n  }, {\\n    key: '_hideAll',\\n    value: function _hideAll() {\\n      var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');\\n      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\\n      $elem.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($elem), function (e) {\\n        $elem.removeClass('is-active is-closing');\\n      });\\n      /**\\n       * Fires when the menu is fully closed.\\n       * @event Drilldown#closed\\n       */\\n      this.$element.trigger('closed.zf.drilldown');\\n    }\\n\\n    /**\\n     * Adds event listener for each `back` button, and closes open menus.\\n     * @function\\n     * @fires Drilldown#back\\n     * @param {jQuery} $elem - the current sub-menu to add `back` event.\\n     */\\n\\n  }, {\\n    key: '_back',\\n    value: function _back($elem) {\\n      var _this = this;\\n      $elem.off('click.zf.drilldown');\\n      $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {\\n        e.stopImmediatePropagation();\\n        // console.log('mouseup on back');\\n        _this._hide($elem);\\n\\n        // If there is a parent submenu, call show\\n        var parentSubMenu = $elem.parent('li').parent('ul').parent('li');\\n        if (parentSubMenu.length) {\\n          _this._show(parentSubMenu);\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Adds event listener to menu items w/o submenus to close open menus on click.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_menuLinkEvents',\\n    value: function _menuLinkEvents() {\\n      var _this = this;\\n      this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\\n        // e.stopImmediatePropagation();\\n        setTimeout(function () {\\n          _this._hideAll();\\n        }, 0);\\n      });\\n    }\\n\\n    /**\\n     * Opens a submenu.\\n     * @function\\n     * @fires Drilldown#open\\n     * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\\n     */\\n\\n  }, {\\n    key: '_show',\\n    value: function _show($elem) {\\n      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });\\n      $elem.attr('aria-expanded', true);\\n      $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);\\n      /**\\n       * Fires when the submenu has opened.\\n       * @event Drilldown#open\\n       */\\n      this.$element.trigger('open.zf.drilldown', [$elem]);\\n    }\\n  }, {\\n    key: '_hide',\\n\\n\\n    /**\\n     * Hides a submenu\\n     * @function\\n     * @fires Drilldown#hide\\n     * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\\n     */\\n    value: function _hide($elem) {\\n      if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\\n      var _this = this;\\n      $elem.parent('li').attr('aria-expanded', false);\\n      $elem.attr('aria-hidden', true).addClass('is-closing');\\n      $elem.addClass('is-closing').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])($elem), function () {\\n        $elem.removeClass('is-active is-closing');\\n        $elem.blur().addClass('invisible');\\n      });\\n      /**\\n       * Fires when the submenu has closed.\\n       * @event Drilldown#hide\\n       */\\n      $elem.trigger('hide.zf.drilldown', [$elem]);\\n    }\\n\\n    /**\\n     * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\\n     * Prevents content jumping.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_getMaxDims',\\n    value: function _getMaxDims() {\\n      var maxHeight = 0,\\n          result = {},\\n          _this = this;\\n      this.$submenus.add(this.$element).each(function () {\\n        var numOfElems = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('li').length;\\n        var height = __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__[\\\"a\\\" /* Box */].GetDimensions(this).height;\\n        maxHeight = height > maxHeight ? height : maxHeight;\\n        if (_this.options.autoHeight) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('calcHeight', height);\\n          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass('is-drilldown-submenu')) result['height'] = height;\\n        }\\n      });\\n\\n      if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';\\n\\n      result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';\\n\\n      return result;\\n    }\\n\\n    /**\\n     * Destroys the Drilldown Menu\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);\\n      this._hideAll();\\n      this.$element.off('mutateme.zf.trigger');\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Burn(this.$element, 'drilldown');\\n      this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');\\n      this.$submenuAnchors.each(function () {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off('.zf.drilldown');\\n      });\\n\\n      this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');\\n\\n      this.$element.find('a').each(function () {\\n        var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);\\n        $link.removeAttr('tabindex');\\n        if ($link.data('savedHref')) {\\n          $link.attr('href', $link.data('savedHref')).removeData('savedHref');\\n        } else {\\n          return;\\n        }\\n      });\\n    }\\n  }]);\\n\\n  return Drilldown;\\n}(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nDrilldown.defaults = {\\n  /**\\n   * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are\\n   * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.\\n   * @option\\n   * @type {boolian}\\n   * @default true\\n   */\\n  autoApplyClass: true,\\n  /**\\n   * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\\\`) if copy and pasting.\\n   * @option\\n   * @type {string}\\n   * @default '<li class=\\\"js-drilldown-back\\\"><a tabindex=\\\"0\\\">Back</a></li>'\\n   */\\n  backButton: '<li class=\\\"js-drilldown-back\\\"><a tabindex=\\\"0\\\">Back</a></li>',\\n  /**\\n   * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.\\n   * @option\\n   * @type {string}\\n   * @default top\\n   */\\n  backButtonPosition: 'top',\\n  /**\\n   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\\\`) if copy and pasting.\\n   * @option\\n   * @type {string}\\n   * @default '<div></div>'\\n   */\\n  wrapper: '<div></div>',\\n  /**\\n   * Adds the parent link to the submenu.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  parentLink: false,\\n  /**\\n   * Allow the menu to return to root list on body click.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  closeOnClick: false,\\n  /**\\n   * Allow the menu to auto adjust height.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  autoHeight: false,\\n  /**\\n   * Animate the auto adjust height.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  animateHeight: false,\\n  /**\\n   * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  scrollTop: false,\\n  /**\\n   * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  scrollTopElement: '',\\n  /**\\n   * ScrollTop offset\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  scrollTopOffset: 0,\\n  /**\\n   * Scroll animation duration\\n   * @option\\n   * @type {number}\\n   * @default 500\\n   */\\n  animationDuration: 500,\\n  /**\\n   * Scroll animation easing. Can be `'swing'` or `'linear'`.\\n   * @option\\n   * @type {string}\\n   * @see {@link https://api.jquery.com/animate|JQuery animate}\\n   * @default 'swing'\\n   */\\n  animationEasing: 'swing'\\n  // holdOpen: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 14 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return DropdownMenu; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__ = __webpack_require__(7);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * DropdownMenu module.\\n * @module foundation.dropdown-menu\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.box\\n * @requires foundation.util.nest\\n */\\n\\nvar DropdownMenu = function (_Plugin) {\\n  _inherits(DropdownMenu, _Plugin);\\n\\n  function DropdownMenu() {\\n    _classCallCheck(this, DropdownMenu);\\n\\n    return _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).apply(this, arguments));\\n  }\\n\\n  _createClass(DropdownMenu, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of DropdownMenu.\\n     * @class\\n     * @name DropdownMenu\\n     * @fires DropdownMenu#init\\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, DropdownMenu.defaults, this.$element.data(), options);\\n      this.className = 'DropdownMenu'; // ie9 back compat\\n\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Feather(this.$element, 'dropdown');\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('DropdownMenu', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'up',\\n        'ARROW_DOWN': 'down',\\n        'ARROW_LEFT': 'previous',\\n        'ESCAPE': 'close'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the plugin, and calls _prepareMenu\\n     * @private\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var subs = this.$element.find('li.is-dropdown-submenu-parent');\\n      this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');\\n\\n      this.$menuItems = this.$element.find('[role=\\\"menuitem\\\"]');\\n      this.$tabs = this.$element.children('[role=\\\"menuitem\\\"]');\\n      this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);\\n\\n      if (this.options.alignment === 'auto') {\\n        if (this.$element.hasClass(this.options.rightClass) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__[\\\"a\\\" /* rtl */])() || this.$element.parents('.top-bar-right').is('*')) {\\n          this.options.alignment = 'right';\\n          subs.addClass('opens-left');\\n        } else {\\n          this.options.alignment = 'left';\\n          subs.addClass('opens-right');\\n        }\\n      } else {\\n        if (this.options.alignment === 'right') {\\n          subs.addClass('opens-left');\\n        } else {\\n          subs.addClass('opens-right');\\n        }\\n      }\\n      this.changed = false;\\n      this._events();\\n    }\\n  }, {\\n    key: '_isVertical',\\n    value: function _isVertical() {\\n      return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';\\n    }\\n  }, {\\n    key: '_isRtl',\\n    value: function _isRtl() {\\n      return this.$element.hasClass('align-right') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__[\\\"a\\\" /* rtl */])() && !this.$element.hasClass('align-left');\\n    }\\n\\n    /**\\n     * Adds event listeners to elements within the menu\\n     * @private\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this,\\n          hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',\\n          parClass = 'is-dropdown-submenu-parent';\\n\\n      // used for onClick and in the keyboard handlers\\n      var handleClickFn = function (e) {\\n        var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '.' + parClass),\\n            hasSub = $elem.hasClass(parClass),\\n            hasClicked = $elem.attr('data-is-click') === 'true',\\n            $sub = $elem.children('.is-dropdown-submenu');\\n\\n        if (hasSub) {\\n          if (hasClicked) {\\n            if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {\\n              return;\\n            } else {\\n              e.stopImmediatePropagation();\\n              e.preventDefault();\\n              _this._hide($elem);\\n            }\\n          } else {\\n            e.preventDefault();\\n            e.stopImmediatePropagation();\\n            _this._show($sub);\\n            $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);\\n          }\\n        }\\n      };\\n\\n      if (this.options.clickOpen || hasTouch) {\\n        this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);\\n      }\\n\\n      // Handle Leaf element Clicks\\n      if (_this.options.closeOnClickInside) {\\n        this.$menuItems.on('click.zf.dropdownmenu', function (e) {\\n          var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n              hasSub = $elem.hasClass(parClass);\\n          if (!hasSub) {\\n            _this._hide();\\n          }\\n        });\\n      }\\n\\n      if (!this.options.disableHover) {\\n        this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {\\n          var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n              hasSub = $elem.hasClass(parClass);\\n\\n          if (hasSub) {\\n            clearTimeout($elem.data('_delay'));\\n            $elem.data('_delay', setTimeout(function () {\\n              _this._show($elem.children('.is-dropdown-submenu'));\\n            }, _this.options.hoverDelay));\\n          }\\n        }).on('mouseleave.zf.dropdownmenu', function (e) {\\n          var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n              hasSub = $elem.hasClass(parClass);\\n          if (hasSub && _this.options.autoclose) {\\n            if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {\\n              return false;\\n            }\\n\\n            clearTimeout($elem.data('_delay'));\\n            $elem.data('_delay', setTimeout(function () {\\n              _this._hide($elem);\\n            }, _this.options.closingTime));\\n          }\\n        });\\n      }\\n      this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {\\n        var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '[role=\\\"menuitem\\\"]'),\\n            isTab = _this.$tabs.index($element) > -1,\\n            $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),\\n            $prevElement,\\n            $nextElement;\\n\\n        $elements.each(function (i) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {\\n            $prevElement = $elements.eq(i - 1);\\n            $nextElement = $elements.eq(i + 1);\\n            return;\\n          }\\n        });\\n\\n        var nextSibling = function () {\\n          if (!$element.is(':last-child')) {\\n            $nextElement.children('a:first').focus();\\n            e.preventDefault();\\n          }\\n        },\\n            prevSibling = function () {\\n          $prevElement.children('a:first').focus();\\n          e.preventDefault();\\n        },\\n            openSub = function () {\\n          var $sub = $element.children('ul.is-dropdown-submenu');\\n          if ($sub.length) {\\n            _this._show($sub);\\n            $element.find('li > a:first').focus();\\n            e.preventDefault();\\n          } else {\\n            return;\\n          }\\n        },\\n            closeSub = function () {\\n          //if ($element.is(':first-child')) {\\n          var close = $element.parent('ul').parent('li');\\n          close.children('a:first').focus();\\n          _this._hide(close);\\n          e.preventDefault();\\n          //}\\n        };\\n        var functions = {\\n          open: openSub,\\n          close: function () {\\n            _this._hide(_this.$element);\\n            _this.$menuItems.eq(0).children('a').focus(); // focus to first element\\n            e.preventDefault();\\n          },\\n          handled: function () {\\n            e.stopImmediatePropagation();\\n          }\\n        };\\n\\n        if (isTab) {\\n          if (_this._isVertical()) {\\n            // vertical menu\\n            if (_this._isRtl()) {\\n              // right aligned\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n                down: nextSibling,\\n                up: prevSibling,\\n                next: closeSub,\\n                previous: openSub\\n              });\\n            } else {\\n              // left aligned\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n                down: nextSibling,\\n                up: prevSibling,\\n                next: openSub,\\n                previous: closeSub\\n              });\\n            }\\n          } else {\\n            // horizontal menu\\n            if (_this._isRtl()) {\\n              // right aligned\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n                next: prevSibling,\\n                previous: nextSibling,\\n                down: openSub,\\n                up: closeSub\\n              });\\n            } else {\\n              // left aligned\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n                next: nextSibling,\\n                previous: prevSibling,\\n                down: openSub,\\n                up: closeSub\\n              });\\n            }\\n          }\\n        } else {\\n          // not tabs -> one sub\\n          if (_this._isRtl()) {\\n            // right aligned\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n              next: closeSub,\\n              previous: openSub,\\n              down: nextSibling,\\n              up: prevSibling\\n            });\\n          } else {\\n            // left aligned\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {\\n              next: openSub,\\n              previous: closeSub,\\n              down: nextSibling,\\n              up: prevSibling\\n            });\\n          }\\n        }\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'DropdownMenu', functions);\\n      });\\n    }\\n\\n    /**\\n     * Adds an event handler to the body to close any dropdowns on a click.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addBodyHandler',\\n    value: function _addBodyHandler() {\\n      var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body),\\n          _this = this;\\n      $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\\n        var $link = _this.$element.find(e.target);\\n        if ($link.length) {\\n          return;\\n        }\\n\\n        _this._hide();\\n        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');\\n      });\\n    }\\n\\n    /**\\n     * Opens a dropdown pane, and checks for collisions first.\\n     * @param {jQuery} $sub - ul element that is a submenu to show\\n     * @function\\n     * @private\\n     * @fires DropdownMenu#show\\n     */\\n\\n  }, {\\n    key: '_show',\\n    value: function _show($sub) {\\n      var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {\\n        return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).find($sub).length > 0;\\n      }));\\n      var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');\\n      this._hide($sibs, idx);\\n      $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');\\n      var clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__[\\\"a\\\" /* Box */].ImNotTouchingYou($sub, null, true);\\n      if (!clear) {\\n        var oldClass = this.options.alignment === 'left' ? '-right' : '-left',\\n            $parentLi = $sub.parent('.is-dropdown-submenu-parent');\\n        $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);\\n        clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__[\\\"a\\\" /* Box */].ImNotTouchingYou($sub, null, true);\\n        if (!clear) {\\n          $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');\\n        }\\n        this.changed = true;\\n      }\\n      $sub.css('visibility', '');\\n      if (this.options.closeOnClick) {\\n        this._addBodyHandler();\\n      }\\n      /**\\n       * Fires when the new dropdown pane is visible.\\n       * @event DropdownMenu#show\\n       */\\n      this.$element.trigger('show.zf.dropdownmenu', [$sub]);\\n    }\\n\\n    /**\\n     * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\\n     * @function\\n     * @param {jQuery} $elem - element with a submenu to hide\\n     * @param {Number} idx - index of the $tabs collection to hide\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_hide',\\n    value: function _hide($elem, idx) {\\n      var $toClose;\\n      if ($elem && $elem.length) {\\n        $toClose = $elem;\\n      } else if (idx !== undefined) {\\n        $toClose = this.$tabs.not(function (i, el) {\\n          return i === idx;\\n        });\\n      } else {\\n        $toClose = this.$element;\\n      }\\n      var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;\\n\\n      if (somethingToClose) {\\n        $toClose.find('li.is-active').add($toClose).attr({\\n          'data-is-click': false\\n        }).removeClass('is-active');\\n\\n        $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');\\n\\n        if (this.changed || $toClose.find('opens-inner').length) {\\n          var oldClass = this.options.alignment === 'left' ? 'right' : 'left';\\n          $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);\\n          this.changed = false;\\n        }\\n        /**\\n         * Fires when the open menus are closed.\\n         * @event DropdownMenu#hide\\n         */\\n        this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);\\n      }\\n    }\\n\\n    /**\\n     * Destroys the plugin.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('.zf.dropdownmenu');\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__[\\\"a\\\" /* Nest */].Burn(this.$element, 'dropdown');\\n    }\\n  }]);\\n\\n  return DropdownMenu;\\n}(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin\\n */\\n\\n\\nDropdownMenu.defaults = {\\n  /**\\n   * Disallows hover events from opening submenus\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  disableHover: false,\\n  /**\\n   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  autoclose: true,\\n  /**\\n   * Amount of time to delay opening a submenu on hover event.\\n   * @option\\n   * @type {number}\\n   * @default 50\\n   */\\n  hoverDelay: 50,\\n  /**\\n   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  clickOpen: false,\\n  /**\\n   * Amount of time to delay closing a submenu on a mouseleave event.\\n   * @option\\n   * @type {number}\\n   * @default 500\\n   */\\n\\n  closingTime: 500,\\n  /**\\n   * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  alignment: 'auto',\\n  /**\\n   * Allow clicks on the body to close any open submenus.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  closeOnClick: true,\\n  /**\\n   * Allow clicks on leaf anchor links to close any open submenus.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  closeOnClickInside: true,\\n  /**\\n   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\\n   * @option\\n   * @type {string}\\n   * @default 'vertical'\\n   */\\n  verticalClass: 'vertical',\\n  /**\\n   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\\n   * @option\\n   * @type {string}\\n   * @default 'align-right'\\n   */\\n  rightClass: 'align-right',\\n  /**\\n   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  forceFollow: true\\n};\\n\\n\\n\\n/***/ }),\\n/* 15 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Positionable; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__ = __webpack_require__(7);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\nvar POSITIONS = ['left', 'right', 'top', 'bottom'];\\nvar VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];\\nvar HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];\\n\\nvar ALIGNMENTS = {\\n  'left': VERTICAL_ALIGNMENTS,\\n  'right': VERTICAL_ALIGNMENTS,\\n  'top': HORIZONTAL_ALIGNMENTS,\\n  'bottom': HORIZONTAL_ALIGNMENTS\\n};\\n\\nfunction nextItem(item, array) {\\n  var currentIdx = array.indexOf(item);\\n  if (currentIdx === array.length - 1) {\\n    return array[0];\\n  } else {\\n    return array[currentIdx + 1];\\n  }\\n}\\n\\nvar Positionable = function (_Plugin) {\\n  _inherits(Positionable, _Plugin);\\n\\n  function Positionable() {\\n    _classCallCheck(this, Positionable);\\n\\n    return _possibleConstructorReturn(this, (Positionable.__proto__ || Object.getPrototypeOf(Positionable)).apply(this, arguments));\\n  }\\n\\n  _createClass(Positionable, [{\\n    key: '_init',\\n\\n    /**\\n     * Abstract class encapsulating the tether-like explicit positioning logic\\n     * including repositioning based on overlap.\\n     * Expects classes to define defaults for vOffset, hOffset, position,\\n     * alignment, allowOverlap, and allowBottomOverlap. They can do this by\\n     * extending the defaults, or (for now recommended due to the way docs are\\n     * generated) by explicitly declaring them.\\n     *\\n     **/\\n\\n    value: function _init() {\\n      this.triedPositions = {};\\n      this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;\\n      this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;\\n    }\\n  }, {\\n    key: '_getDefaultPosition',\\n    value: function _getDefaultPosition() {\\n      return 'bottom';\\n    }\\n  }, {\\n    key: '_getDefaultAlignment',\\n    value: function _getDefaultAlignment() {\\n      switch (this.position) {\\n        case 'bottom':\\n        case 'top':\\n          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"a\\\" /* rtl */])() ? 'right' : 'left';\\n        case 'left':\\n        case 'right':\\n          return 'bottom';\\n      }\\n    }\\n\\n    /**\\n     * Adjusts the positionable possible positions by iterating through alignments\\n     * and positions.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_reposition',\\n    value: function _reposition() {\\n      if (this._alignmentsExhausted(this.position)) {\\n        this.position = nextItem(this.position, POSITIONS);\\n        this.alignment = ALIGNMENTS[this.position][0];\\n      } else {\\n        this._realign();\\n      }\\n    }\\n\\n    /**\\n     * Adjusts the dropdown pane possible positions by iterating through alignments\\n     * on the current position.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_realign',\\n    value: function _realign() {\\n      this._addTriedPosition(this.position, this.alignment);\\n      this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);\\n    }\\n  }, {\\n    key: '_addTriedPosition',\\n    value: function _addTriedPosition(position, alignment) {\\n      this.triedPositions[position] = this.triedPositions[position] || [];\\n      this.triedPositions[position].push(alignment);\\n    }\\n  }, {\\n    key: '_positionsExhausted',\\n    value: function _positionsExhausted() {\\n      var isExhausted = true;\\n      for (var i = 0; i < POSITIONS.length; i++) {\\n        isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);\\n      }\\n      return isExhausted;\\n    }\\n  }, {\\n    key: '_alignmentsExhausted',\\n    value: function _alignmentsExhausted(position) {\\n      return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;\\n    }\\n\\n    // When we're trying to center, we don't want to apply offset that's going to\\n    // take us just off center, so wrap around to return 0 for the appropriate\\n    // offset in those alignments.  TODO: Figure out if we want to make this\\n    // configurable behavior... it feels more intuitive, especially for tooltips, but\\n    // it's possible someone might actually want to start from center and then nudge\\n    // slightly off.\\n\\n  }, {\\n    key: '_getVOffset',\\n    value: function _getVOffset() {\\n      return this.options.vOffset;\\n    }\\n  }, {\\n    key: '_getHOffset',\\n    value: function _getHOffset() {\\n      return this.options.hOffset;\\n    }\\n  }, {\\n    key: '_setPosition',\\n    value: function _setPosition($anchor, $element, $parent) {\\n      if ($anchor.attr('aria-expanded') === 'false') {\\n        return false;\\n      }\\n      var $eleDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].GetDimensions($element),\\n          $anchorDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].GetDimensions($anchor);\\n\\n      $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\\n\\n      if (!this.options.allowOverlap) {\\n        var overlaps = {};\\n        var minOverlap = 100000000;\\n        // default coordinates to how we start, in case we can't figure out better\\n        var minCoordinates = { position: this.position, alignment: this.alignment };\\n        while (!this._positionsExhausted()) {\\n          var overlap = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);\\n          if (overlap === 0) {\\n            return;\\n          }\\n\\n          if (overlap < minOverlap) {\\n            minOverlap = overlap;\\n            minCoordinates = { position: this.position, alignment: this.alignment };\\n          }\\n\\n          this._reposition();\\n\\n          $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\\n        }\\n        // If we get through the entire loop, there was no non-overlapping\\n        // position available. Pick the version with least overlap.\\n        this.position = minCoordinates.position;\\n        this.alignment = minCoordinates.alignment;\\n        $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__[\\\"a\\\" /* Box */].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\\n      }\\n    }\\n  }]);\\n\\n  return Positionable;\\n}(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nPositionable.defaults = {\\n  /**\\n   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  position: 'auto',\\n  /**\\n   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  alignment: 'auto',\\n  /**\\n   * Allow overlap of container/window. If false, dropdown positionable first\\n   * try to position as defined by data-position and data-alignment, but\\n   * reposition if it would cause an overflow.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  allowOverlap: false,\\n  /**\\n   * Allow overlap of only the bottom of the container. This is the most common\\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\\n   * screen but not otherwise influence or break out of the container.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  allowBottomOverlap: true,\\n  /**\\n   * Number of pixels the positionable should be separated vertically from anchor\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  vOffset: 0,\\n  /**\\n   * Number of pixels the positionable should be separated horizontally from anchor\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  hOffset: 0\\n};\\n\\n\\n\\n/***/ }),\\n/* 16 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return SmoothScroll; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n/**\\n * SmoothScroll module.\\n * @module foundation.smooth-scroll\\n */\\n\\nvar SmoothScroll = function (_Plugin) {\\n    _inherits(SmoothScroll, _Plugin);\\n\\n    function SmoothScroll() {\\n        _classCallCheck(this, SmoothScroll);\\n\\n        return _possibleConstructorReturn(this, (SmoothScroll.__proto__ || Object.getPrototypeOf(SmoothScroll)).apply(this, arguments));\\n    }\\n\\n    _createClass(SmoothScroll, [{\\n        key: '_setup',\\n\\n        /**\\n         * Creates a new instance of SmoothScroll.\\n         * @class\\n         * @name SmoothScroll\\n         * @fires SmoothScroll#init\\n         * @param {Object} element - jQuery object to add the trigger to.\\n         * @param {Object} options - Overrides to the default plugin settings.\\n         */\\n        value: function _setup(element, options) {\\n            this.$element = element;\\n            this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, SmoothScroll.defaults, this.$element.data(), options);\\n            this.className = 'SmoothScroll'; // ie9 back compat\\n\\n            this._init();\\n        }\\n\\n        /**\\n         * Initialize the SmoothScroll plugin\\n         * @private\\n         */\\n\\n    }, {\\n        key: '_init',\\n        value: function _init() {\\n            var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'smooth-scroll');\\n            var _this = this;\\n            this.$element.attr({\\n                'id': id\\n            });\\n\\n            this._events();\\n        }\\n\\n        /**\\n         * Initializes events for SmoothScroll.\\n         * @private\\n         */\\n\\n    }, {\\n        key: '_events',\\n        value: function _events() {\\n            var _this = this;\\n\\n            // click handler function.\\n            var handleLinkClick = function (e) {\\n                // exit function if the event source isn't coming from an anchor with href attribute starts with '#'\\n                if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is('a[href^=\\\"#\\\"]')) {\\n                    return false;\\n                }\\n\\n                var arrival = this.getAttribute('href');\\n\\n                _this._inTransition = true;\\n\\n                SmoothScroll.scrollToLoc(arrival, _this.options, function () {\\n                    _this._inTransition = false;\\n                });\\n\\n                e.preventDefault();\\n            };\\n\\n            this.$element.on('click.zf.smoothScroll', handleLinkClick);\\n            this.$element.on('click.zf.smoothScroll', 'a[href^=\\\"#\\\"]', handleLinkClick);\\n        }\\n\\n        /**\\n         * Function to scroll to a given location on the page.\\n         * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'\\n         * @param {Object} options - The options to use.\\n         * @param {Function} callback - The callback function.\\n         * @static\\n         * @function\\n         */\\n\\n    }], [{\\n        key: 'scrollToLoc',\\n        value: function scrollToLoc(loc) {\\n            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;\\n            var callback = arguments[2];\\n\\n            // Do nothing if target does not exist to prevent errors\\n            if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).length) {\\n                return false;\\n            }\\n\\n            var scrollPos = Math.round(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).offset().top - options.threshold / 2 - options.offset);\\n\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({ scrollTop: scrollPos }, options.animationDuration, options.animationEasing, function () {\\n                if (callback && typeof callback == \\\"function\\\") {\\n                    callback();\\n                }\\n            });\\n        }\\n    }]);\\n\\n    return SmoothScroll;\\n}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin.\\n */\\n\\n\\nSmoothScroll.defaults = {\\n    /**\\n     * Amount of time, in ms, the animated scrolling should take between locations.\\n     * @option\\n     * @type {number}\\n     * @default 500\\n     */\\n    animationDuration: 500,\\n    /**\\n     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.\\n     * @option\\n     * @type {string}\\n     * @default 'linear'\\n     * @see {@link https://api.jquery.com/animate|Jquery animate}\\n     */\\n    animationEasing: 'linear',\\n    /**\\n     * Number of pixels to use as a marker for location changes.\\n     * @option\\n     * @type {number}\\n     * @default 50\\n     */\\n    threshold: 50,\\n    /**\\n     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\\n     * @option\\n     * @type {number}\\n     * @default 0\\n     */\\n    offset: 0\\n};\\n\\n\\n\\n/***/ }),\\n/* 17 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Tabs; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(8);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n/**\\n * Tabs module.\\n * @module foundation.tabs\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.imageLoader if tabs contain images\\n */\\n\\nvar Tabs = function (_Plugin) {\\n  _inherits(Tabs, _Plugin);\\n\\n  function Tabs() {\\n    _classCallCheck(this, Tabs);\\n\\n    return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));\\n  }\\n\\n  _createClass(Tabs, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of tabs.\\n     * @class\\n     * @name Tabs\\n     * @fires Tabs#init\\n     * @param {jQuery} element - jQuery object to make into tabs.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tabs.defaults, this.$element.data(), options);\\n      this.className = 'Tabs'; // ie9 back compat\\n\\n      this._init();\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Tabs', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ARROW_RIGHT': 'next',\\n        'ARROW_UP': 'previous',\\n        'ARROW_DOWN': 'next',\\n        'ARROW_LEFT': 'previous'\\n        // 'TAB': 'next',\\n        // 'SHIFT_TAB': 'previous'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var _this3 = this;\\n\\n      var _this = this;\\n\\n      this.$element.attr({ 'role': 'tablist' });\\n      this.$tabTitles = this.$element.find('.' + this.options.linkClass);\\n      this.$tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=\\\"' + this.$element[0].id + '\\\"]');\\n\\n      this.$tabTitles.each(function () {\\n        var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $link = $elem.find('a'),\\n            isActive = $elem.hasClass('' + _this.options.linkActiveClass),\\n            hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),\\n            linkId = $link[0].id ? $link[0].id : hash + '-label',\\n            $tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + hash);\\n\\n        $elem.attr({ 'role': 'presentation' });\\n\\n        $link.attr({\\n          'role': 'tab',\\n          'aria-controls': hash,\\n          'aria-selected': isActive,\\n          'id': linkId,\\n          'tabindex': isActive ? '0' : '-1'\\n        });\\n\\n        $tabContent.attr({\\n          'role': 'tabpanel',\\n          'aria-labelledby': linkId\\n        });\\n\\n        if (!isActive) {\\n          $tabContent.attr('aria-hidden', 'true');\\n        }\\n\\n        if (isActive && _this.options.autoFocus) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {\\n              $link.focus();\\n            });\\n          });\\n        }\\n      });\\n      if (this.options.matchHeight) {\\n        var $images = this.$tabContent.find('img');\\n\\n        if ($images.length) {\\n          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__[\\\"a\\\" /* onImagesLoaded */])($images, this._setHeight.bind(this));\\n        } else {\\n          this._setHeight();\\n        }\\n      }\\n\\n      //current context-bound function to open tabs on page load or history popstate\\n      this._checkDeepLink = function () {\\n        var anchor = window.location.hash;\\n        //need a hash and a relevant anchor in this tabset\\n        if (anchor.length) {\\n          var $link = _this3.$element.find('[href$=\\\"' + anchor + '\\\"]');\\n          if ($link.length) {\\n            _this3.selectTab(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor), true);\\n\\n            //roll up a little to show the titles\\n            if (_this3.options.deepLinkSmudge) {\\n              var offset = _this3.$element.offset();\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: offset.top }, _this3.options.deepLinkSmudgeDelay);\\n            }\\n\\n            /**\\n              * Fires when the zplugin has deeplinked at pageload\\n              * @event Tabs#deeplink\\n              */\\n            _this3.$element.trigger('deeplink.zf.tabs', [$link, __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor)]);\\n          }\\n        }\\n      };\\n\\n      //use browser to open a tab, if it exists in this tabset\\n      if (this.options.deepLink) {\\n        this._checkDeepLink();\\n      }\\n\\n      this._events();\\n    }\\n\\n    /**\\n     * Adds event handlers for items within the tabs.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      this._addKeyHandler();\\n      this._addClickHandler();\\n      this._setHeightMqHandler = null;\\n\\n      if (this.options.matchHeight) {\\n        this._setHeightMqHandler = this._setHeight.bind(this);\\n\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._setHeightMqHandler);\\n      }\\n\\n      if (this.options.deepLink) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);\\n      }\\n    }\\n\\n    /**\\n     * Adds click handlers for items within the tabs.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addClickHandler',\\n    value: function _addClickHandler() {\\n      var _this = this;\\n\\n      this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {\\n        e.preventDefault();\\n        e.stopPropagation();\\n        _this._handleTabChange(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));\\n      });\\n    }\\n\\n    /**\\n     * Adds keyboard event handlers for items within the tabs.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addKeyHandler',\\n    value: function _addKeyHandler() {\\n      var _this = this;\\n\\n      this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {\\n        if (e.which === 9) return;\\n\\n        var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            $elements = $element.parent('ul').children('li'),\\n            $prevElement,\\n            $nextElement;\\n\\n        $elements.each(function (i) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {\\n            if (_this.options.wrapOnKeys) {\\n              $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);\\n              $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);\\n            } else {\\n              $prevElement = $elements.eq(Math.max(0, i - 1));\\n              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\\n            }\\n            return;\\n          }\\n        });\\n\\n        // handle keyboard event with keyboard util\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Tabs', {\\n          open: function () {\\n            $element.find('[role=\\\"tab\\\"]').focus();\\n            _this._handleTabChange($element);\\n          },\\n          previous: function () {\\n            $prevElement.find('[role=\\\"tab\\\"]').focus();\\n            _this._handleTabChange($prevElement);\\n          },\\n          next: function () {\\n            $nextElement.find('[role=\\\"tab\\\"]').focus();\\n            _this._handleTabChange($nextElement);\\n          },\\n          handled: function () {\\n            e.stopPropagation();\\n            e.preventDefault();\\n          }\\n        });\\n      });\\n    }\\n\\n    /**\\n     * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.\\n     * @param {jQuery} $target - Tab to open.\\n     * @param {boolean} historyHandled - browser has already handled a history update\\n     * @fires Tabs#change\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_handleTabChange',\\n    value: function _handleTabChange($target, historyHandled) {\\n\\n      /**\\n       * Check for active class on target. Collapse if exists.\\n       */\\n      if ($target.hasClass('' + this.options.linkActiveClass)) {\\n        if (this.options.activeCollapse) {\\n          this._collapseTab($target);\\n\\n          /**\\n           * Fires when the zplugin has successfully collapsed tabs.\\n           * @event Tabs#collapse\\n           */\\n          this.$element.trigger('collapse.zf.tabs', [$target]);\\n        }\\n        return;\\n      }\\n\\n      var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),\\n          $tabLink = $target.find('[role=\\\"tab\\\"]'),\\n          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),\\n          $targetContent = this.$tabContent.find('#' + hash);\\n\\n      //close old tab\\n      this._collapseTab($oldTab);\\n\\n      //open new tab\\n      this._openTab($target);\\n\\n      //either replace or update browser history\\n      if (this.options.deepLink && !historyHandled) {\\n        var anchor = $target.find('a').attr('href');\\n\\n        if (this.options.updateHistory) {\\n          history.pushState({}, '', anchor);\\n        } else {\\n          history.replaceState({}, '', anchor);\\n        }\\n      }\\n\\n      /**\\n       * Fires when the plugin has successfully changed tabs.\\n       * @event Tabs#change\\n       */\\n      this.$element.trigger('change.zf.tabs', [$target, $targetContent]);\\n\\n      //fire to children a mutation event\\n      $targetContent.find(\\\"[data-mutate]\\\").trigger(\\\"mutateme.zf.trigger\\\");\\n    }\\n\\n    /**\\n     * Opens the tab `$targetContent` defined by `$target`.\\n     * @param {jQuery} $target - Tab to Open.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_openTab',\\n    value: function _openTab($target) {\\n      var $tabLink = $target.find('[role=\\\"tab\\\"]'),\\n          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),\\n          $targetContent = this.$tabContent.find('#' + hash);\\n\\n      $target.addClass('' + this.options.linkActiveClass);\\n\\n      $tabLink.attr({\\n        'aria-selected': 'true',\\n        'tabindex': '0'\\n      });\\n\\n      $targetContent.addClass('' + this.options.panelActiveClass).removeAttr('aria-hidden');\\n    }\\n\\n    /**\\n     * Collapses `$targetContent` defined by `$target`.\\n     * @param {jQuery} $target - Tab to Open.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_collapseTab',\\n    value: function _collapseTab($target) {\\n      var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role=\\\"tab\\\"]').attr({\\n        'aria-selected': 'false',\\n        'tabindex': -1\\n      });\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });\\n    }\\n\\n    /**\\n     * Public method for selecting a content pane to display.\\n     * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\\n     * @param {boolean} historyHandled - browser has already handled a history update\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'selectTab',\\n    value: function selectTab(elem, historyHandled) {\\n      var idStr;\\n\\n      if (typeof elem === 'object') {\\n        idStr = elem[0].id;\\n      } else {\\n        idStr = elem;\\n      }\\n\\n      if (idStr.indexOf('#') < 0) {\\n        idStr = '#' + idStr;\\n      }\\n\\n      var $target = this.$tabTitles.find('[href$=\\\"' + idStr + '\\\"]').parent('.' + this.options.linkClass);\\n\\n      this._handleTabChange($target, historyHandled);\\n    }\\n  }, {\\n    key: '_setHeight',\\n\\n    /**\\n     * Sets the height of each panel to the height of the tallest panel.\\n     * If enabled in options, gets called on media query change.\\n     * If loading content via external source, can be called directly or with _reflow.\\n     * If enabled with `data-match-height=\\\"true\\\"`, tabs sets to equal height\\n     * @function\\n     * @private\\n     */\\n    value: function _setHeight() {\\n      var max = 0,\\n          _this = this; // Lock down the `this` value for the root tabs object\\n\\n      this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {\\n\\n        var panel = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child\\n\\n        if (!isActive) {\\n          panel.css({ 'visibility': 'hidden', 'display': 'block' });\\n        }\\n\\n        var temp = this.getBoundingClientRect().height;\\n\\n        if (!isActive) {\\n          panel.css({\\n            'visibility': '',\\n            'display': ''\\n          });\\n        }\\n\\n        max = temp > max ? temp : max;\\n      }).css('height', max + 'px');\\n    }\\n\\n    /**\\n     * Destroys an instance of an tabs.\\n     * @fires Tabs#destroyed\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();\\n\\n      if (this.options.matchHeight) {\\n        if (this._setHeightMqHandler != null) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._setHeightMqHandler);\\n        }\\n      }\\n\\n      if (this.options.deepLink) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);\\n      }\\n    }\\n  }]);\\n\\n  return Tabs;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nTabs.defaults = {\\n  /**\\n   * Allows the window to scroll to content of pane specified by hash anchor\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLink: false,\\n\\n  /**\\n   * Adjust the deep link scroll to make sure the top of the tab panel is visible\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLinkSmudge: false,\\n\\n  /**\\n   * Animation time (ms) for the deep link adjustment\\n   * @option\\n   * @type {number}\\n   * @default 300\\n   */\\n  deepLinkSmudgeDelay: 300,\\n\\n  /**\\n   * Update the browser history with the open tab\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  updateHistory: false,\\n\\n  /**\\n   * Allows the window to scroll to content of active pane on load if set to true.\\n   * Not recommended if more than one tab panel per page.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  autoFocus: false,\\n\\n  /**\\n   * Allows keyboard input to 'wrap' around the tab links.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  wrapOnKeys: true,\\n\\n  /**\\n   * Allows the tab content panes to match heights if set to true.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  matchHeight: false,\\n\\n  /**\\n   * Allows active tabs to collapse when clicked.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  activeCollapse: false,\\n\\n  /**\\n   * Class applied to `li`'s in tab link list.\\n   * @option\\n   * @type {string}\\n   * @default 'tabs-title'\\n   */\\n  linkClass: 'tabs-title',\\n\\n  /**\\n   * Class applied to the active `li` in tab link list.\\n   * @option\\n   * @type {string}\\n   * @default 'is-active'\\n   */\\n  linkActiveClass: 'is-active',\\n\\n  /**\\n   * Class applied to the content containers.\\n   * @option\\n   * @type {string}\\n   * @default 'tabs-panel'\\n   */\\n  panelClass: 'tabs-panel',\\n\\n  /**\\n   * Class applied to the active content container.\\n   * @option\\n   * @type {string}\\n   * @default 'is-active'\\n   */\\n  panelActiveClass: 'is-active'\\n};\\n\\n\\n\\n/***/ }),\\n/* 18 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Timer; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n\\n\\n\\n\\nfunction Timer(elem, options, cb) {\\n  var _this = this,\\n      duration = options.duration,\\n      //options is an object for easily adding features later.\\n  nameSpace = Object.keys(elem.data())[0] || 'timer',\\n      remain = -1,\\n      start,\\n      timer;\\n\\n  this.isPaused = false;\\n\\n  this.restart = function () {\\n    remain = -1;\\n    clearTimeout(timer);\\n    this.start();\\n  };\\n\\n  this.start = function () {\\n    this.isPaused = false;\\n    // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\\n    clearTimeout(timer);\\n    remain = remain <= 0 ? duration : remain;\\n    elem.data('paused', false);\\n    start = Date.now();\\n    timer = setTimeout(function () {\\n      if (options.infinite) {\\n        _this.restart(); //rerun the timer.\\n      }\\n      if (cb && typeof cb === 'function') {\\n        cb();\\n      }\\n    }, remain);\\n    elem.trigger('timerstart.zf.' + nameSpace);\\n  };\\n\\n  this.pause = function () {\\n    this.isPaused = true;\\n    //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\\n    clearTimeout(timer);\\n    elem.data('paused', true);\\n    var end = Date.now();\\n    remain = remain - (end - start);\\n    elem.trigger('timerpaused.zf.' + nameSpace);\\n  };\\n}\\n\\n\\n\\n/***/ }),\\n/* 19 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\nObject.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_core__ = __webpack_require__(21);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__ = __webpack_require__(7);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__ = __webpack_require__(8);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__foundation_util_nest__ = __webpack_require__(9);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__foundation_util_timer__ = __webpack_require__(18);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__foundation_util_touch__ = __webpack_require__(10);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__foundation_util_triggers__ = __webpack_require__(5);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__foundation_abide__ = __webpack_require__(20);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__foundation_accordion__ = __webpack_require__(11);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__foundation_accordionMenu__ = __webpack_require__(12);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__foundation_drilldown__ = __webpack_require__(13);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__foundation_dropdown__ = __webpack_require__(22);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__foundation_dropdownMenu__ = __webpack_require__(14);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__foundation_equalizer__ = __webpack_require__(23);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__foundation_interchange__ = __webpack_require__(24);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__foundation_magellan__ = __webpack_require__(25);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__foundation_offcanvas__ = __webpack_require__(26);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__foundation_orbit__ = __webpack_require__(27);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__foundation_responsiveMenu__ = __webpack_require__(29);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__foundation_responsiveToggle__ = __webpack_require__(30);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__foundation_reveal__ = __webpack_require__(31);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__foundation_slider__ = __webpack_require__(32);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__foundation_smoothScroll__ = __webpack_require__(16);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__foundation_sticky__ = __webpack_require__(33);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__foundation_tabs__ = __webpack_require__(17);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__foundation_toggler__ = __webpack_require__(34);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__foundation_tooltip__ = __webpack_require__(35);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__foundation_responsiveAccordionTabs__ = __webpack_require__(28);\\n\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].addToJquery(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n// Add Foundation Utils to Foundation global namespace for backwards\\n// compatibility.\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].rtl = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"a\\\" /* rtl */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].GetYoDigits = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].transitionend = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"c\\\" /* transitionend */];\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Box = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__[\\\"a\\\" /* Box */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].onImagesLoaded = __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__[\\\"a\\\" /* onImagesLoaded */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Keyboard = __WEBPACK_IMPORTED_MODULE_5__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].MediaQuery = __WEBPACK_IMPORTED_MODULE_6__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Motion = __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__[\\\"a\\\" /* Motion */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Move = __WEBPACK_IMPORTED_MODULE_7__foundation_util_motion__[\\\"b\\\" /* Move */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Nest = __WEBPACK_IMPORTED_MODULE_8__foundation_util_nest__[\\\"a\\\" /* Nest */];\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].Timer = __WEBPACK_IMPORTED_MODULE_9__foundation_util_timer__[\\\"a\\\" /* Timer */];\\n\\n// Touch and Triggers previously were almost purely sede effect driven,\\n// so no // need to add it to Foundation, just init them.\\n\\n\\n__WEBPACK_IMPORTED_MODULE_10__foundation_util_touch__[\\\"a\\\" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n\\n__WEBPACK_IMPORTED_MODULE_11__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a, __WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */]);\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_12__foundation_abide__[\\\"a\\\" /* Abide */], 'Abide');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_13__foundation_accordion__[\\\"a\\\" /* Accordion */], 'Accordion');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_14__foundation_accordionMenu__[\\\"a\\\" /* AccordionMenu */], 'AccordionMenu');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_15__foundation_drilldown__[\\\"a\\\" /* Drilldown */], 'Drilldown');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_16__foundation_dropdown__[\\\"a\\\" /* Dropdown */], 'Dropdown');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_17__foundation_dropdownMenu__[\\\"a\\\" /* DropdownMenu */], 'DropdownMenu');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_18__foundation_equalizer__[\\\"a\\\" /* Equalizer */], 'Equalizer');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_19__foundation_interchange__[\\\"a\\\" /* Interchange */], 'Interchange');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_20__foundation_magellan__[\\\"a\\\" /* Magellan */], 'Magellan');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_21__foundation_offcanvas__[\\\"a\\\" /* OffCanvas */], 'OffCanvas');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_22__foundation_orbit__[\\\"a\\\" /* Orbit */], 'Orbit');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_23__foundation_responsiveMenu__[\\\"a\\\" /* ResponsiveMenu */], 'ResponsiveMenu');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_24__foundation_responsiveToggle__[\\\"a\\\" /* ResponsiveToggle */], 'ResponsiveToggle');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_25__foundation_reveal__[\\\"a\\\" /* Reveal */], 'Reveal');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_26__foundation_slider__[\\\"a\\\" /* Slider */], 'Slider');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_27__foundation_smoothScroll__[\\\"a\\\" /* SmoothScroll */], 'SmoothScroll');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_28__foundation_sticky__[\\\"a\\\" /* Sticky */], 'Sticky');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_29__foundation_tabs__[\\\"a\\\" /* Tabs */], 'Tabs');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_30__foundation_toggler__[\\\"a\\\" /* Toggler */], 'Toggler');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_31__foundation_tooltip__[\\\"a\\\" /* Tooltip */], 'Tooltip');\\n\\n\\n__WEBPACK_IMPORTED_MODULE_1__foundation_core__[\\\"a\\\" /* Foundation */].plugin(__WEBPACK_IMPORTED_MODULE_32__foundation_responsiveAccordionTabs__[\\\"a\\\" /* ResponsiveAccordionTabs */], 'ResponsiveAccordionTabs');\\n\\n/***/ }),\\n/* 20 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Abide; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n/**\\n * Abide module.\\n * @module foundation.abide\\n */\\n\\nvar Abide = function (_Plugin) {\\n  _inherits(Abide, _Plugin);\\n\\n  function Abide() {\\n    _classCallCheck(this, Abide);\\n\\n    return _possibleConstructorReturn(this, (Abide.__proto__ || Object.getPrototypeOf(Abide)).apply(this, arguments));\\n  }\\n\\n  _createClass(Abide, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Abide.\\n     * @class\\n     * @name Abide\\n     * @fires Abide#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element) {\\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Abide.defaults, this.$element.data(), options);\\n\\n      this.className = 'Abide'; // ie9 back compat\\n      this._init();\\n    }\\n\\n    /**\\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      this.$inputs = this.$element.find('input, textarea, select');\\n\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes events for Abide.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this3 = this;\\n\\n      this.$element.off('.abide').on('reset.zf.abide', function () {\\n        _this3.resetForm();\\n      }).on('submit.zf.abide', function () {\\n        return _this3.validateForm();\\n      });\\n\\n      if (this.options.validateOn === 'fieldChange') {\\n        this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\\n          _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));\\n        });\\n      }\\n\\n      if (this.options.liveValidate) {\\n        this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\\n          _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));\\n        });\\n      }\\n\\n      if (this.options.validateOnBlur) {\\n        this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {\\n          _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));\\n        });\\n      }\\n    }\\n\\n    /**\\n     * Calls necessary functions to update Abide upon DOM change\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_reflow',\\n    value: function _reflow() {\\n      this._init();\\n    }\\n\\n    /**\\n     * Checks whether or not a form element has the required attribute and if it's checked or not\\n     * @param {Object} element - jQuery object to check for required attribute\\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n     */\\n\\n  }, {\\n    key: 'requiredCheck',\\n    value: function requiredCheck($el) {\\n      if (!$el.attr('required')) return true;\\n\\n      var isGood = true;\\n\\n      switch ($el[0].type) {\\n        case 'checkbox':\\n          isGood = $el[0].checked;\\n          break;\\n\\n        case 'select':\\n        case 'select-one':\\n        case 'select-multiple':\\n          var opt = $el.find('option:selected');\\n          if (!opt.length || !opt.val()) isGood = false;\\n          break;\\n\\n        default:\\n          if (!$el.val() || !$el.val().length) isGood = false;\\n      }\\n\\n      return isGood;\\n    }\\n\\n    /**\\n     * Get:\\n     * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:\\n     *   1. The element's direct sibling('s).\\n     *   2. The element's parent's children.\\n     * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.\\n     *\\n     * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\\n     *\\n     * @param {Object} $el - jQuery object to use as reference to find the form error selector.\\n     * @returns {Object} jQuery object with the selector.\\n     */\\n\\n  }, {\\n    key: 'findFormError',\\n    value: function findFormError($el) {\\n      var id = $el[0].id;\\n      var $error = $el.siblings(this.options.formErrorSelector);\\n\\n      if (!$error.length) {\\n        $error = $el.parent().find(this.options.formErrorSelector);\\n      }\\n\\n      $error = $error.add(this.$element.find('[data-form-error-for=\\\"' + id + '\\\"]'));\\n\\n      return $error;\\n    }\\n\\n    /**\\n     * Get the first element in this order:\\n     * 2. The <label> with the attribute `[for=\\\"someInputId\\\"]`\\n     * 3. The `.closest()` <label>\\n     *\\n     * @param {Object} $el - jQuery object to check for required attribute\\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n     */\\n\\n  }, {\\n    key: 'findLabel',\\n    value: function findLabel($el) {\\n      var id = $el[0].id;\\n      var $label = this.$element.find('label[for=\\\"' + id + '\\\"]');\\n\\n      if (!$label.length) {\\n        return $el.closest('label');\\n      }\\n\\n      return $label;\\n    }\\n\\n    /**\\n     * Get the set of labels associated with a set of radio els in this order\\n     * 2. The <label> with the attribute `[for=\\\"someInputId\\\"]`\\n     * 3. The `.closest()` <label>\\n     *\\n     * @param {Object} $el - jQuery object to check for required attribute\\n     * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\\n     */\\n\\n  }, {\\n    key: 'findRadioLabels',\\n    value: function findRadioLabels($els) {\\n      var _this4 = this;\\n\\n      var labels = $els.map(function (i, el) {\\n        var id = el.id;\\n        var $label = _this4.$element.find('label[for=\\\"' + id + '\\\"]');\\n\\n        if (!$label.length) {\\n          $label = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).closest('label');\\n        }\\n        return $label[0];\\n      });\\n\\n      return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(labels);\\n    }\\n\\n    /**\\n     * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\\n     * @param {Object} $el - jQuery object to add the class to\\n     */\\n\\n  }, {\\n    key: 'addErrorClasses',\\n    value: function addErrorClasses($el) {\\n      var $label = this.findLabel($el);\\n      var $formError = this.findFormError($el);\\n\\n      if ($label.length) {\\n        $label.addClass(this.options.labelErrorClass);\\n      }\\n\\n      if ($formError.length) {\\n        $formError.addClass(this.options.formErrorClass);\\n      }\\n\\n      $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\\n    }\\n\\n    /**\\n     * Remove CSS error classes etc from an entire radio button group\\n     * @param {String} groupName - A string that specifies the name of a radio button group\\n     *\\n     */\\n\\n  }, {\\n    key: 'removeRadioErrorClasses',\\n    value: function removeRadioErrorClasses(groupName) {\\n      var $els = this.$element.find(':radio[name=\\\"' + groupName + '\\\"]');\\n      var $labels = this.findRadioLabels($els);\\n      var $formErrors = this.findFormError($els);\\n\\n      if ($labels.length) {\\n        $labels.removeClass(this.options.labelErrorClass);\\n      }\\n\\n      if ($formErrors.length) {\\n        $formErrors.removeClass(this.options.formErrorClass);\\n      }\\n\\n      $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\\n    }\\n\\n    /**\\n     * Removes CSS error class as specified by the Abide settings from the label, input, and the form\\n     * @param {Object} $el - jQuery object to remove the class from\\n     */\\n\\n  }, {\\n    key: 'removeErrorClasses',\\n    value: function removeErrorClasses($el) {\\n      // radios need to clear all of the els\\n      if ($el[0].type == 'radio') {\\n        return this.removeRadioErrorClasses($el.attr('name'));\\n      }\\n\\n      var $label = this.findLabel($el);\\n      var $formError = this.findFormError($el);\\n\\n      if ($label.length) {\\n        $label.removeClass(this.options.labelErrorClass);\\n      }\\n\\n      if ($formError.length) {\\n        $formError.removeClass(this.options.formErrorClass);\\n      }\\n\\n      $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\\n    }\\n\\n    /**\\n     * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.\\n     * Ignores inputs with data-abide-ignore, type=\\\"hidden\\\" or disabled attributes set\\n     * @fires Abide#invalid\\n     * @fires Abide#valid\\n     * @param {Object} element - jQuery object to validate, should be an HTML input\\n     * @returns {Boolean} goodToGo - If the input is valid or not.\\n     */\\n\\n  }, {\\n    key: 'validateInput',\\n    value: function validateInput($el) {\\n      var clearRequire = this.requiredCheck($el),\\n          validated = false,\\n          customValidator = true,\\n          validator = $el.attr('data-validator'),\\n          equalTo = true;\\n\\n      // don't validate ignored inputs or hidden inputs or disabled inputs\\n      if ($el.is('[data-abide-ignore]') || $el.is('[type=\\\"hidden\\\"]') || $el.is('[disabled]')) {\\n        return true;\\n      }\\n\\n      switch ($el[0].type) {\\n        case 'radio':\\n          validated = this.validateRadio($el.attr('name'));\\n          break;\\n\\n        case 'checkbox':\\n          validated = clearRequire;\\n          break;\\n\\n        case 'select':\\n        case 'select-one':\\n        case 'select-multiple':\\n          validated = clearRequire;\\n          break;\\n\\n        default:\\n          validated = this.validateText($el);\\n      }\\n\\n      if (validator) {\\n        customValidator = this.matchValidation($el, validator, $el.attr('required'));\\n      }\\n\\n      if ($el.attr('data-equalto')) {\\n        equalTo = this.options.validators.equalTo($el);\\n      }\\n\\n      var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\\n      var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\\n\\n      if (goodToGo) {\\n        // Re-validate inputs that depend on this one with equalto\\n        var dependentElements = this.$element.find('[data-equalto=\\\"' + $el.attr('id') + '\\\"]');\\n        if (dependentElements.length) {\\n          var _this = this;\\n          dependentElements.each(function () {\\n            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val()) {\\n              _this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));\\n            }\\n          });\\n        }\\n      }\\n\\n      this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\\n\\n      /**\\n       * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\\n       * Trigger includes the DOM element of the input.\\n       * @event Abide#valid\\n       * @event Abide#invalid\\n       */\\n      $el.trigger(message, [$el]);\\n\\n      return goodToGo;\\n    }\\n\\n    /**\\n     * Goes through a form and if there are any invalid inputs, it will display the form error element\\n     * @returns {Boolean} noError - true if no errors were detected...\\n     * @fires Abide#formvalid\\n     * @fires Abide#forminvalid\\n     */\\n\\n  }, {\\n    key: 'validateForm',\\n    value: function validateForm() {\\n      var acc = [];\\n      var _this = this;\\n\\n      this.$inputs.each(function () {\\n        acc.push(_this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)));\\n      });\\n\\n      var noError = acc.indexOf(false) === -1;\\n\\n      this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\\n\\n      /**\\n       * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\\n       * Trigger includes the element of the form.\\n       * @event Abide#formvalid\\n       * @event Abide#forminvalid\\n       */\\n      this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\\n\\n      return noError;\\n    }\\n\\n    /**\\n     * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\\n     * @param {Object} $el - jQuery object to validate, should be a text input HTML element\\n     * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\\n     * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\\n     */\\n\\n  }, {\\n    key: 'validateText',\\n    value: function validateText($el, pattern) {\\n      // A pattern can be passed to this function, or it will be infered from the input's \\\"pattern\\\" attribute, or it's \\\"type\\\" attribute\\n      pattern = pattern || $el.attr('pattern') || $el.attr('type');\\n      var inputText = $el.val();\\n      var valid = false;\\n\\n      if (inputText.length) {\\n        // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\\n        if (this.options.patterns.hasOwnProperty(pattern)) {\\n          valid = this.options.patterns[pattern].test(inputText);\\n        }\\n        // If the pattern name isn't also the type attribute of the field, then test it as a regexp\\n        else if (pattern !== $el.attr('type')) {\\n            valid = new RegExp(pattern).test(inputText);\\n          } else {\\n            valid = true;\\n          }\\n      }\\n      // An empty field is valid if it's not required\\n      else if (!$el.prop('required')) {\\n          valid = true;\\n        }\\n\\n      return valid;\\n    }\\n\\n    /**\\n     * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\\n     * @param {String} groupName - A string that specifies the name of a radio button group\\n     * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\\n     */\\n\\n  }, {\\n    key: 'validateRadio',\\n    value: function validateRadio(groupName) {\\n      // If at least one radio in the group has the `required` attribute, the group is considered required\\n      // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\\n      var $group = this.$element.find(':radio[name=\\\"' + groupName + '\\\"]');\\n      var valid = false,\\n          required = false;\\n\\n      // For the group to be required, at least one radio needs to be required\\n      $group.each(function (i, e) {\\n        if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).attr('required')) {\\n          required = true;\\n        }\\n      });\\n      if (!required) valid = true;\\n\\n      if (!valid) {\\n        // For the group to be valid, at least one radio needs to be checked\\n        $group.each(function (i, e) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).prop('checked')) {\\n            valid = true;\\n          }\\n        });\\n      };\\n\\n      return valid;\\n    }\\n\\n    /**\\n     * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\\\"foo bar baz\\\"` in a space separated listed.\\n     * @param {Object} $el - jQuery input element.\\n     * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\\n     * @param {Boolean} required - self explanatory?\\n     * @returns {Boolean} - true if validations passed.\\n     */\\n\\n  }, {\\n    key: 'matchValidation',\\n    value: function matchValidation($el, validators, required) {\\n      var _this5 = this;\\n\\n      required = required ? true : false;\\n\\n      var clear = validators.split(' ').map(function (v) {\\n        return _this5.options.validators[v]($el, required, $el.parent());\\n      });\\n      return clear.indexOf(false) === -1;\\n    }\\n\\n    /**\\n     * Resets form inputs and styles\\n     * @fires Abide#formreset\\n     */\\n\\n  }, {\\n    key: 'resetForm',\\n    value: function resetForm() {\\n      var $form = this.$element,\\n          opts = this.options;\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\\n      $form.find('[data-abide-error]').css('display', 'none');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\\n      /**\\n       * Fires when the form has been reset.\\n       * @event Abide#formreset\\n       */\\n      $form.trigger('formreset.zf.abide', [$form]);\\n    }\\n\\n    /**\\n     * Destroys an instance of Abide.\\n     * Removes error styles and classes from elements, without resetting their values.\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      var _this = this;\\n      this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\\n\\n      this.$inputs.off('.abide').each(function () {\\n        _this.removeErrorClasses(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));\\n      });\\n    }\\n  }]);\\n\\n  return Abide;\\n}(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin\\n */\\n\\n\\nAbide.defaults = {\\n  /**\\n   * The default event to validate inputs. Checkboxes and radios validate immediately.\\n   * Remove or change this value for manual validation.\\n   * @option\\n   * @type {?string}\\n   * @default 'fieldChange'\\n   */\\n  validateOn: 'fieldChange',\\n\\n  /**\\n   * Class to be applied to input labels on failed validation.\\n   * @option\\n   * @type {string}\\n   * @default 'is-invalid-label'\\n   */\\n  labelErrorClass: 'is-invalid-label',\\n\\n  /**\\n   * Class to be applied to inputs on failed validation.\\n   * @option\\n   * @type {string}\\n   * @default 'is-invalid-input'\\n   */\\n  inputErrorClass: 'is-invalid-input',\\n\\n  /**\\n   * Class selector to use to target Form Errors for show/hide.\\n   * @option\\n   * @type {string}\\n   * @default '.form-error'\\n   */\\n  formErrorSelector: '.form-error',\\n\\n  /**\\n   * Class added to Form Errors on failed validation.\\n   * @option\\n   * @type {string}\\n   * @default 'is-visible'\\n   */\\n  formErrorClass: 'is-visible',\\n\\n  /**\\n   * Set to true to validate text inputs on any value change.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  liveValidate: false,\\n\\n  /**\\n   * Set to true to validate inputs on blur.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  validateOnBlur: false,\\n\\n  patterns: {\\n    alpha: /^[a-zA-Z]+$/,\\n    alpha_numeric: /^[a-zA-Z0-9]+$/,\\n    integer: /^[-+]?\\\\d+$/,\\n    number: /^[-+]?\\\\d*(?:[\\\\.\\\\,]\\\\d+)?$/,\\n\\n    // amex, visa, diners\\n    card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\\\d{3})\\\\d{11})$/,\\n    cvv: /^([0-9]){3,4}$/,\\n\\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\\n    email: /^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\\n\\n    url: /^(https?|ftp|file|ssh):\\\\/\\\\/(((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:)*@)?(((\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5])\\\\.(\\\\d|[1-9]\\\\d|1\\\\d\\\\d|2[0-4]\\\\d|25[0-5]))|((([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-zA-Z]|\\\\d|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.)+(([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])*([a-zA-Z]|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])))\\\\.?)(:\\\\d*)?)(\\\\/((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)+(\\\\/(([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)*)*)?)?(\\\\?((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|[\\\\uE000-\\\\uF8FF]|\\\\/|\\\\?)*)?(\\\\#((([a-zA-Z]|\\\\d|-|\\\\.|_|~|[\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF])|(%[\\\\da-f]{2})|[!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=]|:|@)|\\\\/|\\\\?)*)?$/,\\n    // abc.de\\n    domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,8}$/,\\n\\n    datetime: /^([0-2][0-9]{3})\\\\-([0-1][0-9])\\\\-([0-3][0-9])T([0-5][0-9])\\\\:([0-5][0-9])\\\\:([0-5][0-9])(Z|([\\\\-\\\\+]([0-1][0-9])\\\\:00))$/,\\n    // YYYY-MM-DD\\n    date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\\n    // HH:MM:SS\\n    time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\\n    dateISO: /^\\\\d{4}[\\\\/\\\\-]\\\\d{1,2}[\\\\/\\\\-]\\\\d{1,2}$/,\\n    // MM/DD/YYYY\\n    month_day_year: /^(0[1-9]|1[012])[- \\\\/.](0[1-9]|[12][0-9]|3[01])[- \\\\/.]\\\\d{4}$/,\\n    // DD/MM/YYYY\\n    day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\\\/.](0[1-9]|1[012])[- \\\\/.]\\\\d{4}$/,\\n\\n    // #FFF or #FFFFFF\\n    color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\\n\\n    // Domain || URL\\n    website: {\\n      test: function (text) {\\n        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);\\n      }\\n    }\\n  },\\n\\n  /**\\n   * Optional validation functions to be used. `equalTo` being the only default included function.\\n   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\\n   * el : The jQuery element to validate.\\n   * required : Boolean value of the required attribute be present or not.\\n   * parent : The direct parent of the input.\\n   * @option\\n   */\\n  validators: {\\n    equalTo: function (el, required, parent) {\\n      return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + el.attr('data-equalto')).val() === el.val();\\n    }\\n  }\\n};\\n\\n\\n\\n/***/ }),\\n/* 21 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Foundation; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);\\n\\n\\n\\n\\n\\n\\nvar FOUNDATION_VERSION = '6.4.1';\\n\\n// Global Foundation object\\n// This is attached to the window, or used as a module for AMD/Browserify\\nvar Foundation = {\\n  version: FOUNDATION_VERSION,\\n\\n  /**\\n   * Stores initialized plugins.\\n   */\\n  _plugins: {},\\n\\n  /**\\n   * Stores generated unique ids for plugin instances\\n   */\\n  _uuids: [],\\n\\n  /**\\n   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\\n   * @param {Object} plugin - The constructor of the plugin.\\n   */\\n  plugin: function (plugin, name) {\\n    // Object key to use when adding to global Foundation object\\n    // Examples: Foundation.Reveal, Foundation.OffCanvas\\n    var className = name || functionName(plugin);\\n    // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\\n    // Examples: data-reveal, data-off-canvas\\n    var attrName = hyphenate(className);\\n\\n    // Add to the Foundation object and the plugins list (for reflowing)\\n    this._plugins[attrName] = this[className] = plugin;\\n  },\\n  /**\\n   * @function\\n   * Populates the _uuids array with pointers to each individual plugin instance.\\n   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\\n   * Also fires the initialization event for each plugin, consolidating repetitive code.\\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\\n   * @param {String} name - the name of the plugin, passed as a camelCased string.\\n   * @fires Plugin#init\\n   */\\n  registerPlugin: function (plugin, name) {\\n    var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();\\n    plugin.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, pluginName);\\n\\n    if (!plugin.$element.attr('data-' + pluginName)) {\\n      plugin.$element.attr('data-' + pluginName, plugin.uuid);\\n    }\\n    if (!plugin.$element.data('zfPlugin')) {\\n      plugin.$element.data('zfPlugin', plugin);\\n    }\\n    /**\\n     * Fires when the plugin has initialized.\\n     * @event Plugin#init\\n     */\\n    plugin.$element.trigger('init.zf.' + pluginName);\\n\\n    this._uuids.push(plugin.uuid);\\n\\n    return;\\n  },\\n  /**\\n   * @function\\n   * Removes the plugins uuid from the _uuids array.\\n   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\\n   * Also fires the destroyed event for the plugin, consolidating repetitive code.\\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\\n   * @fires Plugin#destroyed\\n   */\\n  unregisterPlugin: function (plugin) {\\n    var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));\\n\\n    this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);\\n    plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')\\n    /**\\n     * Fires when the plugin has been destroyed.\\n     * @event Plugin#destroyed\\n     */\\n    .trigger('destroyed.zf.' + pluginName);\\n    for (var prop in plugin) {\\n      plugin[prop] = null; //clean up script to prep for garbage collection.\\n    }\\n    return;\\n  },\\n\\n  /**\\n   * @function\\n   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\\n   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\\n   * @default If no argument is passed, reflow all currently active plugins.\\n   */\\n  reInit: function (plugins) {\\n    var isJQ = plugins instanceof __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;\\n    try {\\n      if (isJQ) {\\n        plugins.each(function () {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('zfPlugin')._init();\\n        });\\n      } else {\\n        var type = typeof plugins,\\n            _this = this,\\n            fns = {\\n          'object': function (plgs) {\\n            plgs.forEach(function (p) {\\n              p = hyphenate(p);\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + p + ']').foundation('_init');\\n            });\\n          },\\n          'string': function () {\\n            plugins = hyphenate(plugins);\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugins + ']').foundation('_init');\\n          },\\n          'undefined': function () {\\n            this['object'](Object.keys(_this._plugins));\\n          }\\n        };\\n        fns[type](plugins);\\n      }\\n    } catch (err) {\\n      console.error(err);\\n    } finally {\\n      return plugins;\\n    }\\n  },\\n\\n  /**\\n   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\\n   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\\n   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\\n   */\\n  reflow: function (elem, plugins) {\\n\\n    // If plugins is undefined, just grab everything\\n    if (typeof plugins === 'undefined') {\\n      plugins = Object.keys(this._plugins);\\n    }\\n    // If plugins is a string, convert it to an array with one item\\n    else if (typeof plugins === 'string') {\\n        plugins = [plugins];\\n      }\\n\\n    var _this = this;\\n\\n    // Iterate through each plugin\\n    __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(plugins, function (i, name) {\\n      // Get the current plugin\\n      var plugin = _this._plugins[name];\\n\\n      // Localize the search to all elements inside elem, as well as elem itself, unless elem === document\\n      var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');\\n\\n      // For each plugin found, initialize it\\n      $elem.each(function () {\\n        var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            opts = {};\\n        // Don't double-dip on plugins\\n        if ($el.data('zfPlugin')) {\\n          console.warn(\\\"Tried to initialize \\\" + name + \\\" on an element that already has a Foundation plugin.\\\");\\n          return;\\n        }\\n\\n        if ($el.attr('data-options')) {\\n          var thing = $el.attr('data-options').split(';').forEach(function (e, i) {\\n            var opt = e.split(':').map(function (el) {\\n              return el.trim();\\n            });\\n            if (opt[0]) opts[opt[0]] = parseValue(opt[1]);\\n          });\\n        }\\n        try {\\n          $el.data('zfPlugin', new plugin(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), opts));\\n        } catch (er) {\\n          console.error(er);\\n        } finally {\\n          return;\\n        }\\n      });\\n    });\\n  },\\n  getFnName: functionName,\\n\\n  addToJquery: function ($) {\\n    // TODO: consider not making this a jQuery function\\n    // TODO: need way to reflow vs. re-initialize\\n    /**\\n     * The Foundation jQuery method.\\n     * @param {String|Array} method - An action to perform on the current jQuery object.\\n     */\\n    var foundation = function (method) {\\n      var type = typeof method,\\n          $noJS = $('.no-js');\\n\\n      if ($noJS.length) {\\n        $noJS.removeClass('no-js');\\n      }\\n\\n      if (type === 'undefined') {\\n        //needs to initialize the Foundation object, or an individual plugin.\\n        __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n        Foundation.reflow(this);\\n      } else if (type === 'string') {\\n        //an individual method to invoke on a plugin or group of plugins\\n        var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary\\n        var plugClass = this.data('zfPlugin'); //determine the class of plugin\\n\\n        if (plugClass !== undefined && plugClass[method] !== undefined) {\\n          //make sure both the class and method exist\\n          if (this.length === 1) {\\n            //if there's only one, call it directly.\\n            plugClass[method].apply(plugClass, args);\\n          } else {\\n            this.each(function (i, el) {\\n              //otherwise loop through the jQuery collection and invoke the method on each\\n              plugClass[method].apply($(el).data('zfPlugin'), args);\\n            });\\n          }\\n        } else {\\n          //error for no class or no method\\n          throw new ReferenceError(\\\"We're sorry, '\\\" + method + \\\"' is not an available method for \\\" + (plugClass ? functionName(plugClass) : 'this element') + '.');\\n        }\\n      } else {\\n        //error for invalid argument type\\n        throw new TypeError('We\\\\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');\\n      }\\n      return this;\\n    };\\n    $.fn.foundation = foundation;\\n    return $;\\n  }\\n};\\n\\nFoundation.util = {\\n  /**\\n   * Function for applying a debounce effect to a function call.\\n   * @function\\n   * @param {Function} func - Function to be called at end of timeout.\\n   * @param {Number} delay - Time in ms to delay the call of `func`.\\n   * @returns function\\n   */\\n  throttle: function (func, delay) {\\n    var timer = null;\\n\\n    return function () {\\n      var context = this,\\n          args = arguments;\\n\\n      if (timer === null) {\\n        timer = setTimeout(function () {\\n          func.apply(context, args);\\n          timer = null;\\n        }, delay);\\n      }\\n    };\\n  }\\n};\\n\\nwindow.Foundation = Foundation;\\n\\n// Polyfill for requestAnimationFrame\\n(function () {\\n  if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {\\n    return new Date().getTime();\\n  };\\n\\n  var vendors = ['webkit', 'moz'];\\n  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\\n    var vp = vendors[i];\\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\\n  }\\n  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\\n    var lastTime = 0;\\n    window.requestAnimationFrame = function (callback) {\\n      var now = Date.now();\\n      var nextTime = Math.max(lastTime + 16, now);\\n      return setTimeout(function () {\\n        callback(lastTime = nextTime);\\n      }, nextTime - now);\\n    };\\n    window.cancelAnimationFrame = clearTimeout;\\n  }\\n  /**\\n   * Polyfill for performance.now, required by rAF\\n   */\\n  if (!window.performance || !window.performance.now) {\\n    window.performance = {\\n      start: Date.now(),\\n      now: function () {\\n        return Date.now() - this.start;\\n      }\\n    };\\n  }\\n})();\\nif (!Function.prototype.bind) {\\n  Function.prototype.bind = function (oThis) {\\n    if (typeof this !== 'function') {\\n      // closest thing possible to the ECMAScript 5\\n      // internal IsCallable function\\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\\n    }\\n\\n    var aArgs = Array.prototype.slice.call(arguments, 1),\\n        fToBind = this,\\n        fNOP = function () {},\\n        fBound = function () {\\n      return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\\n    };\\n\\n    if (this.prototype) {\\n      // native functions don't have a prototype\\n      fNOP.prototype = this.prototype;\\n    }\\n    fBound.prototype = new fNOP();\\n\\n    return fBound;\\n  };\\n}\\n// Polyfill to get the name of a function in IE9\\nfunction functionName(fn) {\\n  if (Function.prototype.name === undefined) {\\n    var funcNameRegex = /function\\\\s([^(]{1,})\\\\(/;\\n    var results = funcNameRegex.exec(fn.toString());\\n    return results && results.length > 1 ? results[1].trim() : \\\"\\\";\\n  } else if (fn.prototype === undefined) {\\n    return fn.constructor.name;\\n  } else {\\n    return fn.prototype.constructor.name;\\n  }\\n}\\nfunction parseValue(str) {\\n  if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);\\n  return str;\\n}\\n// Convert PascalCase to kebab-case\\n// Thank you: http://stackoverflow.com/a/8955580\\nfunction hyphenate(str) {\\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\\n}\\n\\n\\n\\n/***/ }),\\n/* 22 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Dropdown; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_positionable__ = __webpack_require__(15);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\\\"value\\\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Dropdown module.\\n * @module foundation.dropdown\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.box\\n * @requires foundation.util.triggers\\n */\\n\\nvar Dropdown = function (_Positionable) {\\n  _inherits(Dropdown, _Positionable);\\n\\n  function Dropdown() {\\n    _classCallCheck(this, Dropdown);\\n\\n    return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a dropdown.\\n     * @class\\n     * @name Dropdown\\n     * @param {jQuery} element - jQuery object to make into a dropdown.\\n     *        Object should be of the dropdown panel, rather than its anchor.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Dropdown.defaults, this.$element.data(), options);\\n      this.className = 'Dropdown'; // ie9 back compat\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Dropdown', {\\n        'ENTER': 'open',\\n        'SPACE': 'open',\\n        'ESCAPE': 'close'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var $id = this.$element.attr('id');\\n\\n      this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle=\\\"' + $id + '\\\"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle=\\\"' + $id + '\\\"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open=\\\"' + $id + '\\\"]');\\n      this.$anchor.attr({\\n        'aria-controls': $id,\\n        'data-is-focus': false,\\n        'data-yeti-box': $id,\\n        'aria-haspopup': true,\\n        'aria-expanded': false\\n\\n      });\\n\\n      if (this.options.parentClass) {\\n        this.$parent = this.$element.parents('.' + this.options.parentClass);\\n      } else {\\n        this.$parent = null;\\n      }\\n\\n      this.$element.attr({\\n        'aria-hidden': 'true',\\n        'data-yeti-box': $id,\\n        'data-resize': $id,\\n        'aria-labelledby': this.$anchor[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'dd-anchor')\\n      });\\n      _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_init', this).call(this);\\n      this._events();\\n    }\\n  }, {\\n    key: '_getDefaultPosition',\\n    value: function _getDefaultPosition() {\\n      // handle legacy classnames\\n      var position = this.$element[0].className.match(/(top|left|right|bottom)/g);\\n      if (position) {\\n        return position[0];\\n      } else {\\n        return 'bottom';\\n      }\\n    }\\n  }, {\\n    key: '_getDefaultAlignment',\\n    value: function _getDefaultAlignment() {\\n      // handle legacy float approach\\n      var horizontalPosition = /float-(\\\\S+)/.exec(this.$anchor[0].className);\\n      if (horizontalPosition) {\\n        return horizontalPosition[1];\\n      }\\n\\n      return _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_getDefaultAlignment', this).call(this);\\n    }\\n\\n    /**\\n     * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.\\n     * Recursively calls itself if a collision is detected, with a new position class.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setPosition',\\n    value: function _setPosition() {\\n      _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_setPosition', this).call(this, this.$anchor, this.$element, this.$parent);\\n    }\\n\\n    /**\\n     * Adds event listeners to the element utilizing the triggers utility library.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n      this.$element.on({\\n        'open.zf.trigger': this.open.bind(this),\\n        'close.zf.trigger': this.close.bind(this),\\n        'toggle.zf.trigger': this.toggle.bind(this),\\n        'resizeme.zf.trigger': this._setPosition.bind(this)\\n      });\\n\\n      if (this.options.hover) {\\n        this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\\n          var bodyData = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').data();\\n          if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {\\n            clearTimeout(_this.timeout);\\n            _this.timeout = setTimeout(function () {\\n              _this.open();\\n              _this.$anchor.data('hover', true);\\n            }, _this.options.hoverDelay);\\n          }\\n        }).on('mouseleave.zf.dropdown', function () {\\n          clearTimeout(_this.timeout);\\n          _this.timeout = setTimeout(function () {\\n            _this.close();\\n            _this.$anchor.data('hover', false);\\n          }, _this.options.hoverDelay);\\n        });\\n        if (this.options.hoverPane) {\\n          this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\\n            clearTimeout(_this.timeout);\\n          }).on('mouseleave.zf.dropdown', function () {\\n            clearTimeout(_this.timeout);\\n            _this.timeout = setTimeout(function () {\\n              _this.close();\\n              _this.$anchor.data('hover', false);\\n            }, _this.options.hoverDelay);\\n          });\\n        }\\n      }\\n      this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {\\n\\n        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            visibleFocusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].findFocusable(_this.$element);\\n\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Dropdown', {\\n          open: function () {\\n            if ($target.is(_this.$anchor)) {\\n              _this.open();\\n              _this.$element.attr('tabindex', -1).focus();\\n              e.preventDefault();\\n            }\\n          },\\n          close: function () {\\n            _this.close();\\n            _this.$anchor.focus();\\n          }\\n        });\\n      });\\n    }\\n\\n    /**\\n     * Adds an event handler to the body to close any dropdowns on a click.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addBodyHandler',\\n    value: function _addBodyHandler() {\\n      var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).not(this.$element),\\n          _this = this;\\n      $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {\\n        if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {\\n          return;\\n        }\\n        if (_this.$element.find(e.target).length) {\\n          return;\\n        }\\n        _this.close();\\n        $body.off('click.zf.dropdown');\\n      });\\n    }\\n\\n    /**\\n     * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\\n     * @function\\n     * @fires Dropdown#closeme\\n     * @fires Dropdown#show\\n     */\\n\\n  }, {\\n    key: 'open',\\n    value: function open() {\\n      // var _this = this;\\n      /**\\n       * Fires to close other open dropdowns, typically when dropdown is opening\\n       * @event Dropdown#closeme\\n       */\\n      this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));\\n      this.$anchor.addClass('hover').attr({ 'aria-expanded': true });\\n      // this.$element/*.show()*/;\\n\\n      this.$element.addClass('is-opening');\\n      this._setPosition();\\n      this.$element.removeClass('is-opening').addClass('is-open').attr({ 'aria-hidden': false });\\n\\n      if (this.options.autoFocus) {\\n        var $focusable = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].findFocusable(this.$element);\\n        if ($focusable.length) {\\n          $focusable.eq(0).focus();\\n        }\\n      }\\n\\n      if (this.options.closeOnClick) {\\n        this._addBodyHandler();\\n      }\\n\\n      if (this.options.trapFocus) {\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].trapFocus(this.$element);\\n      }\\n\\n      /**\\n       * Fires once the dropdown is visible.\\n       * @event Dropdown#show\\n       */\\n      this.$element.trigger('show.zf.dropdown', [this.$element]);\\n    }\\n\\n    /**\\n     * Closes the open dropdown pane.\\n     * @function\\n     * @fires Dropdown#hide\\n     */\\n\\n  }, {\\n    key: 'close',\\n    value: function close() {\\n      if (!this.$element.hasClass('is-open')) {\\n        return false;\\n      }\\n      this.$element.removeClass('is-open').attr({ 'aria-hidden': true });\\n\\n      this.$anchor.removeClass('hover').attr('aria-expanded', false);\\n\\n      /**\\n       * Fires once the dropdown is no longer visible.\\n       * @event Dropdown#hide\\n       */\\n      this.$element.trigger('hide.zf.dropdown', [this.$element]);\\n\\n      if (this.options.trapFocus) {\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].releaseFocus(this.$element);\\n      }\\n    }\\n\\n    /**\\n     * Toggles the dropdown pane's visibility.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle() {\\n      if (this.$element.hasClass('is-open')) {\\n        if (this.$anchor.data('hover')) return;\\n        this.close();\\n      } else {\\n        this.open();\\n      }\\n    }\\n\\n    /**\\n     * Destroys the dropdown.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('.zf.trigger').hide();\\n      this.$anchor.off('.zf.dropdown');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('click.zf.dropdown');\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_positionable__[\\\"a\\\" /* Positionable */]);\\n\\nDropdown.defaults = {\\n  /**\\n   * Class that designates bounding container of Dropdown (default: window)\\n   * @option\\n   * @type {?string}\\n   * @default null\\n   */\\n  parentClass: null,\\n  /**\\n   * Amount of time to delay opening a submenu on hover event.\\n   * @option\\n   * @type {number}\\n   * @default 250\\n   */\\n  hoverDelay: 250,\\n  /**\\n   * Allow submenus to open on hover events\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  hover: false,\\n  /**\\n   * Don't close dropdown when hovering over dropdown pane\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  hoverPane: false,\\n  /**\\n   * Number of pixels between the dropdown pane and the triggering element on open.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  vOffset: 0,\\n  /**\\n   * Number of pixels between the dropdown pane and the triggering element on open.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  hOffset: 0,\\n  /**\\n   * DEPRECATED: Class applied to adjust open position.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  positionClass: '',\\n\\n  /**\\n   * Position of dropdown. Can be left, right, bottom, top, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  position: 'auto',\\n  /**\\n   * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  alignment: 'auto',\\n  /**\\n   * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  allowOverlap: false,\\n  /**\\n   * Allow overlap of only the bottom of the container. This is the most common\\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\\n   * screen but not otherwise influence or break out of the container.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  allowBottomOverlap: true,\\n  /**\\n   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  trapFocus: false,\\n  /**\\n   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  autoFocus: false,\\n  /**\\n   * Allows a click on the body to close the dropdown.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  closeOnClick: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 23 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Equalizer; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(8);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Equalizer module.\\n * @module foundation.equalizer\\n * @requires foundation.util.mediaQuery\\n * @requires foundation.util.imageLoader if equalizer contains images\\n */\\n\\nvar Equalizer = function (_Plugin) {\\n  _inherits(Equalizer, _Plugin);\\n\\n  function Equalizer() {\\n    _classCallCheck(this, Equalizer);\\n\\n    return _possibleConstructorReturn(this, (Equalizer.__proto__ || Object.getPrototypeOf(Equalizer)).apply(this, arguments));\\n  }\\n\\n  _createClass(Equalizer, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Equalizer.\\n     * @class\\n     * @name Equalizer\\n     * @fires Equalizer#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Equalizer.defaults, this.$element.data(), options);\\n      this.className = 'Equalizer'; // ie9 back compat\\n\\n      this._init();\\n    }\\n\\n    /**\\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var eqId = this.$element.attr('data-equalizer') || '';\\n      var $watched = this.$element.find('[data-equalizer-watch=\\\"' + eqId + '\\\"]');\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n\\n      this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\\n      this.$element.attr('data-resize', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'eq'));\\n      this.$element.attr('data-mutate', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'eq'));\\n\\n      this.hasNested = this.$element.find('[data-equalizer]').length > 0;\\n      this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\\n      this.isOn = false;\\n      this._bindHandler = {\\n        onResizeMeBound: this._onResizeMe.bind(this),\\n        onPostEqualizedBound: this._onPostEqualized.bind(this)\\n      };\\n\\n      var imgs = this.$element.find('img');\\n      var tooSmall;\\n      if (this.options.equalizeOn) {\\n        tooSmall = this._checkMQ();\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\\n      } else {\\n        this._events();\\n      }\\n      if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\\n        if (imgs.length) {\\n          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__[\\\"a\\\" /* onImagesLoaded */])(imgs, this._reflow.bind(this));\\n        } else {\\n          this._reflow();\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Removes event listeners if the breakpoint is too small.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_pauseEvents',\\n    value: function _pauseEvents() {\\n      this.isOn = false;\\n      this.$element.off({\\n        '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\\n        'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\\n        'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\\n      });\\n    }\\n\\n    /**\\n     * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_onResizeMe',\\n    value: function _onResizeMe(e) {\\n      this._reflow();\\n    }\\n\\n    /**\\n     * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_onPostEqualized',\\n    value: function _onPostEqualized(e) {\\n      if (e.target !== this.$element[0]) {\\n        this._reflow();\\n      }\\n    }\\n\\n    /**\\n     * Initializes events for Equalizer.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n      this._pauseEvents();\\n      if (this.hasNested) {\\n        this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\\n      } else {\\n        this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\\n        this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\\n      }\\n      this.isOn = true;\\n    }\\n\\n    /**\\n     * Checks the current breakpoint to the minimum required size.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_checkMQ',\\n    value: function _checkMQ() {\\n      var tooSmall = !__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].is(this.options.equalizeOn);\\n      if (tooSmall) {\\n        if (this.isOn) {\\n          this._pauseEvents();\\n          this.$watched.css('height', 'auto');\\n        }\\n      } else {\\n        if (!this.isOn) {\\n          this._events();\\n        }\\n      }\\n      return tooSmall;\\n    }\\n\\n    /**\\n     * A noop version for the plugin\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_killswitch',\\n    value: function _killswitch() {\\n      return;\\n    }\\n\\n    /**\\n     * Calls necessary functions to update Equalizer upon DOM change\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_reflow',\\n    value: function _reflow() {\\n      if (!this.options.equalizeOnStack) {\\n        if (this._isStacked()) {\\n          this.$watched.css('height', 'auto');\\n          return false;\\n        }\\n      }\\n      if (this.options.equalizeByRow) {\\n        this.getHeightsByRow(this.applyHeightByRow.bind(this));\\n      } else {\\n        this.getHeights(this.applyHeight.bind(this));\\n      }\\n    }\\n\\n    /**\\n     * Manually determines if the first 2 elements are *NOT* stacked.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_isStacked',\\n    value: function _isStacked() {\\n      if (!this.$watched[0] || !this.$watched[1]) {\\n        return true;\\n      }\\n      return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\\n    }\\n\\n    /**\\n     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\\n     * @param {Function} cb - A non-optional callback to return the heights array to.\\n     * @returns {Array} heights - An array of heights of children within Equalizer container\\n     */\\n\\n  }, {\\n    key: 'getHeights',\\n    value: function getHeights(cb) {\\n      var heights = [];\\n      for (var i = 0, len = this.$watched.length; i < len; i++) {\\n        this.$watched[i].style.height = 'auto';\\n        heights.push(this.$watched[i].offsetHeight);\\n      }\\n      cb(heights);\\n    }\\n\\n    /**\\n     * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\\n     * @param {Function} cb - A non-optional callback to return the heights array to.\\n     * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\\n     */\\n\\n  }, {\\n    key: 'getHeightsByRow',\\n    value: function getHeightsByRow(cb) {\\n      var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\\n          groups = [],\\n          group = 0;\\n      //group by Row\\n      groups[group] = [];\\n      for (var i = 0, len = this.$watched.length; i < len; i++) {\\n        this.$watched[i].style.height = 'auto';\\n        //maybe could use this.$watched[i].offsetTop\\n        var elOffsetTop = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$watched[i]).offset().top;\\n        if (elOffsetTop != lastElTopOffset) {\\n          group++;\\n          groups[group] = [];\\n          lastElTopOffset = elOffsetTop;\\n        }\\n        groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\\n      }\\n\\n      for (var j = 0, ln = groups.length; j < ln; j++) {\\n        var heights = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[j]).map(function () {\\n          return this[1];\\n        }).get();\\n        var max = Math.max.apply(null, heights);\\n        groups[j].push(max);\\n      }\\n      cb(groups);\\n    }\\n\\n    /**\\n     * Changes the CSS height property of each child in an Equalizer parent to match the tallest\\n     * @param {array} heights - An array of heights of children within Equalizer container\\n     * @fires Equalizer#preequalized\\n     * @fires Equalizer#postequalized\\n     */\\n\\n  }, {\\n    key: 'applyHeight',\\n    value: function applyHeight(heights) {\\n      var max = Math.max.apply(null, heights);\\n      /**\\n       * Fires before the heights are applied\\n       * @event Equalizer#preequalized\\n       */\\n      this.$element.trigger('preequalized.zf.equalizer');\\n\\n      this.$watched.css('height', max);\\n\\n      /**\\n       * Fires when the heights have been applied\\n       * @event Equalizer#postequalized\\n       */\\n      this.$element.trigger('postequalized.zf.equalizer');\\n    }\\n\\n    /**\\n     * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\\n     * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\\n     * @fires Equalizer#preequalized\\n     * @fires Equalizer#preequalizedrow\\n     * @fires Equalizer#postequalizedrow\\n     * @fires Equalizer#postequalized\\n     */\\n\\n  }, {\\n    key: 'applyHeightByRow',\\n    value: function applyHeightByRow(groups) {\\n      /**\\n       * Fires before the heights are applied\\n       */\\n      this.$element.trigger('preequalized.zf.equalizer');\\n      for (var i = 0, len = groups.length; i < len; i++) {\\n        var groupsILength = groups[i].length,\\n            max = groups[i][groupsILength - 1];\\n        if (groupsILength <= 2) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][0][0]).css({ 'height': 'auto' });\\n          continue;\\n        }\\n        /**\\n          * Fires before the heights per row are applied\\n          * @event Equalizer#preequalizedrow\\n          */\\n        this.$element.trigger('preequalizedrow.zf.equalizer');\\n        for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][j][0]).css({ 'height': max });\\n        }\\n        /**\\n          * Fires when the heights per row have been applied\\n          * @event Equalizer#postequalizedrow\\n          */\\n        this.$element.trigger('postequalizedrow.zf.equalizer');\\n      }\\n      /**\\n       * Fires when the heights have been applied\\n       */\\n      this.$element.trigger('postequalized.zf.equalizer');\\n    }\\n\\n    /**\\n     * Destroys an instance of Equalizer.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this._pauseEvents();\\n      this.$watched.css('height', 'auto');\\n    }\\n  }]);\\n\\n  return Equalizer;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin\\n */\\n\\n\\nEqualizer.defaults = {\\n  /**\\n   * Enable height equalization when stacked on smaller screens.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  equalizeOnStack: false,\\n  /**\\n   * Enable height equalization row by row.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  equalizeByRow: false,\\n  /**\\n   * String representing the minimum breakpoint size the plugin should equalize heights on.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  equalizeOn: ''\\n};\\n\\n\\n\\n/***/ }),\\n/* 24 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Interchange; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n/**\\n * Interchange module.\\n * @module foundation.interchange\\n * @requires foundation.util.mediaQuery\\n */\\n\\nvar Interchange = function (_Plugin) {\\n  _inherits(Interchange, _Plugin);\\n\\n  function Interchange() {\\n    _classCallCheck(this, Interchange);\\n\\n    return _possibleConstructorReturn(this, (Interchange.__proto__ || Object.getPrototypeOf(Interchange)).apply(this, arguments));\\n  }\\n\\n  _createClass(Interchange, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Interchange.\\n     * @class\\n     * @name Interchange\\n     * @fires Interchange#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Interchange.defaults, options);\\n      this.rules = [];\\n      this.currentPath = '';\\n      this.className = 'Interchange'; // ie9 back compat\\n\\n      this._init();\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n\\n      var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'interchange');\\n      this.$element.attr({\\n        'data-resize': id,\\n        'id': id\\n      });\\n\\n      this._addBreakpoints();\\n      this._generateRules();\\n      this._reflow();\\n    }\\n\\n    /**\\n     * Initializes events for Interchange.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this3 = this;\\n\\n      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {\\n        return _this3._reflow();\\n      });\\n    }\\n\\n    /**\\n     * Calls necessary functions to update Interchange upon DOM change\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_reflow',\\n    value: function _reflow() {\\n      var match;\\n\\n      // Iterate through each rule, but only save the last match\\n      for (var i in this.rules) {\\n        if (this.rules.hasOwnProperty(i)) {\\n          var rule = this.rules[i];\\n          if (window.matchMedia(rule.query).matches) {\\n            match = rule;\\n          }\\n        }\\n      }\\n\\n      if (match) {\\n        this.replace(match.path);\\n      }\\n    }\\n\\n    /**\\n     * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addBreakpoints',\\n    value: function _addBreakpoints() {\\n      for (var i in __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].queries) {\\n        if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].queries.hasOwnProperty(i)) {\\n          var query = __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].queries[i];\\n          Interchange.SPECIAL_QUERIES[query.name] = query.value;\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Checks the Interchange element for the provided media query + content pairings\\n     * @function\\n     * @private\\n     * @param {Object} element - jQuery object that is an Interchange instance\\n     * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\\n     */\\n\\n  }, {\\n    key: '_generateRules',\\n    value: function _generateRules(element) {\\n      var rulesList = [];\\n      var rules;\\n\\n      if (this.options.rules) {\\n        rules = this.options.rules;\\n      } else {\\n        rules = this.$element.data('interchange');\\n      }\\n\\n      rules = typeof rules === 'string' ? rules.match(/\\\\[.*?\\\\]/g) : rules;\\n\\n      for (var i in rules) {\\n        if (rules.hasOwnProperty(i)) {\\n          var rule = rules[i].slice(1, -1).split(', ');\\n          var path = rule.slice(0, -1).join('');\\n          var query = rule[rule.length - 1];\\n\\n          if (Interchange.SPECIAL_QUERIES[query]) {\\n            query = Interchange.SPECIAL_QUERIES[query];\\n          }\\n\\n          rulesList.push({\\n            path: path,\\n            query: query\\n          });\\n        }\\n      }\\n\\n      this.rules = rulesList;\\n    }\\n\\n    /**\\n     * Update the `src` property of an image, or change the HTML of a container, to the specified path.\\n     * @function\\n     * @param {String} path - Path to the image or HTML partial.\\n     * @fires Interchange#replaced\\n     */\\n\\n  }, {\\n    key: 'replace',\\n    value: function replace(path) {\\n      if (this.currentPath === path) return;\\n\\n      var _this = this,\\n          trigger = 'replaced.zf.interchange';\\n\\n      // Replacing images\\n      if (this.$element[0].nodeName === 'IMG') {\\n        this.$element.attr('src', path).on('load', function () {\\n          _this.currentPath = path;\\n        }).trigger(trigger);\\n      }\\n      // Replacing background images\\n      else if (path.match(/\\\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\\n          path = path.replace(/\\\\(/g, '%28').replace(/\\\\)/g, '%29');\\n          this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);\\n        }\\n        // Replacing HTML\\n        else {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.get(path, function (response) {\\n              _this.$element.html(response).trigger(trigger);\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(response).foundation();\\n              _this.currentPath = path;\\n            });\\n          }\\n\\n      /**\\n       * Fires when content in an Interchange element is done being loaded.\\n       * @event Interchange#replaced\\n       */\\n      // this.$element.trigger('replaced.zf.interchange');\\n    }\\n\\n    /**\\n     * Destroys an instance of interchange.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('resizeme.zf.trigger');\\n    }\\n  }]);\\n\\n  return Interchange;\\n}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin\\n */\\n\\n\\nInterchange.defaults = {\\n  /**\\n   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\\n   * @option\\n   * @type {?array}\\n   * @default null\\n   */\\n  rules: null\\n};\\n\\nInterchange.SPECIAL_QUERIES = {\\n  'landscape': 'screen and (orientation: landscape)',\\n  'portrait': 'screen and (orientation: portrait)',\\n  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\\n};\\n\\n\\n\\n/***/ }),\\n/* 25 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Magellan; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__ = __webpack_require__(16);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n/**\\n * Magellan module.\\n * @module foundation.magellan\\n * @requires foundation.smoothScroll\\n */\\n\\nvar Magellan = function (_Plugin) {\\n  _inherits(Magellan, _Plugin);\\n\\n  function Magellan() {\\n    _classCallCheck(this, Magellan);\\n\\n    return _possibleConstructorReturn(this, (Magellan.__proto__ || Object.getPrototypeOf(Magellan)).apply(this, arguments));\\n  }\\n\\n  _createClass(Magellan, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Magellan.\\n     * @class\\n     * @name Magellan\\n     * @fires Magellan#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Magellan.defaults, this.$element.data(), options);\\n      this.className = 'Magellan'; // ie9 back compat\\n\\n      this._init();\\n      this.calcPoints();\\n    }\\n\\n    /**\\n     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'magellan');\\n      var _this = this;\\n      this.$targets = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-magellan-target]');\\n      this.$links = this.$element.find('a');\\n      this.$element.attr({\\n        'data-resize': id,\\n        'data-scroll': id,\\n        'id': id\\n      });\\n      this.$active = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();\\n      this.scrollPos = parseInt(window.pageYOffset, 10);\\n\\n      this._events();\\n    }\\n\\n    /**\\n     * Calculates an array of pixel values that are the demarcation lines between locations on the page.\\n     * Can be invoked if new elements are added or the size of a location changes.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'calcPoints',\\n    value: function calcPoints() {\\n      var _this = this,\\n          body = document.body,\\n          html = document.documentElement;\\n\\n      this.points = [];\\n      this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));\\n      this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));\\n\\n      this.$targets.each(function () {\\n        var $tar = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            pt = Math.round($tar.offset().top - _this.options.threshold);\\n        $tar.targetPoint = pt;\\n        _this.points.push(pt);\\n      });\\n    }\\n\\n    /**\\n     * Initializes events for Magellan.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this,\\n          $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body'),\\n          opts = {\\n        duration: _this.options.animationDuration,\\n        easing: _this.options.animationEasing\\n      };\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load', function () {\\n        if (_this.options.deepLinking) {\\n          if (location.hash) {\\n            _this.scrollToLoc(location.hash);\\n          }\\n        }\\n        _this.calcPoints();\\n        _this._updateActive();\\n      });\\n\\n      this.$element.on({\\n        'resizeme.zf.trigger': this.reflow.bind(this),\\n        'scrollme.zf.trigger': this._updateActive.bind(this)\\n      }).on('click.zf.magellan', 'a[href^=\\\"#\\\"]', function (e) {\\n        e.preventDefault();\\n        var arrival = this.getAttribute('href');\\n        _this.scrollToLoc(arrival);\\n      });\\n\\n      this._deepLinkScroll = function (e) {\\n        if (_this.options.deepLinking) {\\n          _this.scrollToLoc(window.location.hash);\\n        }\\n      };\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._deepLinkScroll);\\n    }\\n\\n    /**\\n     * Function to scroll to a given location on the page.\\n     * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'scrollToLoc',\\n    value: function scrollToLoc(loc) {\\n      this._inTransition = true;\\n      var _this = this;\\n\\n      var options = {\\n        animationEasing: this.options.animationEasing,\\n        animationDuration: this.options.animationDuration,\\n        threshold: this.options.threshold,\\n        offset: this.options.offset\\n      };\\n\\n      __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__[\\\"a\\\" /* SmoothScroll */].scrollToLoc(loc, options, function () {\\n        _this._inTransition = false;\\n        _this._updateActive();\\n      });\\n    }\\n\\n    /**\\n     * Calls necessary functions to update Magellan upon DOM change\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'reflow',\\n    value: function reflow() {\\n      this.calcPoints();\\n      this._updateActive();\\n    }\\n\\n    /**\\n     * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\\n     * @private\\n     * @function\\n     * @fires Magellan#update\\n     */\\n\\n  }, {\\n    key: '_updateActive',\\n    value: function _updateActive() /*evt, elem, scrollPos*/{\\n      if (this._inTransition) {\\n        return;\\n      }\\n      var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),\\n          curIdx;\\n\\n      if (winPos + this.winHeight === this.docHeight) {\\n        curIdx = this.points.length - 1;\\n      } else if (winPos < this.points[0]) {\\n        curIdx = undefined;\\n      } else {\\n        var isDown = this.scrollPos < winPos,\\n            _this = this,\\n            curVisible = this.points.filter(function (p, i) {\\n          return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;\\n        });\\n        curIdx = curVisible.length ? curVisible.length - 1 : 0;\\n      }\\n\\n      this.$active.removeClass(this.options.activeClass);\\n      this.$active = this.$links.filter('[href=\\\"#' + this.$targets.eq(curIdx).data('magellan-target') + '\\\"]').addClass(this.options.activeClass);\\n\\n      if (this.options.deepLinking) {\\n        var hash = \\\"\\\";\\n        if (curIdx != undefined) {\\n          hash = this.$active[0].getAttribute('href');\\n        }\\n        if (hash !== window.location.hash) {\\n          if (window.history.pushState) {\\n            window.history.pushState(null, null, hash);\\n          } else {\\n            window.location.hash = hash;\\n          }\\n        }\\n      }\\n\\n      this.scrollPos = winPos;\\n      /**\\n       * Fires when magellan is finished updating to the new active element.\\n       * @event Magellan#update\\n       */\\n      this.$element.trigger('update.zf.magellan', [this.$active]);\\n    }\\n\\n    /**\\n     * Destroys an instance of Magellan and resets the url of the window.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);\\n\\n      if (this.options.deepLinking) {\\n        var hash = this.$active[0].getAttribute('href');\\n        window.location.hash.replace(hash, '');\\n      }\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._deepLinkScroll);\\n    }\\n  }]);\\n\\n  return Magellan;\\n}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\n/**\\n * Default settings for plugin\\n */\\n\\n\\nMagellan.defaults = {\\n  /**\\n   * Amount of time, in ms, the animated scrolling should take between locations.\\n   * @option\\n   * @type {number}\\n   * @default 500\\n   */\\n  animationDuration: 500,\\n  /**\\n   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.\\n   * @option\\n   * @type {string}\\n   * @default 'linear'\\n   * @see {@link https://api.jquery.com/animate|Jquery animate}\\n   */\\n  animationEasing: 'linear',\\n  /**\\n   * Number of pixels to use as a marker for location changes.\\n   * @option\\n   * @type {number}\\n   * @default 50\\n   */\\n  threshold: 50,\\n  /**\\n   * Class applied to the active locations link on the magellan container.\\n   * @option\\n   * @type {string}\\n   * @default 'is-active'\\n   */\\n  activeClass: 'is-active',\\n  /**\\n   * Allows the script to manipulate the url of the current page, and if supported, alter the history.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLinking: false,\\n  /**\\n   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  offset: 0\\n};\\n\\n\\n\\n/***/ }),\\n/* 26 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return OffCanvas; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * OffCanvas module.\\n * @module foundation.offcanvas\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.mediaQuery\\n * @requires foundation.util.triggers\\n */\\n\\nvar OffCanvas = function (_Plugin) {\\n  _inherits(OffCanvas, _Plugin);\\n\\n  function OffCanvas() {\\n    _classCallCheck(this, OffCanvas);\\n\\n    return _possibleConstructorReturn(this, (OffCanvas.__proto__ || Object.getPrototypeOf(OffCanvas)).apply(this, arguments));\\n  }\\n\\n  _createClass(OffCanvas, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of an off-canvas wrapper.\\n     * @class\\n     * @name OffCanvas\\n     * @fires OffCanvas#init\\n     * @param {Object} element - jQuery object to initialize.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      var _this3 = this;\\n\\n      this.className = 'OffCanvas'; // ie9 back compat\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, OffCanvas.defaults, this.$element.data(), options);\\n      this.contentClasses = { base: [], reveal: [] };\\n      this.$lastTrigger = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();\\n      this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();\\n      this.position = 'left';\\n      this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();\\n      this.nested = !!this.options.nested;\\n\\n      // Defines the CSS transition/position classes of the off-canvas content container.\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['push', 'overlap']).each(function (index, val) {\\n        _this3.contentClasses.base.push('has-transition-' + val);\\n      });\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['left', 'right', 'top', 'bottom']).each(function (index, val) {\\n        _this3.contentClasses.base.push('has-position-' + val);\\n        _this3.contentClasses.reveal.push('has-reveal-' + val);\\n      });\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n\\n      this._init();\\n      this._events();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('OffCanvas', {\\n        'ESCAPE': 'close'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var id = this.$element.attr('id');\\n\\n      this.$element.attr('aria-hidden', 'true');\\n\\n      // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)\\n      if (this.options.contentId) {\\n        this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.options.contentId);\\n      } else if (this.$element.siblings('[data-off-canvas-content]').length) {\\n        this.$content = this.$element.siblings('[data-off-canvas-content]').first();\\n      } else {\\n        this.$content = this.$element.closest('[data-off-canvas-content]').first();\\n      }\\n\\n      if (!this.options.contentId) {\\n        // Assume that the off-canvas element is nested if it isn't a sibling of the content\\n        this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;\\n      } else if (this.options.contentId && this.options.nested === null) {\\n        // Warning if using content ID without setting the nested option\\n        // Once the element is nested it is required to work properly in this case\\n        console.warn('Remember to use the nested option if using the content ID option!');\\n      }\\n\\n      if (this.nested === true) {\\n        // Force transition overlap if nested\\n        this.options.transition = 'overlap';\\n        // Remove appropriate classes if already assigned in markup\\n        this.$element.removeClass('is-transition-push');\\n      }\\n\\n      this.$element.addClass('is-transition-' + this.options.transition + ' is-closed');\\n\\n      // Find triggers that affect this element and add aria-expanded to them\\n      this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document).find('[data-open=\\\"' + id + '\\\"], [data-close=\\\"' + id + '\\\"], [data-toggle=\\\"' + id + '\\\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\\n\\n      // Get position by checking for related CSS class\\n      this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\\\\-(left|top|right|bottom)/)[1] : this.position;\\n\\n      // Add an overlay over the content if necessary\\n      if (this.options.contentOverlay === true) {\\n        var overlay = document.createElement('div');\\n        var overlayPosition = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$element).css(\\\"position\\\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\\n        overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\\n        this.$overlay = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(overlay);\\n        if (overlayPosition === 'is-overlay-fixed') {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$overlay).insertAfter(this.$element);\\n        } else {\\n          this.$content.append(this.$overlay);\\n        }\\n      }\\n\\n      this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\\n\\n      if (this.options.isRevealed === true) {\\n        this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\\n        this._setMQChecker();\\n      }\\n\\n      if (this.options.transitionTime) {\\n        this.$element.css('transition-duration', this.options.transitionTime);\\n      }\\n\\n      // Initally remove all transition/position CSS classes from off-canvas content container.\\n      this._removeContentClasses();\\n    }\\n\\n    /**\\n     * Adds event handlers to the off-canvas wrapper and the exit overlay.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      this.$element.off('.zf.trigger .zf.offcanvas').on({\\n        'open.zf.trigger': this.open.bind(this),\\n        'close.zf.trigger': this.close.bind(this),\\n        'toggle.zf.trigger': this.toggle.bind(this),\\n        'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\\n      });\\n\\n      if (this.options.closeOnClick === true) {\\n        var $target = this.options.contentOverlay ? this.$overlay : this.$content;\\n        $target.on({ 'click.zf.offcanvas': this.close.bind(this) });\\n      }\\n    }\\n\\n    /**\\n     * Applies event listener for elements that will reveal at certain breakpoints.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setMQChecker',\\n    value: function _setMQChecker() {\\n      var _this = this;\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {\\n        if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(_this.options.revealOn)) {\\n          _this.reveal(true);\\n        } else {\\n          _this.reveal(false);\\n        }\\n      }).one('load.zf.offcanvas', function () {\\n        if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(_this.options.revealOn)) {\\n          _this.reveal(true);\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Removes the CSS transition/position classes of the off-canvas content container.\\n     * Removing the classes is important when another off-canvas gets opened that uses the same content container.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_removeContentClasses',\\n    value: function _removeContentClasses(hasReveal) {\\n      this.$content.removeClass(this.contentClasses.base.join(' '));\\n      if (hasReveal === true) {\\n        this.$content.removeClass(this.contentClasses.reveal.join(' '));\\n      }\\n    }\\n\\n    /**\\n     * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.\\n     * Beforehand any transition/position class gets removed.\\n     * @param {Boolean} hasReveal - true if related off-canvas element is revealed.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_addContentClasses',\\n    value: function _addContentClasses(hasReveal) {\\n      this._removeContentClasses();\\n      this.$content.addClass('has-transition-' + this.options.transition + ' has-position-' + this.position);\\n      if (hasReveal === true) {\\n        this.$content.addClass('has-reveal-' + this.position);\\n      }\\n    }\\n\\n    /**\\n     * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\\n     * @param {Boolean} isRevealed - true if element should be revealed.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'reveal',\\n    value: function reveal(isRevealed) {\\n      if (isRevealed) {\\n        this.close();\\n        this.isRevealed = true;\\n        this.$element.attr('aria-hidden', 'false');\\n        this.$element.off('open.zf.trigger toggle.zf.trigger');\\n        this.$element.removeClass('is-closed');\\n      } else {\\n        this.isRevealed = false;\\n        this.$element.attr('aria-hidden', 'true');\\n        this.$element.off('open.zf.trigger toggle.zf.trigger').on({\\n          'open.zf.trigger': this.open.bind(this),\\n          'toggle.zf.trigger': this.toggle.bind(this)\\n        });\\n        this.$element.addClass('is-closed');\\n      }\\n      this._addContentClasses(isRevealed);\\n    }\\n\\n    /**\\n     * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_stopScrolling',\\n    value: function _stopScrolling(event) {\\n      return false;\\n    }\\n\\n    // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios\\n    // Only really works for y, not sure how to extend to x or if we need to.\\n\\n  }, {\\n    key: '_recordScrollable',\\n    value: function _recordScrollable(event) {\\n      var elem = this; // called from event handler context with this as elem\\n\\n      // If the element is scrollable (content overflows), then...\\n      if (elem.scrollHeight !== elem.clientHeight) {\\n        // If we're at the top, scroll down one pixel to allow scrolling up\\n        if (elem.scrollTop === 0) {\\n          elem.scrollTop = 1;\\n        }\\n        // If we're at the bottom, scroll up one pixel to allow scrolling down\\n        if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {\\n          elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;\\n        }\\n      }\\n      elem.allowUp = elem.scrollTop > 0;\\n      elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;\\n      elem.lastY = event.originalEvent.pageY;\\n    }\\n  }, {\\n    key: '_stopScrollPropagation',\\n    value: function _stopScrollPropagation(event) {\\n      var elem = this; // called from event handler context with this as elem\\n      var up = event.pageY < elem.lastY;\\n      var down = !up;\\n      elem.lastY = event.pageY;\\n\\n      if (up && elem.allowUp || down && elem.allowDown) {\\n        event.stopPropagation();\\n      } else {\\n        event.preventDefault();\\n      }\\n    }\\n\\n    /**\\n     * Opens the off-canvas menu.\\n     * @function\\n     * @param {Object} event - Event object passed from listener.\\n     * @param {jQuery} trigger - element that triggered the off-canvas to open.\\n     * @fires OffCanvas#opened\\n     */\\n\\n  }, {\\n    key: 'open',\\n    value: function open(event, trigger) {\\n      if (this.$element.hasClass('is-open') || this.isRevealed) {\\n        return;\\n      }\\n      var _this = this;\\n\\n      if (trigger) {\\n        this.$lastTrigger = trigger;\\n      }\\n\\n      if (this.options.forceTo === 'top') {\\n        window.scrollTo(0, 0);\\n      } else if (this.options.forceTo === 'bottom') {\\n        window.scrollTo(0, document.body.scrollHeight);\\n      }\\n\\n      if (this.options.transitionTime && this.options.transition !== 'overlap') {\\n        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);\\n      } else {\\n        this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');\\n      }\\n\\n      /**\\n       * Fires when the off-canvas menu opens.\\n       * @event OffCanvas#opened\\n       */\\n      this.$element.addClass('is-open').removeClass('is-closed');\\n\\n      this.$triggers.attr('aria-expanded', 'true');\\n      this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\\n\\n      this.$content.addClass('is-open-' + this.position);\\n\\n      // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\\n      if (this.options.contentScroll === false) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\\n        this.$element.on('touchstart', this._recordScrollable);\\n        this.$element.on('touchmove', this._stopScrollPropagation);\\n      }\\n\\n      if (this.options.contentOverlay === true) {\\n        this.$overlay.addClass('is-visible');\\n      }\\n\\n      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\\n        this.$overlay.addClass('is-closable');\\n      }\\n\\n      if (this.options.autoFocus === true) {\\n        this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])(this.$element), function () {\\n          if (!_this.$element.hasClass('is-open')) {\\n            return; // exit if prematurely closed\\n          }\\n          var canvasFocus = _this.$element.find('[data-autofocus]');\\n          if (canvasFocus.length) {\\n            canvasFocus.eq(0).focus();\\n          } else {\\n            _this.$element.find('a, button').eq(0).focus();\\n          }\\n        });\\n      }\\n\\n      if (this.options.trapFocus === true) {\\n        this.$content.attr('tabindex', '-1');\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].trapFocus(this.$element);\\n      }\\n\\n      this._addContentClasses();\\n    }\\n\\n    /**\\n     * Closes the off-canvas menu.\\n     * @function\\n     * @param {Function} cb - optional cb to fire after closure.\\n     * @fires OffCanvas#closed\\n     */\\n\\n  }, {\\n    key: 'close',\\n    value: function close(cb) {\\n      if (!this.$element.hasClass('is-open') || this.isRevealed) {\\n        return;\\n      }\\n\\n      var _this = this;\\n\\n      this.$element.removeClass('is-open');\\n\\n      this.$element.attr('aria-hidden', 'true')\\n      /**\\n       * Fires when the off-canvas menu opens.\\n       * @event OffCanvas#closed\\n       */\\n      .trigger('closed.zf.offcanvas');\\n\\n      this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');\\n\\n      // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\\n      if (this.options.contentScroll === false) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\\n        this.$element.off('touchstart', this._recordScrollable);\\n        this.$element.off('touchmove', this._stopScrollPropagation);\\n      }\\n\\n      if (this.options.contentOverlay === true) {\\n        this.$overlay.removeClass('is-visible');\\n      }\\n\\n      if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\\n        this.$overlay.removeClass('is-closable');\\n      }\\n\\n      this.$triggers.attr('aria-expanded', 'false');\\n\\n      if (this.options.trapFocus === true) {\\n        this.$content.removeAttr('tabindex');\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].releaseFocus(this.$element);\\n      }\\n\\n      // Listen to transitionEnd and add class when done.\\n      this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"c\\\" /* transitionend */])(this.$element), function (e) {\\n        _this.$element.addClass('is-closed');\\n        _this._removeContentClasses();\\n      });\\n    }\\n\\n    /**\\n     * Toggles the off-canvas menu open or closed.\\n     * @function\\n     * @param {Object} event - Event object passed from listener.\\n     * @param {jQuery} trigger - element that triggered the off-canvas to open.\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle(event, trigger) {\\n      if (this.$element.hasClass('is-open')) {\\n        this.close(event, trigger);\\n      } else {\\n        this.open(event, trigger);\\n      }\\n    }\\n\\n    /**\\n     * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_handleKeyboard',\\n    value: function _handleKeyboard(e) {\\n      var _this4 = this;\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'OffCanvas', {\\n        close: function () {\\n          _this4.close();\\n          _this4.$lastTrigger.focus();\\n          return true;\\n        },\\n        handled: function () {\\n          e.stopPropagation();\\n          e.preventDefault();\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Destroys the offcanvas plugin.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.close();\\n      this.$element.off('.zf.trigger .zf.offcanvas');\\n      this.$overlay.off('.zf.offcanvas');\\n    }\\n  }]);\\n\\n  return OffCanvas;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nOffCanvas.defaults = {\\n  /**\\n   * Allow the user to click outside of the menu to close it.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  closeOnClick: true,\\n\\n  /**\\n   * Adds an overlay on top of `[data-off-canvas-content]`.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  contentOverlay: true,\\n\\n  /**\\n   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.\\n   * @option\\n   * @type {?string}\\n   * @default null\\n   */\\n  contentId: null,\\n\\n  /**\\n   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.\\n   * @option\\n   * @type {boolean}\\n   * @default null\\n   */\\n  nested: null,\\n\\n  /**\\n   * Enable/disable scrolling of the main content when an off canvas panel is open.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  contentScroll: true,\\n\\n  /**\\n   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\\n   * @option\\n   * @type {number}\\n   * @default null\\n   */\\n  transitionTime: null,\\n\\n  /**\\n   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\\n   * @option\\n   * @type {string}\\n   * @default push\\n   */\\n  transition: 'push',\\n\\n  /**\\n   * Force the page to scroll to top or bottom on open.\\n   * @option\\n   * @type {?string}\\n   * @default null\\n   */\\n  forceTo: null,\\n\\n  /**\\n   * Allow the offcanvas to remain open for certain breakpoints.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  isRevealed: false,\\n\\n  /**\\n   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\\n   * @option\\n   * @type {?string}\\n   * @default null\\n   */\\n  revealOn: null,\\n\\n  /**\\n   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  autoFocus: true,\\n\\n  /**\\n   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\\n   * @option\\n   * @type {string}\\n   * @default reveal-for-\\n   * @todo improve the regex testing for this.\\n   */\\n  revealClass: 'reveal-for-',\\n\\n  /**\\n   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  trapFocus: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 27 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Orbit; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__ = __webpack_require__(18);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__ = __webpack_require__(8);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__ = __webpack_require__(10);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Orbit module.\\n * @module foundation.orbit\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.motion\\n * @requires foundation.util.timer\\n * @requires foundation.util.imageLoader\\n * @requires foundation.util.touch\\n */\\n\\nvar Orbit = function (_Plugin) {\\n  _inherits(Orbit, _Plugin);\\n\\n  function Orbit() {\\n    _classCallCheck(this, Orbit);\\n\\n    return _possibleConstructorReturn(this, (Orbit.__proto__ || Object.getPrototypeOf(Orbit)).apply(this, arguments));\\n  }\\n\\n  _createClass(Orbit, [{\\n    key: '_setup',\\n\\n    /**\\n    * Creates a new instance of an orbit carousel.\\n    * @class\\n    * @name Orbit\\n    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\\n    * @param {Object} options - Overrides to the default plugin settings.\\n    */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Orbit.defaults, this.$element.data(), options);\\n      this.className = 'Orbit'; // ie9 back compat\\n\\n      __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__[\\\"a\\\" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a); // Touch init is idempotent, we just need to make sure it's initialied.\\n\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Orbit', {\\n        'ltr': {\\n          'ARROW_RIGHT': 'next',\\n          'ARROW_LEFT': 'previous'\\n        },\\n        'rtl': {\\n          'ARROW_LEFT': 'next',\\n          'ARROW_RIGHT': 'previous'\\n        }\\n      });\\n    }\\n\\n    /**\\n    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\\n    * @function\\n    * @private\\n    */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide\\n      this._reset();\\n\\n      this.$wrapper = this.$element.find('.' + this.options.containerClass);\\n      this.$slides = this.$element.find('.' + this.options.slideClass);\\n\\n      var $images = this.$element.find('img'),\\n          initActive = this.$slides.filter('.is-active'),\\n          id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'orbit');\\n\\n      this.$element.attr({\\n        'data-resize': id,\\n        'id': id\\n      });\\n\\n      if (!initActive.length) {\\n        this.$slides.eq(0).addClass('is-active');\\n      }\\n\\n      if (!this.options.useMUI) {\\n        this.$slides.addClass('no-motionui');\\n      }\\n\\n      if ($images.length) {\\n        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__[\\\"a\\\" /* onImagesLoaded */])($images, this._prepareForOrbit.bind(this));\\n      } else {\\n        this._prepareForOrbit(); //hehe\\n      }\\n\\n      if (this.options.bullets) {\\n        this._loadBullets();\\n      }\\n\\n      this._events();\\n\\n      if (this.options.autoPlay && this.$slides.length > 1) {\\n        this.geoSync();\\n      }\\n\\n      if (this.options.accessible) {\\n        // allow wrapper to be focusable to enable arrow navigation\\n        this.$wrapper.attr('tabindex', 0);\\n      }\\n    }\\n\\n    /**\\n    * Creates a jQuery collection of bullets, if they are being used.\\n    * @function\\n    * @private\\n    */\\n\\n  }, {\\n    key: '_loadBullets',\\n    value: function _loadBullets() {\\n      this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');\\n    }\\n\\n    /**\\n    * Sets a `timer` object on the orbit, and starts the counter for the next slide.\\n    * @function\\n    */\\n\\n  }, {\\n    key: 'geoSync',\\n    value: function geoSync() {\\n      var _this = this;\\n      this.timer = new __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__[\\\"a\\\" /* Timer */](this.$element, {\\n        duration: this.options.timerDelay,\\n        infinite: false\\n      }, function () {\\n        _this.changeSlide(true);\\n      });\\n      this.timer.start();\\n    }\\n\\n    /**\\n    * Sets wrapper and slide heights for the orbit.\\n    * @function\\n    * @private\\n    */\\n\\n  }, {\\n    key: '_prepareForOrbit',\\n    value: function _prepareForOrbit() {\\n      var _this = this;\\n      this._setWrapperHeight();\\n    }\\n\\n    /**\\n    * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\\n    * @function\\n    * @private\\n    * @param {Function} cb - a callback function to fire when complete.\\n    */\\n\\n  }, {\\n    key: '_setWrapperHeight',\\n    value: function _setWrapperHeight(cb) {\\n      //rewrite this to `for` loop\\n      var max = 0,\\n          temp,\\n          counter = 0,\\n          _this = this;\\n\\n      this.$slides.each(function () {\\n        temp = this.getBoundingClientRect().height;\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('data-slide', counter);\\n\\n        if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {\\n          //if not the active slide, set css position and display property\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css({ 'position': 'relative', 'display': 'none' });\\n        }\\n        max = temp > max ? temp : max;\\n        counter++;\\n      });\\n\\n      if (counter === this.$slides.length) {\\n        this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.\\n        if (cb) {\\n          cb(max);\\n        } //fire callback with max height dimension.\\n      }\\n    }\\n\\n    /**\\n    * Sets the max-height of each slide.\\n    * @function\\n    * @private\\n    */\\n\\n  }, {\\n    key: '_setSlideHeight',\\n    value: function _setSlideHeight(height) {\\n      this.$slides.each(function () {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css('max-height', height);\\n      });\\n    }\\n\\n    /**\\n    * Adds event listeners to basically everything within the element.\\n    * @function\\n    * @private\\n    */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      //***************************************\\n      //**Now using custom event - thanks to:**\\n      //**      Yohai Ararat of Toronto      **\\n      //***************************************\\n      //\\n      this.$element.off('.resizeme.zf.trigger').on({\\n        'resizeme.zf.trigger': this._prepareForOrbit.bind(this)\\n      });\\n      if (this.$slides.length > 1) {\\n\\n        if (this.options.swipe) {\\n          this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {\\n            e.preventDefault();\\n            _this.changeSlide(true);\\n          }).on('swiperight.zf.orbit', function (e) {\\n            e.preventDefault();\\n            _this.changeSlide(false);\\n          });\\n        }\\n        //***************************************\\n\\n        if (this.options.autoPlay) {\\n          this.$slides.on('click.zf.orbit', function () {\\n            _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);\\n            _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();\\n          });\\n\\n          if (this.options.pauseOnHover) {\\n            this.$element.on('mouseenter.zf.orbit', function () {\\n              _this.timer.pause();\\n            }).on('mouseleave.zf.orbit', function () {\\n              if (!_this.$element.data('clickedOn')) {\\n                _this.timer.start();\\n              }\\n            });\\n          }\\n        }\\n\\n        if (this.options.navButtons) {\\n          var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);\\n          $controls.attr('tabindex', 0)\\n          //also need to handle enter/return and spacebar key presses\\n          .on('click.zf.orbit touchend.zf.orbit', function (e) {\\n            e.preventDefault();\\n            _this.changeSlide(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass(_this.options.nextClass));\\n          });\\n        }\\n\\n        if (this.options.bullets) {\\n          this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {\\n            if (/is-active/g.test(this.className)) {\\n              return false;\\n            } //if this is active, kick out of function.\\n            var idx = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('slide'),\\n                ltr = idx > _this.$slides.filter('.is-active').data('slide'),\\n                $slide = _this.$slides.eq(idx);\\n\\n            _this.changeSlide(ltr, $slide, idx);\\n          });\\n        }\\n\\n        if (this.options.accessible) {\\n          this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {\\n            // handle keyboard event with keyboard util\\n            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Orbit', {\\n              next: function () {\\n                _this.changeSlide(true);\\n              },\\n              previous: function () {\\n                _this.changeSlide(false);\\n              },\\n              handled: function () {\\n                // if bullet is focused, make sure focus moves\\n                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is(_this.$bullets)) {\\n                  _this.$bullets.filter('.is-active').focus();\\n                }\\n              }\\n            });\\n          });\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Resets Orbit so it can be reinitialized\\n     */\\n\\n  }, {\\n    key: '_reset',\\n    value: function _reset() {\\n      // Don't do anything if there are no slides (first run)\\n      if (typeof this.$slides == 'undefined') {\\n        return;\\n      }\\n\\n      if (this.$slides.length > 1) {\\n        // Remove old events\\n        this.$element.off('.zf.orbit').find('*').off('.zf.orbit');\\n\\n        // Restart timer if autoPlay is enabled\\n        if (this.options.autoPlay) {\\n          this.timer.restart();\\n        }\\n\\n        // Reset all sliddes\\n        this.$slides.each(function (el) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();\\n        });\\n\\n        // Show the first slide\\n        this.$slides.first().addClass('is-active').show();\\n\\n        // Triggers when the slide has finished animating\\n        this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);\\n\\n        // Select first bullet if bullets are present\\n        if (this.options.bullets) {\\n          this._updateBullets(0);\\n        }\\n      }\\n    }\\n\\n    /**\\n    * Changes the current slide to a new one.\\n    * @function\\n    * @param {Boolean} isLTR - flag if the slide should move left to right.\\n    * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\\n    * @param {Number} idx - the index of the new slide in its collection, if one chosen.\\n    * @fires Orbit#slidechange\\n    */\\n\\n  }, {\\n    key: 'changeSlide',\\n    value: function changeSlide(isLTR, chosenSlide, idx) {\\n      if (!this.$slides) {\\n        return;\\n      } // Don't freak out if we're in the middle of cleanup\\n      var $curSlide = this.$slides.filter('.is-active').eq(0);\\n\\n      if (/mui/g.test($curSlide[0].className)) {\\n        return false;\\n      } //if the slide is currently animating, kick out of the function\\n\\n      var $firstSlide = this.$slides.first(),\\n          $lastSlide = this.$slides.last(),\\n          dirIn = isLTR ? 'Right' : 'Left',\\n          dirOut = isLTR ? 'Left' : 'Right',\\n          _this = this,\\n          $newSlide;\\n\\n      if (!chosenSlide) {\\n        //most of the time, this will be auto played or clicked from the navButtons.\\n        $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\\n        this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right\\n        this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left\\n      } else {\\n        $newSlide = chosenSlide;\\n      }\\n\\n      if ($newSlide.length) {\\n        /**\\n        * Triggers before the next slide starts animating in and only if a next slide has been found.\\n        * @event Orbit#beforeslidechange\\n        */\\n        this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);\\n\\n        if (this.options.bullets) {\\n          idx = idx || this.$slides.index($newSlide); //grab index to update bullets\\n          this._updateBullets(idx);\\n        }\\n\\n        if (this.options.useMUI && !this.$element.is(':hidden')) {\\n          __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__[\\\"a\\\" /* Motion */].animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {\\n            $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');\\n          });\\n\\n          __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {\\n            $curSlide.removeAttr('aria-live');\\n            if (_this.options.autoPlay && !_this.timer.isPaused) {\\n              _this.timer.restart();\\n            }\\n            //do stuff?\\n          });\\n        } else {\\n          $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();\\n          $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();\\n          if (this.options.autoPlay && !this.timer.isPaused) {\\n            this.timer.restart();\\n          }\\n        }\\n        /**\\n        * Triggers when the slide has finished animating in.\\n        * @event Orbit#slidechange\\n        */\\n        this.$element.trigger('slidechange.zf.orbit', [$newSlide]);\\n      }\\n    }\\n\\n    /**\\n    * Updates the active state of the bullets, if displayed.\\n    * @function\\n    * @private\\n    * @param {Number} idx - the index of the current slide.\\n    */\\n\\n  }, {\\n    key: '_updateBullets',\\n    value: function _updateBullets(idx) {\\n      var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),\\n          span = $oldBullet.find('span:last').detach(),\\n          $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);\\n    }\\n\\n    /**\\n    * Destroys the carousel and hides the element.\\n    * @function\\n    */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();\\n    }\\n  }]);\\n\\n  return Orbit;\\n}(__WEBPACK_IMPORTED_MODULE_6__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nOrbit.defaults = {\\n  /**\\n  * Tells the JS to look for and loadBullets.\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  bullets: true,\\n  /**\\n  * Tells the JS to apply event listeners to nav buttons\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  navButtons: true,\\n  /**\\n  * motion-ui animation class to apply\\n  * @option\\n   * @type {string}\\n  * @default 'slide-in-right'\\n  */\\n  animInFromRight: 'slide-in-right',\\n  /**\\n  * motion-ui animation class to apply\\n  * @option\\n   * @type {string}\\n  * @default 'slide-out-right'\\n  */\\n  animOutToRight: 'slide-out-right',\\n  /**\\n  * motion-ui animation class to apply\\n  * @option\\n   * @type {string}\\n  * @default 'slide-in-left'\\n  *\\n  */\\n  animInFromLeft: 'slide-in-left',\\n  /**\\n  * motion-ui animation class to apply\\n  * @option\\n   * @type {string}\\n  * @default 'slide-out-left'\\n  */\\n  animOutToLeft: 'slide-out-left',\\n  /**\\n  * Allows Orbit to automatically animate on page load.\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  autoPlay: true,\\n  /**\\n  * Amount of time, in ms, between slide transitions\\n  * @option\\n   * @type {number}\\n  * @default 5000\\n  */\\n  timerDelay: 5000,\\n  /**\\n  * Allows Orbit to infinitely loop through the slides\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  infiniteWrap: true,\\n  /**\\n  * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  swipe: true,\\n  /**\\n  * Allows the timing function to pause animation on hover.\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  pauseOnHover: true,\\n  /**\\n  * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  accessible: true,\\n  /**\\n  * Class applied to the container of Orbit\\n  * @option\\n   * @type {string}\\n  * @default 'orbit-container'\\n  */\\n  containerClass: 'orbit-container',\\n  /**\\n  * Class applied to individual slides.\\n  * @option\\n   * @type {string}\\n  * @default 'orbit-slide'\\n  */\\n  slideClass: 'orbit-slide',\\n  /**\\n  * Class applied to the bullet container. You're welcome.\\n  * @option\\n   * @type {string}\\n  * @default 'orbit-bullets'\\n  */\\n  boxOfBullets: 'orbit-bullets',\\n  /**\\n  * Class applied to the `next` navigation button.\\n  * @option\\n   * @type {string}\\n  * @default 'orbit-next'\\n  */\\n  nextClass: 'orbit-next',\\n  /**\\n  * Class applied to the `previous` navigation button.\\n  * @option\\n   * @type {string}\\n  * @default 'orbit-previous'\\n  */\\n  prevClass: 'orbit-previous',\\n  /**\\n  * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\\n  * @option\\n   * @type {boolean}\\n  * @default true\\n  */\\n  useMUI: true\\n};\\n\\n\\n\\n/***/ }),\\n/* 28 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return ResponsiveAccordionTabs; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__ = __webpack_require__(11);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__ = __webpack_require__(17);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// The plugin matches the plugin classes with these plugin instances.\\nvar MenuPlugins = {\\n  tabs: {\\n    cssClass: 'tabs',\\n    plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__[\\\"a\\\" /* Tabs */]\\n  },\\n  accordion: {\\n    cssClass: 'accordion',\\n    plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__[\\\"a\\\" /* Accordion */]\\n  }\\n};\\n\\n/**\\n * ResponsiveAccordionTabs module.\\n * @module foundation.responsiveAccordionTabs\\n * @requires foundation.util.motion\\n * @requires foundation.accordion\\n * @requires foundation.tabs\\n */\\n\\nvar ResponsiveAccordionTabs = function (_Plugin) {\\n  _inherits(ResponsiveAccordionTabs, _Plugin);\\n\\n  function ResponsiveAccordionTabs() {\\n    _classCallCheck(this, ResponsiveAccordionTabs);\\n\\n    return _possibleConstructorReturn(this, (ResponsiveAccordionTabs.__proto__ || Object.getPrototypeOf(ResponsiveAccordionTabs)).apply(this, arguments));\\n  }\\n\\n  _createClass(ResponsiveAccordionTabs, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a responsive accordion tabs.\\n     * @class\\n     * @name ResponsiveAccordionTabs\\n     * @fires ResponsiveAccordionTabs#init\\n     * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.$element.data(), options);\\n      this.rules = this.$element.data('responsive-accordion-tabs');\\n      this.currentMq = null;\\n      this.currentPlugin = null;\\n      this.className = 'ResponsiveAccordionTabs'; // ie9 back compat\\n      if (!this.$element.attr('id')) {\\n        this.$element.attr('id', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'responsiveaccordiontabs'));\\n      };\\n\\n      this._init();\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n\\n      // The first time an Interchange plugin is initialized, this.rules is converted from a string of \\\"classes\\\" to an object of rules\\n      if (typeof this.rules === 'string') {\\n        var rulesTree = {};\\n\\n        // Parse rules from \\\"classes\\\" pulled from data attribute\\n        var rules = this.rules.split(' ');\\n\\n        // Iterate through every rule found\\n        for (var i = 0; i < rules.length; i++) {\\n          var rule = rules[i].split('-');\\n          var ruleSize = rule.length > 1 ? rule[0] : 'small';\\n          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\\n\\n          if (MenuPlugins[rulePlugin] !== null) {\\n            rulesTree[ruleSize] = MenuPlugins[rulePlugin];\\n          }\\n        }\\n\\n        this.rules = rulesTree;\\n      }\\n\\n      this._getAllOptions();\\n\\n      if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {\\n        this._checkMediaQueries();\\n      }\\n    }\\n  }, {\\n    key: '_getAllOptions',\\n    value: function _getAllOptions() {\\n      //get all defaults and options\\n      var _this = this;\\n      _this.allOptions = {};\\n      for (var key in MenuPlugins) {\\n        if (MenuPlugins.hasOwnProperty(key)) {\\n          var obj = MenuPlugins[key];\\n          try {\\n            var dummyPlugin = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<ul></ul>');\\n            var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);\\n            for (var keyKey in tmpPlugin.options) {\\n              if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {\\n                var objObj = tmpPlugin.options[keyKey];\\n                _this.allOptions[keyKey] = objObj;\\n              }\\n            }\\n            tmpPlugin.destroy();\\n          } catch (e) {}\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Initializes events for the Menu.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {\\n        _this._checkMediaQueries();\\n      });\\n    }\\n\\n    /**\\n     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_checkMediaQueries',\\n    value: function _checkMediaQueries() {\\n      var matchedMq,\\n          _this = this;\\n      // Iterate through each rule and find the last matching rule\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {\\n        if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(key)) {\\n          matchedMq = key;\\n        }\\n      });\\n\\n      // No match? No dice\\n      if (!matchedMq) return;\\n\\n      // Plugin already initialized? We good\\n      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\\n\\n      // Remove existing plugin-specific CSS classes\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {\\n        _this.$element.removeClass(value.cssClass);\\n      });\\n\\n      // Add the CSS class for the new plugin\\n      this.$element.addClass(this.rules[matchedMq].cssClass);\\n\\n      // Create an instance of the new plugin\\n      if (this.currentPlugin) {\\n        //don't know why but on nested elements data zfPlugin get's lost\\n        if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);\\n        this.currentPlugin.destroy();\\n      }\\n      this._handleMarkup(this.rules[matchedMq].cssClass);\\n      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\\n      this.storezfData = this.currentPlugin.$element.data('zfPlugin');\\n    }\\n  }, {\\n    key: '_handleMarkup',\\n    value: function _handleMarkup(toSet) {\\n      var _this = this,\\n          fromString = 'accordion';\\n      var $panels = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + this.$element.attr('id') + ']');\\n      if ($panels.length) fromString = 'tabs';\\n      if (fromString === toSet) {\\n        return;\\n      };\\n\\n      var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';\\n      var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';\\n\\n      this.$element.removeAttr('role');\\n      var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');\\n      var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');\\n\\n      if (fromString === 'tabs') {\\n        $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');\\n        $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');\\n      } else {\\n        $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');\\n      };\\n\\n      $panels.css({ display: '', visibility: '' });\\n      $liHeads.css({ display: '', visibility: '' });\\n      if (toSet === 'accordion') {\\n        $panels.each(function (key, value) {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id=\\\"tabs-placeholder-' + _this.$element.attr('id') + '\\\"></div>').detach();\\n          $liHeads.addClass('accordion-item').attr('data-accordion-item', '');\\n          $liHeadsA.addClass('accordion-title');\\n        });\\n      } else if (toSet === 'tabs') {\\n        var $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']');\\n        var $placeholder = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#tabs-placeholder-' + _this.$element.attr('id'));\\n        if ($placeholder.length) {\\n          $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class=\\\"tabs-content\\\"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));\\n          $placeholder.remove();\\n        } else {\\n          $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class=\\\"tabs-content\\\"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));\\n        };\\n        $panels.each(function (key, value) {\\n          var tempValue = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($tabsContent).addClass(tabsPanel);\\n          var hash = $liHeadsA.get(key).hash.slice(1);\\n          var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'accordion');\\n          if (hash !== id) {\\n            if (hash !== '') {\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);\\n            } else {\\n              hash = id;\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);\\n              __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href', __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);\\n            };\\n          };\\n          var isActive = __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeads.get(key)).hasClass('is-active');\\n          if (isActive) {\\n            tempValue.addClass('is-active');\\n          };\\n        });\\n        $liHeads.addClass(tabsTitle);\\n      };\\n    }\\n\\n    /**\\n     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      if (this.currentPlugin) this.currentPlugin.destroy();\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveAccordionTabs');\\n    }\\n  }]);\\n\\n  return ResponsiveAccordionTabs;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nResponsiveAccordionTabs.defaults = {};\\n\\n\\n\\n/***/ }),\\n/* 29 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return ResponsiveMenu; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__ = __webpack_require__(14);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__ = __webpack_require__(13);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__ = __webpack_require__(12);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar MenuPlugins = {\\n  dropdown: {\\n    cssClass: 'dropdown',\\n    plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__[\\\"a\\\" /* DropdownMenu */]\\n  },\\n  drilldown: {\\n    cssClass: 'drilldown',\\n    plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__[\\\"a\\\" /* Drilldown */]\\n  },\\n  accordion: {\\n    cssClass: 'accordion-menu',\\n    plugin: __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__[\\\"a\\\" /* AccordionMenu */]\\n  }\\n};\\n\\n// import \\\"foundation.util.triggers.js\\\";\\n\\n\\n/**\\n * ResponsiveMenu module.\\n * @module foundation.responsiveMenu\\n * @requires foundation.util.triggers\\n * @requires foundation.util.mediaQuery\\n */\\n\\nvar ResponsiveMenu = function (_Plugin) {\\n  _inherits(ResponsiveMenu, _Plugin);\\n\\n  function ResponsiveMenu() {\\n    _classCallCheck(this, ResponsiveMenu);\\n\\n    return _possibleConstructorReturn(this, (ResponsiveMenu.__proto__ || Object.getPrototypeOf(ResponsiveMenu)).apply(this, arguments));\\n  }\\n\\n  _createClass(ResponsiveMenu, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a responsive menu.\\n     * @class\\n     * @name ResponsiveMenu\\n     * @fires ResponsiveMenu#init\\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);\\n      this.rules = this.$element.data('responsive-menu');\\n      this.currentMq = null;\\n      this.currentPlugin = null;\\n      this.className = 'ResponsiveMenu'; // ie9 back compat\\n\\n      this._init();\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n      // The first time an Interchange plugin is initialized, this.rules is converted from a string of \\\"classes\\\" to an object of rules\\n      if (typeof this.rules === 'string') {\\n        var rulesTree = {};\\n\\n        // Parse rules from \\\"classes\\\" pulled from data attribute\\n        var rules = this.rules.split(' ');\\n\\n        // Iterate through every rule found\\n        for (var i = 0; i < rules.length; i++) {\\n          var rule = rules[i].split('-');\\n          var ruleSize = rule.length > 1 ? rule[0] : 'small';\\n          var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\\n\\n          if (MenuPlugins[rulePlugin] !== null) {\\n            rulesTree[ruleSize] = MenuPlugins[rulePlugin];\\n          }\\n        }\\n\\n        this.rules = rulesTree;\\n      }\\n\\n      if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {\\n        this._checkMediaQueries();\\n      }\\n      // Add data-mutate since children may need it.\\n      this.$element.attr('data-mutate', this.$element.attr('data-mutate') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'responsive-menu'));\\n    }\\n\\n    /**\\n     * Initializes events for the Menu.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {\\n        _this._checkMediaQueries();\\n      });\\n      // $(window).on('resize.zf.ResponsiveMenu', function() {\\n      //   _this._checkMediaQueries();\\n      // });\\n    }\\n\\n    /**\\n     * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_checkMediaQueries',\\n    value: function _checkMediaQueries() {\\n      var matchedMq,\\n          _this = this;\\n      // Iterate through each rule and find the last matching rule\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {\\n        if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(key)) {\\n          matchedMq = key;\\n        }\\n      });\\n\\n      // No match? No dice\\n      if (!matchedMq) return;\\n\\n      // Plugin already initialized? We good\\n      if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\\n\\n      // Remove existing plugin-specific CSS classes\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {\\n        _this.$element.removeClass(value.cssClass);\\n      });\\n\\n      // Add the CSS class for the new plugin\\n      this.$element.addClass(this.rules[matchedMq].cssClass);\\n\\n      // Create an instance of the new plugin\\n      if (this.currentPlugin) this.currentPlugin.destroy();\\n      this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\\n    }\\n\\n    /**\\n     * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.currentPlugin.destroy();\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveMenu');\\n    }\\n  }]);\\n\\n  return ResponsiveMenu;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nResponsiveMenu.defaults = {};\\n\\n\\n\\n/***/ }),\\n/* 30 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return ResponsiveToggle; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * ResponsiveToggle module.\\n * @module foundation.responsiveToggle\\n * @requires foundation.util.mediaQuery\\n * @requires foundation.util.motion\\n */\\n\\nvar ResponsiveToggle = function (_Plugin) {\\n  _inherits(ResponsiveToggle, _Plugin);\\n\\n  function ResponsiveToggle() {\\n    _classCallCheck(this, ResponsiveToggle);\\n\\n    return _possibleConstructorReturn(this, (ResponsiveToggle.__proto__ || Object.getPrototypeOf(ResponsiveToggle)).apply(this, arguments));\\n  }\\n\\n  _createClass(ResponsiveToggle, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Tab Bar.\\n     * @class\\n     * @name ResponsiveToggle\\n     * @fires ResponsiveToggle#init\\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\\n      this.className = 'ResponsiveToggle'; // ie9 back compat\\n\\n      this._init();\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n      var targetID = this.$element.data('responsive-toggle');\\n      if (!targetID) {\\n        console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\\n      }\\n\\n      this.$targetMenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + targetID);\\n      this.$toggler = this.$element.find('[data-toggle]').filter(function () {\\n        var target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');\\n        return target === targetID || target === \\\"\\\";\\n      });\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.options, this.$targetMenu.data());\\n\\n      // If they were set, parse the animation classes\\n      if (this.options.animate) {\\n        var input = this.options.animate.split(' ');\\n\\n        this.animationIn = input[0];\\n        this.animationOut = input[1] || null;\\n      }\\n\\n      this._update();\\n    }\\n\\n    /**\\n     * Adds necessary event handlers for the tab bar to work.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n\\n      this._updateMqHandler = this._update.bind(this);\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._updateMqHandler);\\n\\n      this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\\n    }\\n\\n    /**\\n     * Checks the current media query to determine if the tab bar should be visible or hidden.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_update',\\n    value: function _update() {\\n      // Mobile\\n      if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(this.options.hideFor)) {\\n        this.$element.show();\\n        this.$targetMenu.hide();\\n      }\\n\\n      // Desktop\\n      else {\\n          this.$element.hide();\\n          this.$targetMenu.show();\\n        }\\n    }\\n\\n    /**\\n     * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\\n     * @function\\n     * @fires ResponsiveToggle#toggled\\n     */\\n\\n  }, {\\n    key: 'toggleMenu',\\n    value: function toggleMenu() {\\n      var _this3 = this;\\n\\n      if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].atLeast(this.options.hideFor)) {\\n        /**\\n         * Fires when the element attached to the tab bar toggles.\\n         * @event ResponsiveToggle#toggled\\n         */\\n        if (this.options.animate) {\\n          if (this.$targetMenu.is(':hidden')) {\\n            __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__[\\\"a\\\" /* Motion */].animateIn(this.$targetMenu, this.animationIn, function () {\\n              _this3.$element.trigger('toggled.zf.responsiveToggle');\\n              _this3.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');\\n            });\\n          } else {\\n            __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut(this.$targetMenu, this.animationOut, function () {\\n              _this3.$element.trigger('toggled.zf.responsiveToggle');\\n            });\\n          }\\n        } else {\\n          this.$targetMenu.toggle(0);\\n          this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');\\n          this.$element.trigger('toggled.zf.responsiveToggle');\\n        }\\n      }\\n    }\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('.zf.responsiveToggle');\\n      this.$toggler.off('.zf.responsiveToggle');\\n\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._updateMqHandler);\\n    }\\n  }]);\\n\\n  return ResponsiveToggle;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nResponsiveToggle.defaults = {\\n  /**\\n   * The breakpoint after which the menu is always shown, and the tab bar is hidden.\\n   * @option\\n   * @type {string}\\n   * @default 'medium'\\n   */\\n  hideFor: 'medium',\\n\\n  /**\\n   * To decide if the toggle should be animated or not.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  animate: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 31 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Reveal; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Reveal module.\\n * @module foundation.reveal\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.triggers\\n * @requires foundation.util.mediaQuery\\n * @requires foundation.util.motion if using animations\\n */\\n\\nvar Reveal = function (_Plugin) {\\n  _inherits(Reveal, _Plugin);\\n\\n  function Reveal() {\\n    _classCallCheck(this, Reveal);\\n\\n    return _possibleConstructorReturn(this, (Reveal.__proto__ || Object.getPrototypeOf(Reveal)).apply(this, arguments));\\n  }\\n\\n  _createClass(Reveal, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Reveal.\\n     * @class\\n     * @name Reveal\\n     * @param {jQuery} element - jQuery object to use for the modal.\\n     * @param {Object} options - optional parameters.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Reveal.defaults, this.$element.data(), options);\\n      this.className = 'Reveal'; // ie9 back compat\\n      this._init();\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Reveal', {\\n        'ESCAPE': 'close'\\n      });\\n    }\\n\\n    /**\\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n      this.id = this.$element.attr('id');\\n      this.isActive = false;\\n      this.cached = { mq: __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].current };\\n      this.isMobile = mobileSniff();\\n\\n      this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open=\\\"' + this.id + '\\\"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open=\\\"' + this.id + '\\\"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle=\\\"' + this.id + '\\\"]');\\n      this.$anchor.attr({\\n        'aria-controls': this.id,\\n        'aria-haspopup': true,\\n        'tabindex': 0\\n      });\\n\\n      if (this.options.fullScreen || this.$element.hasClass('full')) {\\n        this.options.fullScreen = true;\\n        this.options.overlay = false;\\n      }\\n      if (this.options.overlay && !this.$overlay) {\\n        this.$overlay = this._makeOverlay(this.id);\\n      }\\n\\n      this.$element.attr({\\n        'role': 'dialog',\\n        'aria-hidden': true,\\n        'data-yeti-box': this.id,\\n        'data-resize': this.id\\n      });\\n\\n      if (this.$overlay) {\\n        this.$element.detach().appendTo(this.$overlay);\\n      } else {\\n        this.$element.detach().appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo));\\n        this.$element.addClass('without-overlay');\\n      }\\n      this._events();\\n      if (this.options.deepLink && window.location.hash === '#' + this.id) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.reveal', this.open.bind(this));\\n      }\\n    }\\n\\n    /**\\n     * Creates an overlay div to display behind the modal.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_makeOverlay',\\n    value: function _makeOverlay() {\\n      var additionalOverlayClasses = '';\\n\\n      if (this.options.additionalOverlayClasses) {\\n        additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;\\n      }\\n\\n      return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);\\n    }\\n\\n    /**\\n     * Updates position of modal\\n     * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_updatePosition',\\n    value: function _updatePosition() {\\n      var width = this.$element.outerWidth();\\n      var outerWidth = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).width();\\n      var height = this.$element.outerHeight();\\n      var outerHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).height();\\n      var left, top;\\n      if (this.options.hOffset === 'auto') {\\n        left = parseInt((outerWidth - width) / 2, 10);\\n      } else {\\n        left = parseInt(this.options.hOffset, 10);\\n      }\\n      if (this.options.vOffset === 'auto') {\\n        if (height > outerHeight) {\\n          top = parseInt(Math.min(100, outerHeight / 10), 10);\\n        } else {\\n          top = parseInt((outerHeight - height) / 4, 10);\\n        }\\n      } else {\\n        top = parseInt(this.options.vOffset, 10);\\n      }\\n      this.$element.css({ top: top + 'px' });\\n      // only worry about left if we don't have an overlay or we havea  horizontal offset,\\n      // otherwise we're perfectly in the middle\\n      if (!this.$overlay || this.options.hOffset !== 'auto') {\\n        this.$element.css({ left: left + 'px' });\\n        this.$element.css({ margin: '0px' });\\n      }\\n    }\\n\\n    /**\\n     * Adds event handlers for the modal.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this3 = this;\\n\\n      var _this = this;\\n\\n      this.$element.on({\\n        'open.zf.trigger': this.open.bind(this),\\n        'close.zf.trigger': function (event, $element) {\\n          if (event.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(event.target).parents('[data-closable]')[0] === $element) {\\n            // only close reveal when it's explicitly called\\n            return _this3.close.apply(_this3);\\n          }\\n        },\\n        'toggle.zf.trigger': this.toggle.bind(this),\\n        'resizeme.zf.trigger': function () {\\n          _this._updatePosition();\\n        }\\n      });\\n\\n      if (this.options.closeOnClick && this.options.overlay) {\\n        this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {\\n          if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {\\n            return;\\n          }\\n          _this.close();\\n        });\\n      }\\n      if (this.options.deepLink) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));\\n      }\\n    }\\n\\n    /**\\n     * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_handleState',\\n    value: function _handleState(e) {\\n      if (window.location.hash === '#' + this.id && !this.isActive) {\\n        this.open();\\n      } else {\\n        this.close();\\n      }\\n    }\\n\\n    /**\\n     * Opens the modal controlled by `this.$anchor`, and closes all others by default.\\n     * @function\\n     * @fires Reveal#closeme\\n     * @fires Reveal#open\\n     */\\n\\n  }, {\\n    key: 'open',\\n    value: function open() {\\n      var _this4 = this;\\n\\n      // either update or replace browser history\\n      if (this.options.deepLink) {\\n        var hash = '#' + this.id;\\n\\n        if (window.history.pushState) {\\n          if (this.options.updateHistory) {\\n            window.history.pushState({}, '', hash);\\n          } else {\\n            window.history.replaceState({}, '', hash);\\n          }\\n        } else {\\n          window.location.hash = hash;\\n        }\\n      }\\n\\n      this.isActive = true;\\n\\n      // Make elements invisible, but remove display: none so we can get size and positioning\\n      this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\\n      if (this.options.overlay) {\\n        this.$overlay.css({ 'visibility': 'hidden' }).show();\\n      }\\n\\n      this._updatePosition();\\n\\n      this.$element.hide().css({ 'visibility': '' });\\n\\n      if (this.$overlay) {\\n        this.$overlay.css({ 'visibility': '' }).hide();\\n        if (this.$element.hasClass('fast')) {\\n          this.$overlay.addClass('fast');\\n        } else if (this.$element.hasClass('slow')) {\\n          this.$overlay.addClass('slow');\\n        }\\n      }\\n\\n      if (!this.options.multipleOpened) {\\n        /**\\n         * Fires immediately before the modal opens.\\n         * Closes any other modals that are currently open\\n         * @event Reveal#closeme\\n         */\\n        this.$element.trigger('closeme.zf.reveal', this.id);\\n      }\\n\\n      var _this = this;\\n\\n      function addRevealOpenClasses() {\\n        if (_this.isMobile) {\\n          if (!_this.originalScrollPos) {\\n            _this.originalScrollPos = window.pageYOffset;\\n          }\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').addClass('is-reveal-open');\\n        } else {\\n          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-reveal-open');\\n        }\\n      }\\n      // Motion UI method of reveal\\n      if (this.options.animationIn) {\\n        var afterAnimation = function () {\\n          _this.$element.attr({\\n            'aria-hidden': false,\\n            'tabindex': -1\\n          }).focus();\\n          addRevealOpenClasses();\\n          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].trapFocus(_this.$element);\\n        };\\n\\n        if (this.options.overlay) {\\n          __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__[\\\"a\\\" /* Motion */].animateIn(this.$overlay, 'fade-in');\\n        }\\n        __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__[\\\"a\\\" /* Motion */].animateIn(this.$element, this.options.animationIn, function () {\\n          if (_this4.$element) {\\n            // protect against object having been removed\\n            _this4.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].findFocusable(_this4.$element);\\n            afterAnimation();\\n          }\\n        });\\n      }\\n      // jQuery method of reveal\\n      else {\\n          if (this.options.overlay) {\\n            this.$overlay.show(0);\\n          }\\n          this.$element.show(this.options.showDelay);\\n        }\\n\\n      // handle accessibility\\n      this.$element.attr({\\n        'aria-hidden': false,\\n        'tabindex': -1\\n      }).focus();\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].trapFocus(this.$element);\\n\\n      addRevealOpenClasses();\\n\\n      this._extraHandlers();\\n\\n      /**\\n       * Fires when the modal has successfully opened.\\n       * @event Reveal#open\\n       */\\n      this.$element.trigger('open.zf.reveal');\\n    }\\n\\n    /**\\n     * Adds extra event handlers for the body and window if necessary.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_extraHandlers',\\n    value: function _extraHandlers() {\\n      var _this = this;\\n      if (!this.$element) {\\n        return;\\n      } // If we're in the middle of cleanup, don't freak out\\n      this.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].findFocusable(this.$element);\\n\\n      if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').on('click.zf.reveal', function (e) {\\n          if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {\\n            return;\\n          }\\n          _this.close();\\n        });\\n      }\\n\\n      if (this.options.closeOnEsc) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('keydown.zf.reveal', function (e) {\\n          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Reveal', {\\n            close: function () {\\n              if (_this.options.closeOnEsc) {\\n                _this.close();\\n              }\\n            }\\n          });\\n        });\\n      }\\n    }\\n\\n    /**\\n     * Closes the modal.\\n     * @function\\n     * @fires Reveal#closed\\n     */\\n\\n  }, {\\n    key: 'close',\\n    value: function close() {\\n      if (!this.isActive || !this.$element.is(':visible')) {\\n        return false;\\n      }\\n      var _this = this;\\n\\n      // Motion UI method of hiding\\n      if (this.options.animationOut) {\\n        if (this.options.overlay) {\\n          __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut(this.$overlay, 'fade-out');\\n        }\\n\\n        __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut(this.$element, this.options.animationOut, finishUp);\\n      }\\n      // jQuery method of hiding\\n      else {\\n          this.$element.hide(this.options.hideDelay);\\n\\n          if (this.options.overlay) {\\n            this.$overlay.hide(0, finishUp);\\n          } else {\\n            finishUp();\\n          }\\n        }\\n\\n      // Conditionals to remove extra event listeners added on open\\n      if (this.options.closeOnEsc) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('keydown.zf.reveal');\\n      }\\n\\n      if (!this.options.overlay && this.options.closeOnClick) {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').off('click.zf.reveal');\\n      }\\n\\n      this.$element.off('keydown.zf.reveal');\\n\\n      function finishUp() {\\n        if (_this.isMobile) {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').removeClass('is-reveal-open');\\n          }\\n          if (_this.originalScrollPos) {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').scrollTop(_this.originalScrollPos);\\n            _this.originalScrollPos = null;\\n          }\\n        } else {\\n          if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {\\n            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-reveal-open');\\n          }\\n        }\\n\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].releaseFocus(_this.$element);\\n\\n        _this.$element.attr('aria-hidden', true);\\n\\n        /**\\n        * Fires when the modal is done closing.\\n        * @event Reveal#closed\\n        */\\n        _this.$element.trigger('closed.zf.reveal');\\n      }\\n\\n      /**\\n      * Resets the modal content\\n      * This prevents a running video to keep going in the background\\n      */\\n      if (this.options.resetOnClose) {\\n        this.$element.html(this.$element.html());\\n      }\\n\\n      this.isActive = false;\\n      if (_this.options.deepLink) {\\n        if (window.history.replaceState) {\\n          window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));\\n        } else {\\n          window.location.hash = '';\\n        }\\n      }\\n\\n      this.$anchor.focus();\\n    }\\n\\n    /**\\n     * Toggles the open/closed state of a modal.\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle() {\\n      if (this.isActive) {\\n        this.close();\\n      } else {\\n        this.open();\\n      }\\n    }\\n  }, {\\n    key: '_destroy',\\n\\n\\n    /**\\n     * Destroys an instance of a modal.\\n     * @function\\n     */\\n    value: function _destroy() {\\n      if (this.options.overlay) {\\n        this.$element.appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()\\n        this.$overlay.hide().off().remove();\\n      }\\n      this.$element.hide().off();\\n      this.$anchor.off('.zf');\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.reveal:' + this.id);\\n    }\\n  }]);\\n\\n  return Reveal;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nReveal.defaults = {\\n  /**\\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  animationIn: '',\\n  /**\\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  animationOut: '',\\n  /**\\n   * Time, in ms, to delay the opening of a modal after a click if no animation used.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  showDelay: 0,\\n  /**\\n   * Time, in ms, to delay the closing of a modal after a click if no animation used.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  hideDelay: 0,\\n  /**\\n   * Allows a click on the body/overlay to close the modal.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  closeOnClick: true,\\n  /**\\n   * Allows the modal to close if the user presses the `ESCAPE` key.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  closeOnEsc: true,\\n  /**\\n   * If true, allows multiple modals to be displayed at once.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  multipleOpened: false,\\n  /**\\n   * Distance, in pixels, the modal should push down from the top of the screen.\\n   * @option\\n   * @type {number|string}\\n   * @default auto\\n   */\\n  vOffset: 'auto',\\n  /**\\n   * Distance, in pixels, the modal should push in from the side of the screen.\\n   * @option\\n   * @type {number|string}\\n   * @default auto\\n   */\\n  hOffset: 'auto',\\n  /**\\n   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  fullScreen: false,\\n  /**\\n   * Percentage of screen height the modal should push up from the bottom of the view.\\n   * @option\\n   * @type {number}\\n   * @default 10\\n   */\\n  btmOffsetPct: 10,\\n  /**\\n   * Allows the modal to generate an overlay div, which will cover the view when modal opens.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  overlay: true,\\n  /**\\n   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  resetOnClose: false,\\n  /**\\n   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  deepLink: false,\\n  /**\\n   * Update the browser history with the open modal\\n   * @option\\n   * @default false\\n   */\\n  updateHistory: false,\\n  /**\\n  * Allows the modal to append to custom div.\\n  * @option\\n  * @type {string}\\n  * @default \\\"body\\\"\\n  */\\n  appendTo: \\\"body\\\",\\n  /**\\n   * Allows adding additional class names to the reveal overlay.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  additionalOverlayClasses: ''\\n};\\n\\nfunction iPhoneSniff() {\\n  return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)\\n  );\\n}\\n\\nfunction androidSniff() {\\n  return (/Android/.test(window.navigator.userAgent)\\n  );\\n}\\n\\nfunction mobileSniff() {\\n  return iPhoneSniff() || androidSniff();\\n}\\n\\n\\n\\n/***/ }),\\n/* 32 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Slider; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(3);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__ = __webpack_require__(10);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Slider module.\\n * @module foundation.slider\\n * @requires foundation.util.motion\\n * @requires foundation.util.triggers\\n * @requires foundation.util.keyboard\\n * @requires foundation.util.touch\\n */\\n\\nvar Slider = function (_Plugin) {\\n  _inherits(Slider, _Plugin);\\n\\n  function Slider() {\\n    _classCallCheck(this, Slider);\\n\\n    return _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).apply(this, arguments));\\n  }\\n\\n  _createClass(Slider, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a slider control.\\n     * @class\\n     * @name Slider\\n     * @param {jQuery} element - jQuery object to make into a slider control.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Slider.defaults, this.$element.data(), options);\\n      this.className = 'Slider'; // ie9 back compat\\n\\n      // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.\\n      __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__[\\\"a\\\" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n      __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      this._init();\\n\\n      __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].register('Slider', {\\n        'ltr': {\\n          'ARROW_RIGHT': 'increase',\\n          'ARROW_UP': 'increase',\\n          'ARROW_DOWN': 'decrease',\\n          'ARROW_LEFT': 'decrease',\\n          'SHIFT_ARROW_RIGHT': 'increase_fast',\\n          'SHIFT_ARROW_UP': 'increase_fast',\\n          'SHIFT_ARROW_DOWN': 'decrease_fast',\\n          'SHIFT_ARROW_LEFT': 'decrease_fast',\\n          'HOME': 'min',\\n          'END': 'max'\\n        },\\n        'rtl': {\\n          'ARROW_LEFT': 'increase',\\n          'ARROW_RIGHT': 'decrease',\\n          'SHIFT_ARROW_LEFT': 'increase_fast',\\n          'SHIFT_ARROW_RIGHT': 'decrease_fast'\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      this.inputs = this.$element.find('input');\\n      this.handles = this.$element.find('[data-slider-handle]');\\n\\n      this.$handle = this.handles.eq(0);\\n      this.$input = this.inputs.length ? this.inputs.eq(0) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle.attr('aria-controls'));\\n      this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\\n\\n      var isDbl = false,\\n          _this = this;\\n      if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\\n        this.options.disabled = true;\\n        this.$element.addClass(this.options.disabledClass);\\n      }\\n      if (!this.inputs.length) {\\n        this.inputs = __WEBPACK_IMPORTED_MODULE_0_jquery___default()().add(this.$input);\\n        this.options.binding = true;\\n      }\\n\\n      this._setInitAttr(0);\\n\\n      if (this.handles[1]) {\\n        this.options.doubleSided = true;\\n        this.$handle2 = this.handles.eq(1);\\n        this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle2.attr('aria-controls'));\\n\\n        if (!this.inputs[1]) {\\n          this.inputs = this.inputs.add(this.$input2);\\n        }\\n        isDbl = true;\\n\\n        // this.$handle.triggerHandler('click.zf.slider');\\n        this._setInitAttr(1);\\n      }\\n\\n      // Set handle positions\\n      this.setHandles();\\n\\n      this._events();\\n    }\\n  }, {\\n    key: 'setHandles',\\n    value: function setHandles() {\\n      var _this3 = this;\\n\\n      if (this.handles[1]) {\\n        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {\\n          _this3._setHandlePos(_this3.$handle2, _this3.inputs.eq(1).val(), true);\\n        });\\n      } else {\\n        this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\\n      }\\n    }\\n  }, {\\n    key: '_reflow',\\n    value: function _reflow() {\\n      this.setHandles();\\n    }\\n    /**\\n    * @function\\n    * @private\\n    * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\\n    */\\n\\n  }, {\\n    key: '_pctOfBar',\\n    value: function _pctOfBar(value) {\\n      var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);\\n\\n      switch (this.options.positionValueFunction) {\\n        case \\\"pow\\\":\\n          pctOfBar = this._logTransform(pctOfBar);\\n          break;\\n        case \\\"log\\\":\\n          pctOfBar = this._powTransform(pctOfBar);\\n          break;\\n      }\\n\\n      return pctOfBar.toFixed(2);\\n    }\\n\\n    /**\\n    * @function\\n    * @private\\n    * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\\n    */\\n\\n  }, {\\n    key: '_value',\\n    value: function _value(pctOfBar) {\\n      switch (this.options.positionValueFunction) {\\n        case \\\"pow\\\":\\n          pctOfBar = this._powTransform(pctOfBar);\\n          break;\\n        case \\\"log\\\":\\n          pctOfBar = this._logTransform(pctOfBar);\\n          break;\\n      }\\n      var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;\\n\\n      return value;\\n    }\\n\\n    /**\\n    * @function\\n    * @private\\n    * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\\n    */\\n\\n  }, {\\n    key: '_logTransform',\\n    value: function _logTransform(value) {\\n      return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);\\n    }\\n\\n    /**\\n    * @function\\n    * @private\\n    * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\\n    */\\n\\n  }, {\\n    key: '_powTransform',\\n    value: function _powTransform(value) {\\n      return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);\\n    }\\n\\n    /**\\n     * Sets the position of the selected handle and fill bar.\\n     * @function\\n     * @private\\n     * @param {jQuery} $hndl - the selected handle to move.\\n     * @param {Number} location - floating point between the start and end values of the slider bar.\\n     * @param {Function} cb - callback function to fire on completion.\\n     * @fires Slider#moved\\n     * @fires Slider#changed\\n     */\\n\\n  }, {\\n    key: '_setHandlePos',\\n    value: function _setHandlePos($hndl, location, noInvert, cb) {\\n      // don't move if the slider has been disabled since its initialization\\n      if (this.$element.hasClass(this.options.disabledClass)) {\\n        return;\\n      }\\n      //might need to alter that slightly for bars that will have odd number selections.\\n      location = parseFloat(location); //on input change events, convert string to number...grumble.\\n\\n      // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\\n      if (location < this.options.start) {\\n        location = this.options.start;\\n      } else if (location > this.options.end) {\\n        location = this.options.end;\\n      }\\n\\n      var isDbl = this.options.doubleSided;\\n\\n      if (isDbl) {\\n        //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\\n        if (this.handles.index($hndl) === 0) {\\n          var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\\n          location = location >= h2Val ? h2Val - this.options.step : location;\\n        } else {\\n          var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\\n          location = location <= h1Val ? h1Val + this.options.step : location;\\n        }\\n      }\\n\\n      //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \\\"upside-down\\\"\\n      //for click and drag events, it's weird due to the scale(-1, 1) css property\\n      if (this.options.vertical && !noInvert) {\\n        location = this.options.end - location;\\n      }\\n\\n      var _this = this,\\n          vert = this.options.vertical,\\n          hOrW = vert ? 'height' : 'width',\\n          lOrT = vert ? 'top' : 'left',\\n          handleDim = $hndl[0].getBoundingClientRect()[hOrW],\\n          elemDim = this.$element[0].getBoundingClientRect()[hOrW],\\n\\n      //percentage of bar min/max value based on click or drag point\\n      pctOfBar = this._pctOfBar(location),\\n\\n      //number of actual pixels to shift the handle, based on the percentage obtained above\\n      pxToMove = (elemDim - handleDim) * pctOfBar,\\n\\n      //percentage of bar to shift the handle\\n      movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\\n      //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\\n      location = parseFloat(location.toFixed(this.options.decimal));\\n      // declare empty object for css adjustments, only used with 2 handled-sliders\\n      var css = {};\\n\\n      this._setValues($hndl, location);\\n\\n      // TODO update to calculate based on values set to respective inputs??\\n      if (isDbl) {\\n        var isLeftHndl = this.handles.index($hndl) === 0,\\n\\n        //empty variable, will be used for min-height/width for fill bar\\n        dim,\\n\\n        //percentage w/h of the handle compared to the slider bar\\n        handlePct = ~~(percent(handleDim, elemDim) * 100);\\n        //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\\n        if (isLeftHndl) {\\n          //left or top percentage value to apply to the fill bar.\\n          css[lOrT] = movement + '%';\\n          //calculate the new min-height/width for the fill bar.\\n          dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\\n          //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\\n          //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\\n          if (cb && typeof cb === 'function') {\\n            cb();\\n          } //this is only needed for the initialization of 2 handled sliders\\n        } else {\\n          //just caching the value of the left/bottom handle's left/top property\\n          var handlePos = parseFloat(this.$handle[0].style[lOrT]);\\n          //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\\n          //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\\n          dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;\\n        }\\n        // assign the min-height/width to our css object\\n        css['min-' + hOrW] = dim + '%';\\n      }\\n\\n      this.$element.one('finished.zf.animate', function () {\\n        /**\\n         * Fires when the handle is done moving.\\n         * @event Slider#moved\\n         */\\n        _this.$element.trigger('moved.zf.slider', [$hndl]);\\n      });\\n\\n      //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\\n      var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;\\n\\n      __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__[\\\"b\\\" /* Move */])(moveTime, $hndl, function () {\\n        // adjusting the left/top property of the handle, based on the percentage calculated above\\n        // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\\n        // fall back to next best guess.\\n        if (isNaN(movement)) {\\n          $hndl.css(lOrT, pctOfBar * 100 + '%');\\n        } else {\\n          $hndl.css(lOrT, movement + '%');\\n        }\\n\\n        if (!_this.options.doubleSided) {\\n          //if single-handled, a simple method to expand the fill bar\\n          _this.$fill.css(hOrW, pctOfBar * 100 + '%');\\n        } else {\\n          //otherwise, use the css object we created above\\n          _this.$fill.css(css);\\n        }\\n      });\\n\\n      /**\\n       * Fires when the value has not been change for a given time.\\n       * @event Slider#changed\\n       */\\n      clearTimeout(_this.timeout);\\n      _this.timeout = setTimeout(function () {\\n        _this.$element.trigger('changed.zf.slider', [$hndl]);\\n      }, _this.options.changedDelay);\\n    }\\n\\n    /**\\n     * Sets the initial attribute for the slider element.\\n     * @function\\n     * @private\\n     * @param {Number} idx - index of the current handle/input to use.\\n     */\\n\\n  }, {\\n    key: '_setInitAttr',\\n    value: function _setInitAttr(idx) {\\n      var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;\\n      var id = this.inputs.eq(idx).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'slider');\\n      this.inputs.eq(idx).attr({\\n        'id': id,\\n        'max': this.options.end,\\n        'min': this.options.start,\\n        'step': this.options.step\\n      });\\n      this.inputs.eq(idx).val(initVal);\\n      this.handles.eq(idx).attr({\\n        'role': 'slider',\\n        'aria-controls': id,\\n        'aria-valuemax': this.options.end,\\n        'aria-valuemin': this.options.start,\\n        'aria-valuenow': initVal,\\n        'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\\n        'tabindex': 0\\n      });\\n    }\\n\\n    /**\\n     * Sets the input and `aria-valuenow` values for the slider element.\\n     * @function\\n     * @private\\n     * @param {jQuery} $handle - the currently selected handle.\\n     * @param {Number} val - floating point of the new value.\\n     */\\n\\n  }, {\\n    key: '_setValues',\\n    value: function _setValues($handle, val) {\\n      var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\\n      this.inputs.eq(idx).val(val);\\n      $handle.attr('aria-valuenow', val);\\n    }\\n\\n    /**\\n     * Handles events on the slider element.\\n     * Calculates the new location of the current handle.\\n     * If there are two handles and the bar was clicked, it determines which handle to move.\\n     * @function\\n     * @private\\n     * @param {Object} e - the `event` object passed from the listener.\\n     * @param {jQuery} $handle - the current handle to calculate for, if selected.\\n     * @param {Number} val - floating point number for the new value of the slider.\\n     * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\\n     */\\n\\n  }, {\\n    key: '_handleEvent',\\n    value: function _handleEvent(e, $handle, val) {\\n      var value, hasVal;\\n      if (!val) {\\n        //click or drag events\\n        e.preventDefault();\\n        var _this = this,\\n            vertical = this.options.vertical,\\n            param = vertical ? 'height' : 'width',\\n            direction = vertical ? 'top' : 'left',\\n            eventOffset = vertical ? e.pageY : e.pageX,\\n            halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\\n            barDim = this.$element[0].getBoundingClientRect()[param],\\n            windowScroll = vertical ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollTop() : __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollLeft();\\n\\n        var elemOffset = this.$element.offset()[direction];\\n\\n        // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\\n        // best way to guess this is simulated is if clientY == pageY\\n        if (e.clientY === e.pageY) {\\n          eventOffset = eventOffset + windowScroll;\\n        }\\n        var eventFromBar = eventOffset - elemOffset;\\n        var barXY;\\n        if (eventFromBar < 0) {\\n          barXY = 0;\\n        } else if (eventFromBar > barDim) {\\n          barXY = barDim;\\n        } else {\\n          barXY = eventFromBar;\\n        }\\n        var offsetPct = percent(barXY, barDim);\\n\\n        value = this._value(offsetPct);\\n\\n        // turn everything around for RTL, yay math!\\n        if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__[\\\"a\\\" /* rtl */])() && !this.options.vertical) {\\n          value = this.options.end - value;\\n        }\\n\\n        value = _this._adjustValue(null, value);\\n        //boolean flag for the setHandlePos fn, specifically for vertical sliders\\n        hasVal = false;\\n\\n        if (!$handle) {\\n          //figure out which handle it is, pass it to the next function.\\n          var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\\n              secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\\n          $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\\n        }\\n      } else {\\n        //change event on input\\n        value = this._adjustValue(null, val);\\n        hasVal = true;\\n      }\\n\\n      this._setHandlePos($handle, value, hasVal);\\n    }\\n\\n    /**\\n     * Adjustes value for handle in regard to step value. returns adjusted value\\n     * @function\\n     * @private\\n     * @param {jQuery} $handle - the selected handle.\\n     * @param {Number} value - value to adjust. used if $handle is falsy\\n     */\\n\\n  }, {\\n    key: '_adjustValue',\\n    value: function _adjustValue($handle, value) {\\n      var val,\\n          step = this.options.step,\\n          div = parseFloat(step / 2),\\n          left,\\n          prev_val,\\n          next_val;\\n      if (!!$handle) {\\n        val = parseFloat($handle.attr('aria-valuenow'));\\n      } else {\\n        val = value;\\n      }\\n      left = val % step;\\n      prev_val = val - left;\\n      next_val = prev_val + step;\\n      if (left === 0) {\\n        return val;\\n      }\\n      val = val >= prev_val + div ? next_val : prev_val;\\n      return val;\\n    }\\n\\n    /**\\n     * Adds event listeners to the slider elements.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      this._eventsForHandle(this.$handle);\\n      if (this.handles[1]) {\\n        this._eventsForHandle(this.$handle2);\\n      }\\n    }\\n\\n    /**\\n     * Adds event listeners a particular handle\\n     * @function\\n     * @private\\n     * @param {jQuery} $handle - the current handle to apply listeners to.\\n     */\\n\\n  }, {\\n    key: '_eventsForHandle',\\n    value: function _eventsForHandle($handle) {\\n      var _this = this,\\n          curHandle,\\n          timer;\\n\\n      this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\\n        var idx = _this.inputs.index(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));\\n        _this._handleEvent(e, _this.handles.eq(idx), __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val());\\n      });\\n\\n      if (this.options.clickSelect) {\\n        this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\\n          if (_this.$element.data('dragging')) {\\n            return false;\\n          }\\n\\n          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is('[data-slider-handle]')) {\\n            if (_this.options.doubleSided) {\\n              _this._handleEvent(e);\\n            } else {\\n              _this._handleEvent(e, _this.$handle);\\n            }\\n          }\\n        });\\n      }\\n\\n      if (this.options.draggable) {\\n        this.handles.addTouch();\\n\\n        var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');\\n        $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\\n          $handle.addClass('is-dragging');\\n          _this.$fill.addClass('is-dragging'); //\\n          _this.$element.data('dragging', true);\\n\\n          curHandle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.currentTarget);\\n\\n          $body.on('mousemove.zf.slider', function (e) {\\n            e.preventDefault();\\n            _this._handleEvent(e, curHandle);\\n          }).on('mouseup.zf.slider', function (e) {\\n            _this._handleEvent(e, curHandle);\\n\\n            $handle.removeClass('is-dragging');\\n            _this.$fill.removeClass('is-dragging');\\n            _this.$element.data('dragging', false);\\n\\n            $body.off('mousemove.zf.slider mouseup.zf.slider');\\n          });\\n        })\\n        // prevent events triggered by touch\\n        .on('selectstart.zf.slider touchmove.zf.slider', function (e) {\\n          e.preventDefault();\\n        });\\n      }\\n\\n      $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\\n        var _$handle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),\\n            idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\\n            oldValue = parseFloat(_this.inputs.eq(idx).val()),\\n            newValue;\\n\\n        // handle keyboard event with keyboard util\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__[\\\"a\\\" /* Keyboard */].handleKey(e, 'Slider', {\\n          decrease: function () {\\n            newValue = oldValue - _this.options.step;\\n          },\\n          increase: function () {\\n            newValue = oldValue + _this.options.step;\\n          },\\n          decrease_fast: function () {\\n            newValue = oldValue - _this.options.step * 10;\\n          },\\n          increase_fast: function () {\\n            newValue = oldValue + _this.options.step * 10;\\n          },\\n          min: function () {\\n            newValue = _this.options.start;\\n          },\\n          max: function () {\\n            newValue = _this.options.end;\\n          },\\n          handled: function () {\\n            // only set handle pos when event was handled specially\\n            e.preventDefault();\\n            _this._setHandlePos(_$handle, newValue, true);\\n          }\\n        });\\n        /*if (newValue) { // if pressed key has special function, update value\\n          e.preventDefault();\\n          _this._setHandlePos(_$handle, newValue);\\n        }*/\\n      });\\n    }\\n\\n    /**\\n     * Destroys the slider plugin.\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.handles.off('.zf.slider');\\n      this.inputs.off('.zf.slider');\\n      this.$element.off('.zf.slider');\\n\\n      clearTimeout(this.timeout);\\n    }\\n  }]);\\n\\n  return Slider;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nSlider.defaults = {\\n  /**\\n   * Minimum value for the slider scale.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  start: 0,\\n  /**\\n   * Maximum value for the slider scale.\\n   * @option\\n   * @type {number}\\n   * @default 100\\n   */\\n  end: 100,\\n  /**\\n   * Minimum value change per change event.\\n   * @option\\n   * @type {number}\\n   * @default 1\\n   */\\n  step: 1,\\n  /**\\n   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  initialStart: 0,\\n  /**\\n   * Value at which the right handle/second input should be set to on initialization.\\n   * @option\\n   * @type {number}\\n   * @default 100\\n   */\\n  initialEnd: 100,\\n  /**\\n   * Allows the input to be located outside the container and visible. Set to by the JS\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  binding: false,\\n  /**\\n   * Allows the user to click/tap on the slider bar to select a value.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  clickSelect: true,\\n  /**\\n   * Set to true and use the `vertical` class to change alignment to vertical.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  vertical: false,\\n  /**\\n   * Allows the user to drag the slider handle(s) to select a value.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  draggable: true,\\n  /**\\n   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  disabled: false,\\n  /**\\n   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  doubleSided: false,\\n  /**\\n   * Potential future feature.\\n   */\\n  // steps: 100,\\n  /**\\n   * Number of decimal places the plugin should go to for floating point precision.\\n   * @option\\n   * @type {number}\\n   * @default 2\\n   */\\n  decimal: 2,\\n  /**\\n   * Time delay for dragged elements.\\n   */\\n  // dragDelay: 0,\\n  /**\\n   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\\n   * @option\\n   * @type {number}\\n   * @default 200\\n   */\\n  moveTime: 200, //update this if changing the transition time in the sass\\n  /**\\n   * Class applied to disabled sliders.\\n   * @option\\n   * @type {string}\\n   * @default 'disabled'\\n   */\\n  disabledClass: 'disabled',\\n  /**\\n   * Will invert the default layout for a vertical<span data-tooltip title=\\\"who would do this???\\\"> </span>slider.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  invertVertical: false,\\n  /**\\n   * Milliseconds before the `changed.zf-slider` event is triggered after value change.\\n   * @option\\n   * @type {number}\\n   * @default 500\\n   */\\n  changedDelay: 500,\\n  /**\\n  * Basevalue for non-linear sliders\\n  * @option\\n  * @type {number}\\n  * @default 5\\n  */\\n  nonLinearBase: 5,\\n  /**\\n  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.\\n  * @option\\n  * @type {string}\\n  * @default 'linear'\\n  */\\n  positionValueFunction: 'linear'\\n};\\n\\nfunction percent(frac, num) {\\n  return frac / num;\\n}\\nfunction absPosition($handle, dir, clickPos, param) {\\n  return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\\n}\\nfunction baseLog(base, value) {\\n  return Math.log(value) / Math.log(base);\\n}\\n\\n\\n\\n/***/ }),\\n/* 33 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Sticky; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Sticky module.\\n * @module foundation.sticky\\n * @requires foundation.util.triggers\\n * @requires foundation.util.mediaQuery\\n */\\n\\nvar Sticky = function (_Plugin) {\\n  _inherits(Sticky, _Plugin);\\n\\n  function Sticky() {\\n    _classCallCheck(this, Sticky);\\n\\n    return _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).apply(this, arguments));\\n  }\\n\\n  _createClass(Sticky, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a sticky thing.\\n     * @class\\n     * @name Sticky\\n     * @param {jQuery} element - jQuery object to make sticky.\\n     * @param {Object} options - options object passed when creating the element programmatically.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Sticky.defaults, this.$element.data(), options);\\n      this.className = 'Sticky'; // ie9 back compat\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      this._init();\\n    }\\n\\n    /**\\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n\\n      var $parent = this.$element.parent('[data-sticky-container]'),\\n          id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'sticky'),\\n          _this = this;\\n\\n      if ($parent.length) {\\n        this.$container = $parent;\\n      } else {\\n        this.wasWrapped = true;\\n        this.$element.wrap(this.options.container);\\n        this.$container = this.$element.parent();\\n      }\\n      this.$container.addClass(this.options.containerClass);\\n\\n      this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });\\n      if (this.options.anchor !== '') {\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor).attr({ 'data-mutate': id });\\n      }\\n\\n      this.scrollCount = this.options.checkEvery;\\n      this.isStuck = false;\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.sticky', function () {\\n        //We calculate the container height to have correct values for anchor points offset calculation.\\n        _this.containerHeight = _this.$element.css(\\\"display\\\") == \\\"none\\\" ? 0 : _this.$element[0].getBoundingClientRect().height;\\n        _this.$container.css('height', _this.containerHeight);\\n        _this.elemHeight = _this.containerHeight;\\n        if (_this.options.anchor !== '') {\\n          _this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor);\\n        } else {\\n          _this._parsePoints();\\n        }\\n\\n        _this._setSizes(function () {\\n          var scroll = window.pageYOffset;\\n          _this._calc(false, scroll);\\n          //Unstick the element will ensure that proper classes are set.\\n          if (!_this.isStuck) {\\n            _this._removeSticky(scroll >= _this.topPoint ? false : true);\\n          }\\n        });\\n        _this._events(id.split('-').reverse().join('-'));\\n      });\\n    }\\n\\n    /**\\n     * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_parsePoints',\\n    value: function _parsePoints() {\\n      var top = this.options.topAnchor == \\\"\\\" ? 1 : this.options.topAnchor,\\n          btm = this.options.btmAnchor == \\\"\\\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\\n          pts = [top, btm],\\n          breaks = {};\\n      for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\\n        var pt;\\n        if (typeof pts[i] === 'number') {\\n          pt = pts[i];\\n        } else {\\n          var place = pts[i].split(':'),\\n              anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + place[0]);\\n\\n          pt = anchor.offset().top;\\n          if (place[1] && place[1].toLowerCase() === 'bottom') {\\n            pt += anchor[0].getBoundingClientRect().height;\\n          }\\n        }\\n        breaks[i] = pt;\\n      }\\n\\n      this.points = breaks;\\n      return;\\n    }\\n\\n    /**\\n     * Adds event handlers for the scrolling element.\\n     * @private\\n     * @param {String} id - pseudo-random id for unique scroll event listener.\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events(id) {\\n      var _this = this,\\n          scrollListener = this.scrollListener = 'scroll.zf.' + id;\\n      if (this.isOn) {\\n        return;\\n      }\\n      if (this.canStick) {\\n        this.isOn = true;\\n        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener).on(scrollListener, function (e) {\\n          if (_this.scrollCount === 0) {\\n            _this.scrollCount = _this.options.checkEvery;\\n            _this._setSizes(function () {\\n              _this._calc(false, window.pageYOffset);\\n            });\\n          } else {\\n            _this.scrollCount--;\\n            _this._calc(false, window.pageYOffset);\\n          }\\n        });\\n      }\\n\\n      this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\\n        _this._eventsHandler(id);\\n      });\\n\\n      this.$element.on('mutateme.zf.trigger', function (e, el) {\\n        _this._eventsHandler(id);\\n      });\\n\\n      if (this.$anchor) {\\n        this.$anchor.on('mutateme.zf.trigger', function (e, el) {\\n          _this._eventsHandler(id);\\n        });\\n      }\\n    }\\n\\n    /**\\n     * Handler for events.\\n     * @private\\n     * @param {String} id - pseudo-random id for unique scroll event listener.\\n     */\\n\\n  }, {\\n    key: '_eventsHandler',\\n    value: function _eventsHandler(id) {\\n      var _this = this,\\n          scrollListener = this.scrollListener = 'scroll.zf.' + id;\\n\\n      _this._setSizes(function () {\\n        _this._calc(false);\\n        if (_this.canStick) {\\n          if (!_this.isOn) {\\n            _this._events(id);\\n          }\\n        } else if (_this.isOn) {\\n          _this._pauseListeners(scrollListener);\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Removes event handlers for scroll and change events on anchor.\\n     * @fires Sticky#pause\\n     * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\\n     */\\n\\n  }, {\\n    key: '_pauseListeners',\\n    value: function _pauseListeners(scrollListener) {\\n      this.isOn = false;\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener);\\n\\n      /**\\n       * Fires when the plugin is paused due to resize event shrinking the view.\\n       * @event Sticky#pause\\n       * @private\\n       */\\n      this.$element.trigger('pause.zf.sticky');\\n    }\\n\\n    /**\\n     * Called on every `scroll` event and on `_init`\\n     * fires functions based on booleans and cached values\\n     * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\\n     * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\\n     */\\n\\n  }, {\\n    key: '_calc',\\n    value: function _calc(checkSizes, scroll) {\\n      if (checkSizes) {\\n        this._setSizes();\\n      }\\n\\n      if (!this.canStick) {\\n        if (this.isStuck) {\\n          this._removeSticky(true);\\n        }\\n        return false;\\n      }\\n\\n      if (!scroll) {\\n        scroll = window.pageYOffset;\\n      }\\n\\n      if (scroll >= this.topPoint) {\\n        if (scroll <= this.bottomPoint) {\\n          if (!this.isStuck) {\\n            this._setSticky();\\n          }\\n        } else {\\n          if (this.isStuck) {\\n            this._removeSticky(false);\\n          }\\n        }\\n      } else {\\n        if (this.isStuck) {\\n          this._removeSticky(true);\\n        }\\n      }\\n    }\\n\\n    /**\\n     * Causes the $element to become stuck.\\n     * Adds `position: fixed;`, and helper classes.\\n     * @fires Sticky#stuckto\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setSticky',\\n    value: function _setSticky() {\\n      var _this = this,\\n          stickTo = this.options.stickTo,\\n          mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\\n          notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\\n          css = {};\\n\\n      css[mrgn] = this.options[mrgn] + 'em';\\n      css[stickTo] = 0;\\n      css[notStuckTo] = 'auto';\\n      this.isStuck = true;\\n      this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\\n      /**\\n       * Fires when the $element has become `position: fixed;`\\n       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\\n       * @event Sticky#stuckto\\n       */\\n      .trigger('sticky.zf.stuckto:' + stickTo);\\n      this.$element.on(\\\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\\\", function () {\\n        _this._setSizes();\\n      });\\n    }\\n\\n    /**\\n     * Causes the $element to become unstuck.\\n     * Removes `position: fixed;`, and helper classes.\\n     * Adds other helper classes.\\n     * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\\n     * @fires Sticky#unstuckfrom\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_removeSticky',\\n    value: function _removeSticky(isTop) {\\n      var stickTo = this.options.stickTo,\\n          stickToTop = stickTo === 'top',\\n          css = {},\\n          anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\\n          mrgn = stickToTop ? 'marginTop' : 'marginBottom',\\n          notStuckTo = stickToTop ? 'bottom' : 'top',\\n          topOrBottom = isTop ? 'top' : 'bottom';\\n\\n      css[mrgn] = 0;\\n\\n      css['bottom'] = 'auto';\\n      if (isTop) {\\n        css['top'] = 0;\\n      } else {\\n        css['top'] = anchorPt;\\n      }\\n\\n      this.isStuck = false;\\n      this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\\n      /**\\n       * Fires when the $element has become anchored.\\n       * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\\n       * @event Sticky#unstuckfrom\\n       */\\n      .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\\n    }\\n\\n    /**\\n     * Sets the $element and $container sizes for plugin.\\n     * Calls `_setBreakPoints`.\\n     * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setSizes',\\n    value: function _setSizes(cb) {\\n      this.canStick = __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].is(this.options.stickyOn);\\n      if (!this.canStick) {\\n        if (cb && typeof cb === 'function') {\\n          cb();\\n        }\\n      }\\n      var _this = this,\\n          newElemWidth = this.$container[0].getBoundingClientRect().width,\\n          comp = window.getComputedStyle(this.$container[0]),\\n          pdngl = parseInt(comp['padding-left'], 10),\\n          pdngr = parseInt(comp['padding-right'], 10);\\n\\n      if (this.$anchor && this.$anchor.length) {\\n        this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\\n      } else {\\n        this._parsePoints();\\n      }\\n\\n      this.$element.css({\\n        'max-width': newElemWidth - pdngl - pdngr + 'px'\\n      });\\n\\n      var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\\n      if (this.$element.css(\\\"display\\\") == \\\"none\\\") {\\n        newContainerHeight = 0;\\n      }\\n      this.containerHeight = newContainerHeight;\\n      this.$container.css({\\n        height: newContainerHeight\\n      });\\n      this.elemHeight = newContainerHeight;\\n\\n      if (!this.isStuck) {\\n        if (this.$element.hasClass('is-at-bottom')) {\\n          var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;\\n          this.$element.css('top', anchorPt);\\n        }\\n      }\\n\\n      this._setBreakPoints(newContainerHeight, function () {\\n        if (cb && typeof cb === 'function') {\\n          cb();\\n        }\\n      });\\n    }\\n\\n    /**\\n     * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\\n     * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\\n     * @param {Function} cb - optional callback function to be called on completion.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setBreakPoints',\\n    value: function _setBreakPoints(elemHeight, cb) {\\n      if (!this.canStick) {\\n        if (cb && typeof cb === 'function') {\\n          cb();\\n        } else {\\n          return false;\\n        }\\n      }\\n      var mTop = emCalc(this.options.marginTop),\\n          mBtm = emCalc(this.options.marginBottom),\\n          topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\\n          bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\\n\\n      // topPoint = this.$anchor.offset().top || this.points[0],\\n      // bottomPoint = topPoint + this.anchorHeight || this.points[1],\\n      winHeight = window.innerHeight;\\n\\n      if (this.options.stickTo === 'top') {\\n        topPoint -= mTop;\\n        bottomPoint -= elemHeight + mTop;\\n      } else if (this.options.stickTo === 'bottom') {\\n        topPoint -= winHeight - (elemHeight + mBtm);\\n        bottomPoint -= winHeight - mBtm;\\n      } else {\\n        //this would be the stickTo: both option... tricky\\n      }\\n\\n      this.topPoint = topPoint;\\n      this.bottomPoint = bottomPoint;\\n\\n      if (cb && typeof cb === 'function') {\\n        cb();\\n      }\\n    }\\n\\n    /**\\n     * Destroys the current sticky element.\\n     * Resets the element to the top position first.\\n     * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this._removeSticky(true);\\n\\n      this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\\n        height: '',\\n        top: '',\\n        bottom: '',\\n        'max-width': ''\\n      }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');\\n      if (this.$anchor && this.$anchor.length) {\\n        this.$anchor.off('change.zf.sticky');\\n      }\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(this.scrollListener);\\n\\n      if (this.wasWrapped) {\\n        this.$element.unwrap();\\n      } else {\\n        this.$container.removeClass(this.options.containerClass).css({\\n          height: ''\\n        });\\n      }\\n    }\\n  }]);\\n\\n  return Sticky;\\n}(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nSticky.defaults = {\\n  /**\\n   * Customizable container template. Add your own classes for styling and sizing.\\n   * @option\\n   * @type {string}\\n   * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'\\n   */\\n  container: '<div data-sticky-container></div>',\\n  /**\\n   * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.\\n   * @option\\n   * @type {string}\\n   * @default 'top'\\n   */\\n  stickTo: 'top',\\n  /**\\n   * If anchored to a single element, the id of that element.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  anchor: '',\\n  /**\\n   * If using more than one element as anchor points, the id of the top anchor.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  topAnchor: '',\\n  /**\\n   * If using more than one element as anchor points, the id of the bottom anchor.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  btmAnchor: '',\\n  /**\\n   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\\n   * @option\\n   * @type {number}\\n   * @default 1\\n   */\\n  marginTop: 1,\\n  /**\\n   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\\n   * @option\\n   * @type {number}\\n   * @default 1\\n   */\\n  marginBottom: 1,\\n  /**\\n   * Breakpoint string that is the minimum screen size an element should become sticky.\\n   * @option\\n   * @type {string}\\n   * @default 'medium'\\n   */\\n  stickyOn: 'medium',\\n  /**\\n   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\\n   * @option\\n   * @type {string}\\n   * @default 'sticky'\\n   */\\n  stickyClass: 'sticky',\\n  /**\\n   * Class applied to sticky container. Foundation defaults to `sticky-container`.\\n   * @option\\n   * @type {string}\\n   * @default 'sticky-container'\\n   */\\n  containerClass: 'sticky-container',\\n  /**\\n   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\\n   * @option\\n   * @type {number}\\n   * @default -1\\n   */\\n  checkEvery: -1\\n};\\n\\n/**\\n * Helper function to calculate em values\\n * @param Number {em} - number of em's to calculate into pixels\\n */\\nfunction emCalc(em) {\\n  return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\\n}\\n\\n\\n\\n/***/ }),\\n/* 34 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Toggler; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(6);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(5);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n/**\\n * Toggler module.\\n * @module foundation.toggler\\n * @requires foundation.util.motion\\n * @requires foundation.util.triggers\\n */\\n\\nvar Toggler = function (_Plugin) {\\n  _inherits(Toggler, _Plugin);\\n\\n  function Toggler() {\\n    _classCallCheck(this, Toggler);\\n\\n    return _possibleConstructorReturn(this, (Toggler.__proto__ || Object.getPrototypeOf(Toggler)).apply(this, arguments));\\n  }\\n\\n  _createClass(Toggler, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of Toggler.\\n     * @class\\n     * @name Toggler\\n     * @fires Toggler#init\\n     * @param {Object} element - jQuery object to add the trigger to.\\n     * @param {Object} options - Overrides to the default plugin settings.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Toggler.defaults, element.data(), options);\\n      this.className = '';\\n      this.className = 'Toggler'; // ie9 back compat\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      this._init();\\n      this._events();\\n    }\\n\\n    /**\\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      var input;\\n      // Parse animation classes if they were set\\n      if (this.options.animate) {\\n        input = this.options.animate.split(' ');\\n\\n        this.animationIn = input[0];\\n        this.animationOut = input[1] || null;\\n      }\\n      // Otherwise, parse toggle class\\n      else {\\n          input = this.$element.data('toggler');\\n          // Allow for a . at the beginning of the string\\n          this.className = input[0] === '.' ? input.slice(1) : input;\\n        }\\n\\n      // Add ARIA attributes to triggers\\n      var id = this.$element[0].id;\\n      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open=\\\"' + id + '\\\"], [data-close=\\\"' + id + '\\\"], [data-toggle=\\\"' + id + '\\\"]').attr('aria-controls', id);\\n      // If the target is hidden, add aria-hidden\\n      this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\\n    }\\n\\n    /**\\n     * Initializes events for the toggle trigger.\\n     * @function\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\\n    }\\n\\n    /**\\n     * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \\\"on\\\" or \\\"off\\\".\\n     * @function\\n     * @fires Toggler#on\\n     * @fires Toggler#off\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle() {\\n      this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\\n    }\\n  }, {\\n    key: '_toggleClass',\\n    value: function _toggleClass() {\\n      this.$element.toggleClass(this.className);\\n\\n      var isOn = this.$element.hasClass(this.className);\\n      if (isOn) {\\n        /**\\n         * Fires if the target element has the class after a toggle.\\n         * @event Toggler#on\\n         */\\n        this.$element.trigger('on.zf.toggler');\\n      } else {\\n        /**\\n         * Fires if the target element does not have the class after a toggle.\\n         * @event Toggler#off\\n         */\\n        this.$element.trigger('off.zf.toggler');\\n      }\\n\\n      this._updateARIA(isOn);\\n      this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');\\n    }\\n  }, {\\n    key: '_toggleAnimate',\\n    value: function _toggleAnimate() {\\n      var _this = this;\\n\\n      if (this.$element.is(':hidden')) {\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__[\\\"a\\\" /* Motion */].animateIn(this.$element, this.animationIn, function () {\\n          _this._updateARIA(true);\\n          this.trigger('on.zf.toggler');\\n          this.find('[data-mutate]').trigger('mutateme.zf.trigger');\\n        });\\n      } else {\\n        __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__[\\\"a\\\" /* Motion */].animateOut(this.$element, this.animationOut, function () {\\n          _this._updateARIA(false);\\n          this.trigger('off.zf.toggler');\\n          this.find('[data-mutate]').trigger('mutateme.zf.trigger');\\n        });\\n      }\\n    }\\n  }, {\\n    key: '_updateARIA',\\n    value: function _updateARIA(isOn) {\\n      this.$element.attr('aria-expanded', isOn ? true : false);\\n    }\\n\\n    /**\\n     * Destroys the instance of Toggler on the element.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.off('.zf.toggler');\\n    }\\n  }]);\\n\\n  return Toggler;\\n}(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__[\\\"a\\\" /* Plugin */]);\\n\\nToggler.defaults = {\\n  /**\\n   * Tells the plugin if the element should animated when toggled.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  animate: false\\n};\\n\\n\\n\\n/***/ }),\\n/* 35 */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"a\\\", function() { return Tooltip; });\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(4);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(5);\\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__foundation_positionable__ = __webpack_require__(15);\\n\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\\\"value\\\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Tooltip module.\\n * @module foundation.tooltip\\n * @requires foundation.util.box\\n * @requires foundation.util.mediaQuery\\n * @requires foundation.util.triggers\\n */\\n\\nvar Tooltip = function (_Positionable) {\\n  _inherits(Tooltip, _Positionable);\\n\\n  function Tooltip() {\\n    _classCallCheck(this, Tooltip);\\n\\n    return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));\\n  }\\n\\n  _createClass(Tooltip, [{\\n    key: '_setup',\\n\\n    /**\\n     * Creates a new instance of a Tooltip.\\n     * @class\\n     * @name Tooltip\\n     * @fires Tooltip#init\\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\\n     * @param {Object} options - object to extend the default configuration.\\n     */\\n    value: function _setup(element, options) {\\n      this.$element = element;\\n      this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tooltip.defaults, this.$element.data(), options);\\n      this.className = 'Tooltip'; // ie9 back compat\\n\\n      this.isActive = false;\\n      this.isClick = false;\\n\\n      // Triggers init is idempotent, just need to make sure it is initialized\\n      __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__[\\\"a\\\" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);\\n\\n      this._init();\\n    }\\n\\n    /**\\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_init',\\n    value: function _init() {\\n      __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */]._init();\\n      var elemId = this.$element.attr('aria-describedby') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__[\\\"b\\\" /* GetYoDigits */])(6, 'tooltip');\\n\\n      this.options.tipText = this.options.tipText || this.$element.attr('title');\\n      this.template = this.options.template ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.template) : this._buildTemplate(elemId);\\n\\n      if (this.options.allowHtml) {\\n        this.template.appendTo(document.body).html(this.options.tipText).hide();\\n      } else {\\n        this.template.appendTo(document.body).text(this.options.tipText).hide();\\n      }\\n\\n      this.$element.attr({\\n        'title': '',\\n        'aria-describedby': elemId,\\n        'data-yeti-box': elemId,\\n        'data-toggle': elemId,\\n        'data-resize': elemId\\n      }).addClass(this.options.triggerClass);\\n\\n      _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_init', this).call(this);\\n      this._events();\\n    }\\n  }, {\\n    key: '_getDefaultPosition',\\n    value: function _getDefaultPosition() {\\n      // handle legacy classnames\\n      var position = this.$element[0].className.match(/\\\\b(top|left|right|bottom)\\\\b/g);\\n      return position ? position[0] : 'top';\\n    }\\n  }, {\\n    key: '_getDefaultAlignment',\\n    value: function _getDefaultAlignment() {\\n      return 'center';\\n    }\\n  }, {\\n    key: '_getHOffset',\\n    value: function _getHOffset() {\\n      if (this.position === 'left' || this.position === 'right') {\\n        return this.options.hOffset + this.options.tooltipWidth;\\n      } else {\\n        return this.options.hOffset;\\n      }\\n    }\\n  }, {\\n    key: '_getVOffset',\\n    value: function _getVOffset() {\\n      if (this.position === 'top' || this.position === 'bottom') {\\n        return this.options.vOffset + this.options.tooltipHeight;\\n      } else {\\n        return this.options.vOffset;\\n      }\\n    }\\n\\n    /**\\n     * builds the tooltip element, adds attributes, and returns the template.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_buildTemplate',\\n    value: function _buildTemplate(id) {\\n      var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();\\n      var $template = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass(templateClasses).attr({\\n        'role': 'tooltip',\\n        'aria-hidden': true,\\n        'data-is-active': false,\\n        'data-is-focus': false,\\n        'id': id\\n      });\\n      return $template;\\n    }\\n\\n    /**\\n     * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\\n     * if the tooltip is larger than the screen width, default to full width - any user selected margin\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_setPosition',\\n    value: function _setPosition() {\\n      _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_setPosition', this).call(this, this.$element, this.template);\\n    }\\n\\n    /**\\n     * reveals the tooltip, and fires an event to close any other open tooltips on the page\\n     * @fires Tooltip#closeme\\n     * @fires Tooltip#show\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'show',\\n    value: function show() {\\n      if (this.options.showOn !== 'all' && !__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__[\\\"a\\\" /* MediaQuery */].is(this.options.showOn)) {\\n        // console.error('The screen is too small to display this tooltip');\\n        return false;\\n      }\\n\\n      var _this = this;\\n      this.template.css('visibility', 'hidden').show();\\n      this._setPosition();\\n      this.template.removeClass('top bottom left right').addClass(this.position);\\n      this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);\\n\\n      /**\\n       * Fires to close all other open tooltips on the page\\n       * @event Closeme#tooltip\\n       */\\n      this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\\n\\n      this.template.attr({\\n        'data-is-active': true,\\n        'aria-hidden': false\\n      });\\n      _this.isActive = true;\\n      // console.log(this.template);\\n      this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {\\n        //maybe do stuff?\\n      });\\n      /**\\n       * Fires when the tooltip is shown\\n       * @event Tooltip#show\\n       */\\n      this.$element.trigger('show.zf.tooltip');\\n    }\\n\\n    /**\\n     * Hides the current tooltip, and resets the positioning class if it was changed due to collision\\n     * @fires Tooltip#hide\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'hide',\\n    value: function hide() {\\n      // console.log('hiding', this.$element.data('yeti-box'));\\n      var _this = this;\\n      this.template.stop().attr({\\n        'aria-hidden': true,\\n        'data-is-active': false\\n      }).fadeOut(this.options.fadeOutDuration, function () {\\n        _this.isActive = false;\\n        _this.isClick = false;\\n      });\\n      /**\\n       * fires when the tooltip is hidden\\n       * @event Tooltip#hide\\n       */\\n      this.$element.trigger('hide.zf.tooltip');\\n    }\\n\\n    /**\\n     * adds event listeners for the tooltip and its anchor\\n     * TODO combine some of the listeners like focus and mouseenter, etc.\\n     * @private\\n     */\\n\\n  }, {\\n    key: '_events',\\n    value: function _events() {\\n      var _this = this;\\n      var $template = this.template;\\n      var isFocus = false;\\n\\n      if (!this.options.disableHover) {\\n\\n        this.$element.on('mouseenter.zf.tooltip', function (e) {\\n          if (!_this.isActive) {\\n            _this.timeout = setTimeout(function () {\\n              _this.show();\\n            }, _this.options.hoverDelay);\\n          }\\n        }).on('mouseleave.zf.tooltip', function (e) {\\n          clearTimeout(_this.timeout);\\n          if (!isFocus || _this.isClick && !_this.options.clickOpen) {\\n            _this.hide();\\n          }\\n        });\\n      }\\n\\n      if (this.options.clickOpen) {\\n        this.$element.on('mousedown.zf.tooltip', function (e) {\\n          e.stopImmediatePropagation();\\n          if (_this.isClick) {\\n            //_this.hide();\\n            // _this.isClick = false;\\n          } else {\\n            _this.isClick = true;\\n            if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\\n              _this.show();\\n            }\\n          }\\n        });\\n      } else {\\n        this.$element.on('mousedown.zf.tooltip', function (e) {\\n          e.stopImmediatePropagation();\\n          _this.isClick = true;\\n        });\\n      }\\n\\n      if (!this.options.disableForTouch) {\\n        this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {\\n          _this.isActive ? _this.hide() : _this.show();\\n        });\\n      }\\n\\n      this.$element.on({\\n        // 'toggle.zf.trigger': this.toggle.bind(this),\\n        // 'close.zf.trigger': this.hide.bind(this)\\n        'close.zf.trigger': this.hide.bind(this)\\n      });\\n\\n      this.$element.on('focus.zf.tooltip', function (e) {\\n        isFocus = true;\\n        if (_this.isClick) {\\n          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\\n          // a real focus, otherwise on hover and come back we get bad behavior\\n          if (!_this.options.clickOpen) {\\n            isFocus = false;\\n          }\\n          return false;\\n        } else {\\n          _this.show();\\n        }\\n      }).on('focusout.zf.tooltip', function (e) {\\n        isFocus = false;\\n        _this.isClick = false;\\n        _this.hide();\\n      }).on('resizeme.zf.trigger', function () {\\n        if (_this.isActive) {\\n          _this._setPosition();\\n        }\\n      });\\n    }\\n\\n    /**\\n     * adds a toggle method, in addition to the static show() & hide() functions\\n     * @function\\n     */\\n\\n  }, {\\n    key: 'toggle',\\n    value: function toggle() {\\n      if (this.isActive) {\\n        this.hide();\\n      } else {\\n        this.show();\\n      }\\n    }\\n\\n    /**\\n     * Destroys an instance of tooltip, removes template element from the view.\\n     * @function\\n     */\\n\\n  }, {\\n    key: '_destroy',\\n    value: function _destroy() {\\n      this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');\\n\\n      this.template.remove();\\n    }\\n  }]);\\n\\n  return Tooltip;\\n}(__WEBPACK_IMPORTED_MODULE_4__foundation_positionable__[\\\"a\\\" /* Positionable */]);\\n\\nTooltip.defaults = {\\n  disableForTouch: false,\\n  /**\\n   * Time, in ms, before a tooltip should open on hover.\\n   * @option\\n   * @type {number}\\n   * @default 200\\n   */\\n  hoverDelay: 200,\\n  /**\\n   * Time, in ms, a tooltip should take to fade into view.\\n   * @option\\n   * @type {number}\\n   * @default 150\\n   */\\n  fadeInDuration: 150,\\n  /**\\n   * Time, in ms, a tooltip should take to fade out of view.\\n   * @option\\n   * @type {number}\\n   * @default 150\\n   */\\n  fadeOutDuration: 150,\\n  /**\\n   * Disables hover events from opening the tooltip if set to true\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  disableHover: false,\\n  /**\\n   * Optional addtional classes to apply to the tooltip template on init.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  templateClasses: '',\\n  /**\\n   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\\n   * @option\\n   * @type {string}\\n   * @default 'tooltip'\\n   */\\n  tooltipClass: 'tooltip',\\n  /**\\n   * Class applied to the tooltip anchor element.\\n   * @option\\n   * @type {string}\\n   * @default 'has-tip'\\n   */\\n  triggerClass: 'has-tip',\\n  /**\\n   * Minimum breakpoint size at which to open the tooltip.\\n   * @option\\n   * @type {string}\\n   * @default 'small'\\n   */\\n  showOn: 'small',\\n  /**\\n   * Custom template to be used to generate markup for tooltip.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  template: '',\\n  /**\\n   * Text displayed in the tooltip template on open.\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  tipText: '',\\n  touchCloseText: 'Tap to close.',\\n  /**\\n   * Allows the tooltip to remain open if triggered with a click or touch event.\\n   * @option\\n   * @type {boolean}\\n   * @default true\\n   */\\n  clickOpen: true,\\n  /**\\n   * DEPRECATED Additional positioning classes, set by the JS\\n   * @option\\n   * @type {string}\\n   * @default ''\\n   */\\n  positionClass: '',\\n  /**\\n   * Position of tooltip. Can be left, right, bottom, top, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  position: 'auto',\\n  /**\\n   * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.\\n   * @option\\n   * @type {string}\\n   * @default 'auto'\\n   */\\n  alignment: 'auto',\\n  /**\\n   * Allow overlap of container/window. If false, tooltip will first try to\\n   * position as defined by data-position and data-alignment, but reposition if\\n   * it would cause an overflow.  @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  allowOverlap: false,\\n  /**\\n   * Allow overlap of only the bottom of the container. This is the most common\\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\\n   * screen but not otherwise influence or break out of the container.\\n   * Less common for tooltips.\\n   * @option\\n   * @type {boolean}\\n   * @default false\\n   */\\n  allowBottomOverlap: false,\\n  /**\\n   * Distance, in pixels, the template should push away from the anchor on the Y axis.\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  vOffset: 0,\\n  /**\\n   * Distance, in pixels, the template should push away from the anchor on the X axis\\n   * @option\\n   * @type {number}\\n   * @default 0\\n   */\\n  hOffset: 0,\\n  /**\\n   * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip\\n   * @option\\n   * @type {number}\\n   * @default 14\\n   */\\n  tooltipHeight: 14,\\n  /**\\n   * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip\\n   * @option\\n   * @type {number}\\n   * @default 12\\n   */\\n  tooltipWidth: 12,\\n  /**\\n  * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,\\n  * allowing HTML may open yourself up to XSS attacks.\\n  * @option\\n  * @type {boolean}\\n  * @default false\\n  */\\n  allowHtml: false\\n};\\n\\n/**\\n * TODO utilize resize event trigger\\n */\\n\\n\\n\\n/***/ }),\\n/* 36 */\\n/***/ (function(module, exports, __webpack_require__) {\\n\\nmodule.exports = __webpack_require__(19);\\n\\n\\n/***/ })\\n/******/ ]);\"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3NzL2FwcC5zY3NzPzdiOTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zY3NzL2FwcC5zY3NzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("$(function(){'use strict';console.log('header');});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9tb2R1bGVzL19oZWFkZXIuanM/OWMxOCJdLCJuYW1lcyI6WyIkIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUFBLEVBQUUsVUFBVyxDQUNYLGFBRUFDLFFBQVFDLEdBQVIsQ0FBWSxRQUFaLEVBQ0QsQ0FKRCIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnXG5cbiAgY29uc29sZS5sb2coJ2hlYWRlcicpXG59KVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21vZHVsZXMvX2hlYWRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ })
/******/ ]);